use Collection.Generic;
use System.Diagnostics;
use Data.JSON;

bundle LSP {
	#
	# Parser
	#
	class Parser {
		@analysis : AnalysisTree;
		@is_debug : Bool;

		New(text : String) {
			@analysis := Analyzer->ParseString(text,"collect.obl");
			@is_debug := true;
		}

#~
		function : Main(args : String[]) ~ Nil {
			parser : Parser;
			leaving {
				parser->Release();
			};

			timer := System.Time.Timer->New();
			timer->Start();			
			
			if(args->Size() = 1) {
				parser := Parser->New(System.IO.File.FileReader->ReadFile(args[0]));
				if(parser->Parse()) {
					parser->GetSymbols()->ToString()->PrintLine();
				};
			};

			timer->End();
			timer->GetElapsedTime()->PrintLine();
		}
~#

		method : public : GetSymbols() ~ JsonElement {
			symbol := @analysis->GetSymbols();
			if(symbol <> Nil) {
				array := JsonElement->New(JsonElement->JsonType->ARRAY);

				children := symbol->GetSymbols();
				if(children <> Nil) {
					each(i : children) {
						GetSymbols(children[i], array);
					};
				};

				return array;
			};

			return Nil;
		}

		method : GetSymbols(symbol : Symbol, array : JsonElement) ~ Nil {
			builder := JsonBuilder->New();
			
			start_line := symbol->GetStartLine();
			start_index := symbol->GetStartPosition();	

			end_line := symbol->GetEndLine();			
			end_index := symbol->GetEndPosition();
			
			obj := builder->PushObject();
			obj->Insert("kind", symbol->GetKind());
			obj->Insert("name", symbol->GetName());

				builder->PushObject("location");

					builder->PushObject("range");
						obj := builder->PushObject("start");
						obj->Insert("line", start_line);
						obj->Insert("character", start_index);
						builder->Pop();

						obj := builder->PushObject("end");
						obj->Insert("line", end_line);
						obj->Insert("character", end_index);
						builder->Pop();
					builder->Pop();

					builder->PushObject("selectionRange");
						obj := builder->PushObject("start");
						obj->Insert("line", start_line);
						obj->Insert("character", start_index);
						builder->Pop();

						obj := builder->PushObject("end");
						obj->Insert("line", end_line);
						obj->Insert("character", end_index);
						builder->Pop();
					builder->Pop();

			array->Add(builder->PopAll());
			
			children := symbol->GetSymbols();
			if(children <> Nil) {
				each(i : children) {
					GetSymbols(children[i], array);
				};
			};
		}

		method : public : GetReferences(find : String, line_pos : Int, char_pos : Int, uri : String) ~ JsonElement {
#			return @root_entity->GetReferences(find, line_pos, char_pos, uri);
			return Nil;
		}

		method : public : GetDiagnoses(uri : String) ~ JsonElement {
#~			
			diagnostics := JsonElement->New(JsonElement->JsonType->ARRAY);

			if(@diagnose_start <> Nil) {
				start_line := @diagnose_start->GetLine();
				start_index := @diagnose_start->GetPos();
				
				end_line := @diagnose_end->GetLine();
				end_index := @diagnose_end->GetPos();

				each(i : 1) {
					diagnostic := JsonElement->New(JsonElement->JsonType->OBJECT);

					diagnostic->Insert("severity", 1);
					diagnostic->Insert("message", "Unexpected token");
					diagnostic->Insert("source", "objk-linter");

					range := JsonElement->New(JsonElement->JsonType->OBJECT);
					# start
					start := JsonElement->New(JsonElement->JsonType->OBJECT);
					start->Insert("line", start_line);
					start->Insert("character", start_index);
					range->Insert("start", start);
					# end
					end := JsonElement->New(JsonElement->JsonType->OBJECT);
					end->Insert("line", start_line);
					end->Insert("character", end_index);
					range->Insert("end", end);
					diagnostic->Insert("range", range);
					
					diagnostics->Add(diagnostic);
				};
			};
			
			request := JsonElement->New(JsonElement->JsonType->OBJECT);
			request->Insert("uri", uri);
			request->Insert("diagnostics", diagnostics);
			
			return request;
~#		
			return Nil;	
		}

		method : public : Parse() ~ Bool {
			return @analysis->IsParsed();
		}

		method : public : Release() ~ Nil {
			@analysis->Release();
		}


	}

	#
	# Entity
	#
	class Entity {
		@name : String;
		@kind : Entity->Kind;
		@parent : Entity;
		@children : Vector<Entity>;

		consts Kind {
			# REFS
			REF := 0,
			PACKAGE_REF:= 4,
			CLASS_REF := 5,
			METHOD_REF := 6,
			CONSTRUCTOR_REF := 9,
			ENUM_REF := 10,
			FUNCTION_REF := 12,
			VARIABLE_REF := 13,
			# SYMS
			SYM := 100,
			PACKAGE_SYM := 104,
			CLASS_SYM := 105,
			FUNCTION_SYM := 112,
			METHOD_SYM := 106,
			CONSTRUCTOR_SYM := 109
		}

		New(name : String, kind : Entity->Kind, parent : Entity := Nil) {
			@name := name;
			@kind := kind;
			@parent := parent;
			@children := Vector->New()<Entity>;
		}

		method : public : GetName() ~ String {
			return @name;
		}

		method : public : GetKind() ~ Entity->Kind {
			return @kind;
		}

		method : public : GetParent() ~ Entity {
			return @parent;
		}

		method : public : GetChildren() ~ Vector<Entity> {
			return @children;
		}

		method : public : AddChild(child : Entity) ~ Nil {
			@children->AddBack(child);
		}

		method : public : ToString() ~ String {
			return ToString(0);
		}

		method : public : ToString(depth : Int) ~ String {
			start_line := start_pos := -1;
			end_line := end_pos := -1;
			kind := @kind->As(Int);

			buffer := "";
			each(i : depth) {
				buffer += '\t';
			};

			buffer += "[name={$@name}, kind={$kind}, start_line={$start_line}, start_pos={$start_pos}; end_line={$end_line}, end_pos={$end_pos}]";
			
			if(@children <> Nil) {
				each(i : @children) {
					child := @children->Get(i);
					buffer += '\n';
					buffer += child->ToString(depth + 1);
				};
			};

			return buffer;
		}

		method : public : GetReferences(find : String, line_pos : Int, char_pos : Int, uri : String) ~ JsonElement {
#~			
			array := JsonElement->New(JsonElement->JsonType->ARRAY);
			entities := ToVector();

"=== Search: find={$find}, line_pos={$line_pos}, char_pos={$char_pos} ==="->PrintLine();

			found := false;
			entity : Entity;
			for(i := 0; <>found & i < entities->Size(); i += 1;) {
				entity := entities->Get(i);
				if(entity->GetKind() = Entity->Kind->FUNCTION_SYM) {
					start := entity->GetStart();
					start_line := start->GetLine();
					start_pos := start->GetPos();

					end := entity->GetEnd();
					end_line := end->GetLine();
					end_pos := end->GetPos();

					if(start_line <= line_pos & end_line >= line_pos) {
						found := true;
					};
				};
			};

			if(entity <> Nil) {
				parent := entity->GetParent();
				if(parent <> Nil) {
					children := parent->GetChildren();
					each(i : children) {
						child := children->Get(i);
						if(child->GetName()->Equals(find)) {
							AddReference(child, uri, array);
						};
					};
				};
			};

			if(found) {
				children := entity->GetChildren();
				if(children <> Nil) {
					each(i : children) {
						child := children->Get(i);
						if(child->GetName()->Equals(find)) {
							AddReference(child, uri, array);
						};
					};
				};
			};

			return array;
~#			
			return Nil;
		}

		method : AddReference(entity : Entity, uri : String, array : JsonElement) ~ Nil {
#~			
			builder := JsonBuilder->New();

			start_line := end_line := entity->GetStart()->GetLine();
			start_index := entity->GetStart()->GetPos();
			end_index := start_index + entity->GetName()->Size();

"== {$start_line} =="->PrintLine();
			
			builder->PushObject();
			builder->Insert("uri", uri);

			builder->PushObject("range");
				obj := builder->PushObject("start");
				obj->Insert("line", start_line);
				obj->Insert("character", start_index);
				builder->Pop();

				obj := builder->PushObject("end");
				obj->Insert("line", end_line);
				obj->Insert("character", end_index);
				builder->Pop();
			builder->Pop();

			array->Add(builder->Pop());
~#			
		}

		method : public : ToVector() ~ Vector<Entity> {
			vector := Vector->New()<Entity>;
			vector->AddBack(@self);
			ToVector(vector);
			return vector;
		}

		method : ToVector(vector : Vector<Entity>) ~ Nil {
			if(@children <> Nil) {
				each(i : @children) {
					child := @children->Get(i);
					vector->AddBack(child);
					child->ToVector(vector);
				};
			};
		}
	}
}