use Collection.Generic;
use System.Diagnostics;
use Data.JSON;

bundle LSP {
	#
	# Parser
	#
	class Parser {
		@analysis : AnalysisResult;
		@is_debug : Bool;

		New(text : String) {
			if(text <> Nil) {
				@analysis := Analyzer->ParseText(text);
			};

			@is_debug := true;
		}

#~
		function : Main(args : String[]) ~ Nil {
			parser : Parser;
			leaving {
				parser->Release();
			};

			timer := System.Time.Timer->New();
			timer->Start();			
			
			if(args->Size() = 1) {
				parser := Parser->New(System.IO.File.FileReader->ReadFile(args[0]));
				parser->Parse();
				root := parser->GetDiagnosis("file:////abc", "gen_collect.obl");
				if(root <> Nil) {
					root->ToString()->PrintLine();
				};
			};

			timer->End();
			timer->GetElapsedTime()->PrintLine();
		}
~#

		method : public : GetDiagnosis(uri : String, sys_path : String) ~ JsonElement {
			if(@analysis = Nil) {
				return Nil;
			};
			diagnostics := JsonElement->New(JsonElement->JsonType->ARRAY);

			results := @analysis->GetDiagnostics(sys_path);
			if(results <> Nil) {
				each(i : results) {
					result := results[i];

					diagnostic := JsonElement->New(JsonElement->JsonType->OBJECT);

					diagnostic->Insert("severity", result->GetKind()->As(Int) - 100);
					diagnostic->Insert("message", JsonElement->Encode(result->GetName()));
					diagnostic->Insert("source", "objk-linter");

					range := JsonElement->New(JsonElement->JsonType->OBJECT);
					# start
					start := JsonElement->New(JsonElement->JsonType->OBJECT);
					start->Insert("line", result->GetStartLine() - 1);
					start->Insert("character", result->GetStartPosition() - 1);
					range->Insert("start", start);
					
					# end
					end := JsonElement->New(JsonElement->JsonType->OBJECT);
					end->Insert("line", result->GetStartLine() - 1);
					end->Insert("character", result->GetStartPosition() + 2);
					range->Insert("end", end);

					diagnostic->Insert("range", range);
					
					diagnostics->Add(diagnostic);
				};
			};
			
			request := JsonElement->New(JsonElement->JsonType->OBJECT);
			request->Insert("uri", uri);
			request->Insert("diagnostics", diagnostics);
			
			return request;
		}
		
		method : public : FindDeclaration(line_pos : Int, char_pos : Int, uri : String, sys_path : String) ~ JsonElement {
			if(@analysis = Nil) {
				return Nil;
			};

			reference := @analysis->FindDeclaration(line_pos, char_pos, sys_path);
			if(reference <> Nil) {
				builder := JsonBuilder->New();

					start_line := end_line := reference->GetStartLine();
					start_index := reference->GetStartPosition();
					end_index := reference->GetEndPosition();
					
					builder->PushObject();
					builder->Insert("uri", uri);

					builder->PushObject("range");
						obj := builder->PushObject("start");
						obj->Insert("line", start_line);
						obj->Insert("character", start_index);
						builder->Pop();

						obj := builder->PushObject("end");
						obj->Insert("line", end_line);
						obj->Insert("character", end_index);
						builder->Pop();
					builder->Pop();

				return builder->Pop();
			};

			return Nil;
		}

		method : public : FindReferences(line_pos : Int, char_pos : Int, uri : String, sys_path : String) ~ JsonElement {
			if(@analysis = Nil) {
				return Nil;
			};

			references := @analysis->FindReferences(line_pos, char_pos, sys_path);
			if(references <> Nil) {
				array := JsonElement->New(JsonElement->JsonType->ARRAY);

				each(i : references) {
					reference := references[i];
					
					builder := JsonBuilder->New();

					start_line := end_line := reference->GetStartLine();
					start_index := reference->GetStartPosition();
					end_index := reference->GetEndPosition();
					
					builder->PushObject();
					builder->Insert("uri", uri);

					builder->PushObject("range");
						obj := builder->PushObject("start");
						obj->Insert("line", start_line);
						obj->Insert("character", start_index);
						builder->Pop();

						obj := builder->PushObject("end");
						obj->Insert("line", end_line);
						obj->Insert("character", end_index);
						builder->Pop();
					builder->Pop();

					array->Add(builder->Pop());
				};
				
				return array;
			};

			return Nil;
		}

		method : public : GetSymbols() ~ JsonElement {
			if(@analysis = Nil) {
				return Nil;
			};

			symbol := @analysis->GetSymbols();
			if(symbol <> Nil) {
				array := JsonElement->New(JsonElement->JsonType->ARRAY);

				children := symbol->GetResults();
				if(children <> Nil) {
					each(i : children) {
						GetSymbols(children[i], array);
					};
				};

				return array;
			};

			return Nil;
		}

		method : GetSymbols(symbol : Result, array : JsonElement) ~ Nil {
			builder := JsonBuilder->New();
			
			start_line := symbol->GetStartLine();
			start_index := symbol->GetStartPosition();	

			end_line := symbol->GetEndLine();			
			end_index := symbol->GetEndPosition();
			
			obj := builder->PushObject();
			obj->Insert("kind", symbol->GetKind()->As(Int) - 200);
			obj->Insert("name", symbol->GetName());

				builder->PushObject("location");

					builder->PushObject("range");
						obj := builder->PushObject("start");
						obj->Insert("line", start_line);
						obj->Insert("character", start_index);
						builder->Pop();

						obj := builder->PushObject("end");
						obj->Insert("line", end_line);
						obj->Insert("character", end_index);
						builder->Pop();
					builder->Pop();

					builder->PushObject("selectionRange");
						obj := builder->PushObject("start");
						obj->Insert("line", start_line);
						obj->Insert("character", start_index);
						builder->Pop();

						obj := builder->PushObject("end");
						obj->Insert("line", end_line);
						obj->Insert("character", end_index);
						builder->Pop();
					builder->Pop();

			array->Add(builder->PopAll());
			
			children := symbol->GetResults();
			if(children <> Nil) {
				each(i : children) {
					GetSymbols(children[i], array);
				};
			};
		}

		method : public : Parse() ~ Bool {
			if(@analysis = Nil) {
				return false;
			};

			return @analysis->IsParsed();
		}

		method : public : Release() ~ Nil {
			if(@analysis <> Nil) {
				@analysis->Release();
			};
		}
	}
}