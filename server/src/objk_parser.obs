use Collection.Generic;

bundle Data.Parser {
	#
	# Parser
	#
	class Parser {
		
		#--- start testing ---
		function : Main(args : String[]) ~ Nil {
			text := System.IO.File.FileReader->ReadFile(args[0]);
# text->PrintLine();			
			scanner := Scanner->New(text);
			scanner->Scan();
		}

		function : EscapeText(text : String) ~ String {
			buffer := "";

			each(i : text) {
				char := text->Get(i);

				select(char) {
					label '\r' {
						buffer += "\\r";
					}

					label '\n' {
						buffer += "\\n";
					}

					label '\t' {
						buffer += "\\t";
					}

					other {
						buffer += char;
					}
				};
			};

			return buffer;
		}

		#--- end testing ---

		method : public : Parse() ~ Bool {
			return false;
		}
	}

	class : private : TreeNode {
		New() {
		}
	}

	#
	# Scanner
	#
	class : private : Scanner {
		@buffer : Char[];
		@buffer_index : Int;
		@cur_char : Char;
		@next_char : Char;
		@line_num : Int;
		@line_index : Int;

		New(text : String) {
			@buffer := text->ToCharArray();
			@buffer_index := 0;	
		}

		method : NextChar() ~ Nil {
			if(@buffer_index + 1 < @buffer->Size()) {
				@cur_char := @buffer[@buffer_index++];
				@line_index += 1;
				@next_char := @buffer[@buffer_index];
			}
			else if(@buffer_index < @buffer->Size()) {
				@cur_char := @buffer[@buffer_index++];
				@line_index += 1;				
				@next_char := '\0';
			}
			else {
				@cur_char := @next_char := '\0';
			};
		}

		method : Whitespace() ~ Nil {
			while(@cur_char = ' ' | @cur_char = '\t' | @cur_char = '\r' | @cur_char = '\n') {
				if(@cur_char = '\n') {
					NextChar();
					@line_num += 1;
					@line_index := 0;
				};

				NextChar();
			};
		}

		method : Identifier() ~ Nil {
			start := @buffer_index;
			start_index := @line_index;

			while(@cur_char->IsChar() | @cur_char->IsDigit() | @cur_char = '.' | @cur_char = '_' | @cur_char = '@') {
				NextChar();
			};

			ident := String->New(@buffer, start - 1, @buffer_index - start);
"--> IDENT: value='{$ident}': line={$@line_num}, char={$start_index}"->PrintLine();
		}

		method : Number() ~ Nil {
			start := @buffer_index;
			start_index := @line_index;

			while(@cur_char->IsDigit() | @cur_char = 'u' | @cur_char = 'x') {
				NextChar();
			};
			end :=  @buffer_index;

"--> NUM: {$start}, {$end}: line={$@line_num}, char={$start_index}"->PrintLine();
		}

		method : public : Scan() ~ Vector<Token> {
			NextChar();

			# --- while ---
			each(i : 20) {
				Whitespace();

				if(@cur_char->IsChar() | @cur_char = '@' | @cur_char = '_') {
					Identifier();
				}
				else if(@cur_char->IsDigit()) {
					Number();
				}
				else {
					select(@cur_char) {
						label ';' {
							start_index := @line_index - 1;
							"--> SEMI-COLON: line={$@line_num}, char={$start_index}"->PrintLine();
							NextChar();
						}

						label ',' {
							start_index := @line_index - 1;
							"--> COMMA: line={$@line_num}, char={$start_index}"->PrintLine();
							NextChar();
						}

						label '{' {
							start_index := @line_index - 1;
							"--> OPN: line={$@line_num}, char={$start_index}"->PrintLine();
							NextChar();
						}

						label '}' {
							start_index := @line_index - 1;
							"--> CPN: line={$@line_num}, char={$start_index}"->PrintLine();
							NextChar();
						}

						label ':' {
							start_index := @line_index - 1;
							"--> COLON: line={$@line_num}, char={$start_index}"->PrintLine();
							NextChar();
						}

						label '~' {
							start_index := @line_index - 1;
							"--> TILDE: line={$@line_num}, char={$start_index}"->PrintLine();
							NextChar();
						}

						other {
							code := @cur_char->ToInt();
							"### other: value='{$@cur_char}', id={$code} ###"->PrintLine();
						}
					};
				};
			};

			return Nil;
		}
	}

	class : private : Token {
		New() {
		}
	}
}