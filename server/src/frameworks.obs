use Collection.Generic;
use System.IO.Net;
use Data.JSON;

bundle LSP {
	#~
	Abstract socket server worker
	~#
	class LspWorker from System.Concurrency.Thread {		
		@address : String;
		@port : Int;
		@quit : Bool;
		@is_initialized : Bool;
		@is_debug : Bool;
		@documents : Map<String, Document>;
		@socket : TCPSocket;
		@keywords : static : Vector<String>;
		@id : Int;

		function : Init() ~ Nil {
			@keywords := Vector->New()<String>;
			@keywords->AddBack("method");
			@keywords->AddBack("function");
			@keywords->AddBack("Int");
			@keywords->AddBack("Float");
			@keywords->AddBack("Char");
			@keywords->AddBack("Byte");
			@keywords->AddBack("String");
			@keywords->AddBack("Nil");
			@keywords->AddBack("As");
			@keywords->AddBack("use");
			@keywords->AddBack("leaving");
			@keywords->AddBack("if");
			@keywords->AddBack("else");
			@keywords->AddBack("do");
			@keywords->AddBack("while");
			@keywords->AddBack("select");
			@keywords->AddBack("break");
			@keywords->AddBack("continue");
			@keywords->AddBack("other");
			@keywords->AddBack("for");
			@keywords->AddBack("each");
			@keywords->AddBack("reverse");
			@keywords->AddBack("label");
			@keywords->AddBack("return");
			@keywords->AddBack("critical");
		}

		function : GetKeywords() ~ Vector<String> {
			return @keywords;
		}

		New(socket : TCPSocket, is_debug : Bool) {
			Parent();
			@socket := socket;
			@is_debug := is_debug;
			@documents := Map->New()<String, Document>;
		}

		method : public : Run(param : Base) ~ Nil {
			while(<>@quit) {
				request := ReadRpcRequest();
				if(request <> Nil) {
					ProcessResponse(request);
				}	
				else {
					@quit := true;
				};
			};

			@socket->Close();
		}

		method : public : IsDebug() ~ Bool {
			return @is_debug;
		}

		#
		# Notifications
		#
		method : virtual : NotifyInitialized(params : JsonElement) ~ Nil;
		method : virtual : NotifyCancel(params : JsonElement) ~ Nil;
		method : virtual : NotifyDidOpen(params : JsonElement) ~ Nil;
		method : virtual : NotifyDidChange(params : JsonElement) ~ Nil;
		method : virtual : NotifyDidChangeWatchedFiles(params : JsonElement) ~ Nil;
		method : virtual : NotifyDidSave(params : JsonElement) ~ Nil;
		method : virtual : NotifyDidClose(params : JsonElement) ~ Nil;
		method : virtual : NotifyDidChangeWorkspace(params : JsonElement) ~ Nil;

		#
		# Callbacks
		#
		method : virtual : CallbackInitialize(id : Int, params : JsonElement) ~ Nil;
		method : virtual : CallbackShutdown(id : Int, params : JsonElement) ~ Nil;
		method : virtual : CallbackCompletion(id : Int, params : JsonElement) ~ Nil;
		method : virtual : CallbackResolve(id : Int, params : JsonElement) ~ Nil;
		method : virtual : CallbackDocumentSymbol(id : Int, params : JsonElement) ~ Nil;
		method : virtual : CallbackReferences(id : Int, params : JsonElement) ~ Nil;
		method : virtual : CallbackDeclaration(id : Int, params : JsonElement) ~ Nil;
		method : virtual : SignatureHelp(id : Int, params : JsonElement) ~ Nil;

		method : AddDocument(uri : String, document : Document) ~ Nil {
			@documents->Insert(uri, document);
		}

		method : RemoveDocument(uri : String, document : Document) ~ Nil {
			if(@documents->Remove(uri)) {
				if(@is_debug) {
					"\n\n--- Closed file='{$uri}' ---\n"->PrintLine();
				};
				document->Release();
			};
		}

		method : GetDocument(uri : String) ~ Document {
			return @documents->Find(uri);
		}

		# --- process requests ---
		method : ProcessResponse(request : RpcRequest) ~ Nil {
			id := request->GetId();
			method_id := request->GetMethod();
			
			# notification
			if(id->IsNeg()) {
				if(@is_debug) {
					"NOTIFICATION='{$method_id}'\n"->PrintLine();
				};

				if(method_id->Equals("initialized")) {
					NotifyInitialized(request->GetParams());
				}
				else if(method_id->Equals("$/cancelRequest")) {
					NotifyCancel(request->GetParams());
				}
				else if(method_id->Equals("workspace/didChangeWatchedFiles")) {
					NotifyDidChangeWatchedFiles(request->GetParams());
				}
				else if(method_id->Equals("textDocument/didOpen")) {
					NotifyDidOpen(request->GetParams());
				}
				else if(method_id->Equals("textDocument/didChange")) {
					NotifyDidChange(request->GetParams());
				}
				else if(method_id->Equals("textDocument/didSave")) {
					NotifyDidSave(request->GetParams());
				}
				else if(method_id->Equals("textDocument/didClose")) {
					NotifyDidClose(request->GetParams());
				}
				else if(method_id->Equals("workspace/didChangeWorkspaceFolders")) {
					NotifyDidChangeWorkspace(request->GetParams());
				}
				else {
					if(@is_debug) {
						"*** Unknown notification='{$method_id}' ***"->PrintLine();
					};
				};
			}
			# callback
			else {
				if(@is_debug) {
					"METHOD='{$method_id}', id={$id}"->PrintLine();
				};

				if(method_id->Equals("initialize")) {
					CallbackInitialize(id, request->GetParams());
				}
				else if(method_id->Equals("textDocument/completion")) {
					CallbackCompletion(id, request->GetParams());
				}
				else if(method_id->Equals("completionItem/resolve")) {
					CallbackResolve(id, request->GetParams());
				}
				else if(method_id->Equals("textDocument/documentSymbol")) {
					CallbackDocumentSymbol(id, request->GetParams());
				}
				else if(method_id->Equals("textDocument/references")) {
					CallbackReferences(id, request->GetParams());
				}
				else if(method_id->Equals("textDocument/declaration")) {
					CallbackDeclaration(id, request->GetParams());
				}
				else if(method_id->Equals("textDocument/signatureHelp")) {
					SignatureHelp(id, request->GetParams());
				}
				else if(method_id->Equals("shutdown")) {
					CallbackShutdown(id, request->GetParams());
				}
				else {
					if(@is_debug) {
						"*** Unknown method='{$method_id}' ***"->PrintLine();
					};
				};
			};
		}

		# --- utilities ---
		method : ReadString() ~ String {
			line := @socket->ReadLine();
			@socket->ReadLine();

			index := line->Find(':');
			if(index > 0) {
				index += 2;
				length := line->SubString(index, line->Size() - index)->ToInt();
				# TODO: check length (buffer overflow)
				buffer := Byte->New[length];
				@socket->ReadBuffer(0, buffer->Size(), buffer);

				text := String->New(buffer->ToUnicode());
				if(@is_debug) {
					"====\nREAD='{$text}'"->PrintLine();
				};

				return text;
			};

			return "";
		}

		method : WriteString(text : String) ~ Nil {
			if(@is_debug) {
				"WRITE='{$text}'"->PrintLine();
			};		
			length := text->Size();
			@socket->WriteString("Content-Length: {$length}\r\n\r\n{$text}");
		}

		method : ReadRpcRequest() ~ RpcRequest {
			text := ReadString();
			if(<>text->IsEmpty()) {
				json :=JsonParser->New(text);
				if(json->Parse()) {
					node := json->GetRoot();
					
					id := -1;
					id_elem := node->Get("id");
					if(id_elem <> Nil) {
						id := id_elem->GetValue()->ToInt();
					};

					ver := node->Get("jsonrpc");
					mthd := node->Get("method")->GetValue();
					params := node->Get("params");

					if(ver <> Nil & ver->GetValue()->Equals("2.0") & mthd <> Nil) {
						return RpcRequest->New(id, mthd, params);
					};
				};
			};

			return Nil;
		}

		# --- response ---
		method : WriteRpcResponse(id : Int, result : JsonElement) ~ Nil {
			WriteString(MakeRpcResponse(id, result)->ToString());
		}

		method : MakeRpcResponse(id : Int, result : JsonElement) ~ JsonElement {
			node := JsonElement->New(JsonElement->JsonType->OBJECT);

			node->Insert("jsonrpc", "2.0");
			if(result = Nil) {
				node->Insert("result", JsonElement->New(JsonElement->JsonType->NULL));
			}
			else {
				node->Insert("result", result);
			};

			if(id > -1) {
				node->Insert("id", id);
			};

			return node;
		}

		# --- request ---
		method : WriteRpcRequest(kind : String, result : JsonElement) ~ Nil {
			WriteString(MakeRpcRequest(kind, result)->ToString());
		}

		method : MakeRpcRequest(kind : String, result : JsonElement) ~ JsonElement {
			node := JsonElement->New(JsonElement->JsonType->OBJECT);

			node->Insert("jsonrpc", "2.0");
			node->Insert("method", kind);

			if(result = Nil) {
				node->Insert("params", JsonElement->New(JsonElement->JsonType->NULL));
			}
			else {
				node->Insert("params", result);
			};

			return node;
		}
	}

	#~
	Handles JSON-RPC requests
	~#
	class : private : RpcRequest {
		@id : Int;
		@mthd : String;
		@params : JsonElement;

		New(id : Int, mthd : String, params : JsonElement) {
			@id := id;
			@mthd := mthd;
			@params := params;
			@is_debug := true;
		}

		method : public : GetId() ~ Int {
			return @id;
		}

		method : public : GetMethod() ~ String {
			return @mthd;
		}

		method : public : GetParams() ~ JsonElement {
			return @params;
		}
	}

	#~
	In-memory text document
	~#
	class : private : Document {
		@uri : String;
		@text : String;
		@alt_text : String;
		@is_debug : Bool;

		New(uri : String, text : String, is_debug : Bool) {
			@uri := uri;
			@text := GetText(text);
			@is_debug := is_debug;
		}

		method : public : GetDiagnosis() ~ JsonElement {
			parser := Parser->New(@text, @is_debug);
			leaving {
				parser->Release();
			};

			parser->Parse();
			return parser->GetDiagnosis(@uri, "gen_collect.obl");
		}

		method : public : GetSymbols() ~ JsonElement {
			parser := Parser->New(@text, @is_debug);
			leaving {
				parser->Release();
			};

			if(<>parser->Parse()) {
				return Nil;
			};

			is_parsed := BoolHolder->New();
			result := parser->GetSymbols(is_parsed, "gen_collect.obl");

			if(is_parsed->Get()) {
				@alt_text := @text->Clone()->As(String);
			};

			return result;
		}

		method : public : FindReferences(line_pos : Int, char_pos : Int) ~ JsonElement {
			parser := Parser->New(@text, @is_debug);
			leaving {
				parser->Release();
			};

			return parser->FindReferences(line_pos, char_pos, @uri, "gen_collect.obl");
		}

		method : public : FindDeclaration(line_pos : Int, char_pos : Int) ~ JsonElement {
			parser := Parser->New(@text, @is_debug);
			leaving {
				parser->Release();
			};

			return parser->FindDeclaration(line_pos, char_pos, @uri, "gen_collect.obl");
		}

		method : public : Completion(line_pos : Int, char_pos : Int) ~ JsonElement {
			parser := Parser->New(@alt_text, @is_debug);
			leaving {
				parser->Release();
			};
			
			index := GetDocumentIndex(line_pos, char_pos);
			if(index > -1) {
				var_str := ""; mthd_str := "";
				if(GetVariableMethodStrings(index - 1, var_str, mthd_str, false)) {
					return parser->Completion(line_pos, char_pos, var_str, mthd_str, @uri, "gen_collect.obl");
				};
			};

			return Nil;
		}


		method : public : SignatureHelp(line_pos : Int, char_pos : Int) ~ JsonElement {
			parser := Parser->New(@alt_text, @is_debug);
			leaving {
				parser->Release();
			};

			index := GetDocumentIndex(line_pos, char_pos);
			if(index > -1) {
				var_str := "";	mthd_str := "";
				if(GetVariableMethodStrings(index, var_str, mthd_str)) {
					return parser->SignatureHelp(line_pos, char_pos, var_str, mthd_str, @uri, "gen_collect.obl");
				};
			};
			
			return Nil;
		}

		method : public : GetVariableMethodStrings(index : Int, var_str : String, mthd_str : String, offset : Bool := true) ~ Bool {
			start_pos := index;
			while(@text->Get(index)->IsChar() | @text->Get(index) = '_'  | @text->Get(index) = '@' | @text->Get(index) = '(' | @text->Get(index) = ')') {
				index -= 1;
			};
			end_pos := index;

			length := start_pos - end_pos;
			if(offset) {
				length -= 2;
			};

			if(length > 0) {
				mthd_str += @text->SubString(end_pos + 1, length);
			};

			while(@text->Get(index) = ' ' | 
					(@text->Get(index) = 'n' & @text->Get(index - 1) = '\\') |
					(@text->Get(index) = 'r' & @text->Get(index - 1) = '\\') |
					(@text->Get(index) = 't' & @text->Get(index - 1) = '\\')) {
				index -= 1;
				if(@text->Get(index - 1) = '\\') {
					index -= 1;
				};
			};

			has_var := @text->Get(index) = '>' & @text->Get(index - 1) = '-';
			if(has_var) {
				index -= 2;
				start_pos := index;
				while(@text->Get(index)->IsChar() | @text->Get(index) = '_' |  @text->Get(index) = '@') {
					index -= 1;
				};
				end_pos := index;

				length := start_pos - end_pos;
				if(length > 0) {
					var_str += @text->SubString(end_pos + 1, length);
				};
			};

			if(@is_debug) {
				"\n\n--- var_str='{$var_str}', mthd_str='{$mthd_str}' ---\n\n"->PrintLine();
			};

			return <>(var_str->IsEmpty() & mthd_str->IsEmpty());
		}

		method : public : Update(range_length : Int, text : String, start_line : Int, start_char: Int, end_line : Int, end_char : Int) ~ Nil {
			start := GetDocumentIndex(start_line, start_char);
			if(@is_debug) {
				"### Update: start={$start}, range_length={$range_length}, text='{$text}'; start_line={$start_line}, start_char={$start_char}; end_line={$end_line}, end_char={$end_char} ###"->PrintLine();
			};
			
			if(start > -1) {
				if(range_length > 0) {
					@text->Delete(start, range_length);
				};
				@text->Insert(start, GetText(text));
			};
		}

		method : public : Save() ~ Nil {
			if(@is_debug) {
				"NotifyDidSave"->PrintLine();
			};
		}

		method : public : Release() ~ Nil {
			@text := Nil;
		}

		method : GetLineCharacterIndex(index : Int, line_pos : IntHolder, char_pos : IntHolder) ~ Nil {
			cur_line := 0;
			cur_char := 0;

			for(pos := 0; pos < index; pos += 1;) {
				char := @text->Get(pos);
				next_char := '\0';				
				if(pos + 1 < @text->Size()) {
					next_char := @text->Get(pos + 1);
				};

				if(char = '\\') {
					if(next_char = 'n') {
							cur_line += 1;
							cur_char := 0;
					};
					
					pos += 1;
					cur_char += 1;
				}
				else {
					cur_char += 1;
				};
			};

			line_pos->Set(cur_line);
			char_pos->Set(cur_char - 1);
		}

		method : GetDocumentIndex(line_pos : Int, char_pos : Int) ~ Int {
			if(line_pos = 0 & char_pos = 0) {
				return 0;
			};

			cur_line := 0; cur_char := 0;
			each(pos : @text) {
				char := @text->Get(pos);
				next_char := '\0';				
				if(pos + 1 < @text->Size()) {
					next_char := @text->Get(pos + 1);
				};

				if(char = '\n') {
					cur_line += 1;					
				};
				cur_char += 1;

				if(cur_line = line_pos) {
					index := cur_char + char_pos;
					if(cur_line = 0) {
						index -= 1;
					};
					
					return index;
				};
			};

			return -1;
		}

		method : GetText(text : String) ~ String {
			out := "";

			each(i : text) {
				cur_char := text->Get(i);
				next_char := '\0';
				if(i + 1 < text->Size()) {
					next_char := text->Get(i + 1);
				};

				if(cur_char = '\\') {
					select(next_char) {
						label 't' {
							out += '\t';
							i += 1;
						}

						label 'r' {
							out += '\r';
							i += 1;
						}

						label 'n' {
							out += '\n';
							i += 1;
						}

						label '\\' {
							out += '\\';
							i += 1;
						}

						label '"' {
							out += '"';
							i += 1;
						}

						other {
							out += cur_char;
						}
					};
				}
				else {
					out += cur_char;
				};
			};

			return out;
		}

		method : DumpDocument() ~ Nil {
			if(@is_debug) {
				"TEXT='{$@text}'"->PrintLine();
			};
		}
	}
}