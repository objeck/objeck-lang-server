use System.IO.File;
use Collection.Generic;

class Scanner {
	@buffer : Char[];
	@buffer_index : Int;
	@cur_char : Char;
	@next_char : Char;
	@line_num : Int;
	@line_pos : Int;
	@tokens : Vector<Token>;

	function : Main(args : String[]) ~ Nil {
		
	}
	
	New(input : String) {
		@buffer := input->ToCharArray();
		@line_num := @line_pos := 1;
		@tokens := Vector->New()<Token>;
	}

	method : NextChar() ~ Nil {
		if(@buffer_index < @buffer->Size()) {
			@cur_char := @buffer[@buffer_index];
			@line_pos += 1;
			
			if(@buffer_index + 1 < @buffer->Size()) {
				@next_char := @buffer[@buffer_index + 1];
			}
			else {
				next_char := '\0';
			};
		}
		else {
			@cur_char := next_char := '\0';
		};
	}

	method : Whitespace() ~ Nil {
		if(@cur_char = ' ' | @cur_char = '\t') {
			@buffer_index += 1;
		}
		# windows eol
		else if(@cur_char = '\r' & @cur_char = '\n') {
			@tokens->AddBack(Token->New(@line_num, Token->Type->VSPACE, "vspace"));
			@buffer_index += 1;
			@line_pos := 1;
		}
		# unix eol
		else if(@cur_char = '\n') {
			@tokens->AddBack(Token->New(@line_num, Token->Type->VSPACE, "vspace"));
			@buffer_index += 1;
			@line_pos := 1;
		}
		# mac eol
		else if(@cur_char = '\r') {
			@tokens->AddBack(Token->New(@line_num, Token->Type->VSPACE, "vspace"));
			@buffer_index += 1;
			@line_pos := 1;
		};
	}

	method : public : GetTokens() ~ Vector<Token> {
		return Nil;
	}

	method : public : Scan() ~ Bool {
		NextChar();

		while(@cur_char <> '\0') {
			Whitespace();
			
			# comment
			if(@cur_char = '#') {

			}
			# string literal
			else if(@cur_char = '"') {

			}
			# char const
			else if(@cur_char = '\'') {
				
			}
			# keyword or variable
			else if(@cur_char = '@' | @cur_char->IsChar()) {
				
			}
			# number or digit
			else if(@cur_char = '.' | @cur_char->IsDigit()) {
				
			}
			else {
				select(@cur_char) {
					label '+' {

					}

					label '-' {

					}

					other {

					}
				};
			};
		};

		return false;
	}
}

class Token {
	@line_num : Int;
	@type : Token->Type;
	@name : String;
	@value : Int;

	enum Type := -128 {
		USE_ID,
		WHILE_ID,
		DO_ID,
		FOR_ID,
		EACH_ID,
		SELECT_ID,
		NIL_ID,
		STRING_ID,
		CLASS_ID,
		FUNCTION_ID,
		ELSE_ID,
		IF_ID,
		ASGN,
		NUM,
		CHAR,
		STR_REF,
		VAR,
		OPREN,
		CPREN,
		OBRACE,
		CBRACE,
		OCBRACE,
		CCBRACE,
		ASSESSOR,
		AND,
		OR,
		DIV,
		MOD,
		MUL,
		ADD,
		SUB,
		COLON,
		SEMI,
		COMMA,
		TILDE,
		LESS,
		LESS_EQL,
		GTR,
		GTR_EQL,
		EQL,
		NEQL,
		NOT,
		VSPACE,
		EOS,
		OTHER
	}
	
	New(line_num : Int, type : Token->Type, name : String) {
		@line_num := line_num;
		@type := type;
		@name := name;
	}
	
	New(@line_num : Int, type : Token->Type, name : String, value : Int) {
		@line_num := @line_num;
		@type := type;
		@value := value;
		@name := name;
	}
	
	method : public : GetLine() ~ Int {
		return @line_num;
	}
	
	method : public : GetType() ~ Token->Type {
		return @type;
	}
	
	method : public : GetName() ~ String {
		return @name;
	}
	
	method : public : GetValue() ~ Int {
		return @value;
	}

	method : public : ToString() ~ String {
		select(@type) {
			label Token->Type->STR_REF:
			label Token->Type->NUM: {
				return @value->ToString();
			}
			
			other: {
				return @name;
			}
		};

		return "<unknown>";
	}
}