use System.IO.File;
use Collection.Generic;

class CodeFormatter {
	function : Main(args : String[]) ~ Nil {
		if(args->Size() = 1) {			
			input := FileReader->ReadFile(args[0]);
			if(input <> Nil) {
				scanner := Scanner->New(input);
				if(scanner->Scan()) {
					hspace := 0;
					tokens := scanner->GetTokens();
					flag := false;
					each(i : tokens) {
						token := tokens->Get(i);
						
						select(token->GetType()) {
							label Token->Type->CLASS_ID {
								"class"->Print();
							}

							label Token->Type->FUNCTION_ID {
								"function"->Print();
							}

							label Token->Type->ASGN {
								":="->Print();
							}

							label Token->Type->ASSESSOR {
								"->"->Print();
								flag := true;
							}

							label Token->Type->SEMI {
								';'->PrintLine();
								each(j : hspace) {
									'\t'->Print();
								};
							}

							label Token->Type->IDENT {
								token->GetValue()->Print();

								
							}

							label Token->Type->COLON {
								":"->Print();
							}

							label Token->Type->ADD {
								"+"->Print();
							}

							label Token->Type->TILDE {
								"~"->Print();
							}

							label Token->Type->INT_NUM {
								token->GetInt()->Print();
							}

							label Token->Type->FLOAT_NUM {
								token->GetFloat()->Print();
							}

							label Token->Type->OBRACE {
								'['->Print();
								flag := true;
							}

							label Token->Type->CBRACE {
								']'->Print();
							}

							label Token->Type->OCBRACE {
								'{'->PrintLine();
								hspace += 1;

								each(j : hspace) {
									'\t'->Print();
								};
							}

							label Token->Type->CCBRACE {
								hspace -= 1;

								'\n'->Print();
								each(j : hspace) {
									'\t'->Print();
								};
								'}'->Print();
							}

							label Token->Type->OPREN {
								'('->Print();
								flag := true;
							}

							label Token->Type->CPREN {
								')'->Print();
							}

							other {

							}
						};


						if(flag) {
							flag := false;
						}
						else if(i + 1 < tokens->Size()) {
							next_token_type := tokens->Get(i + 1)->GetType();
							if(next_token_type <> Token->Type->ASSESSOR & 
									next_token_type <> Token->Type->OPREN & 
									next_token_type <> Token->Type->CPREN & 
									next_token_type <> Token->Type->OBRACE &
									next_token_type <> Token->Type->CBRACE &
									next_token_type <> Token->Type->SEMI) {
								' '->Print();
							};
						};
					};
				};
			};
		};
	}
}