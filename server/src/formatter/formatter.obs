use System.IO.File;
use Collection.Generic;

class CodeFormatter {
	function : Main(args : String[]) ~ Nil {
		if(args->Size() = 1) {			
			input := FileReader->ReadFile(args[0]);
			if(input <> Nil) {
				scanner := Scanner->New(input);
				if(scanner->Scan()) {
					hspace := 0;
					tokens := scanner->GetTokens();
					flag := false;
					each(i : tokens) {
						token := tokens->Get(i);
						
						next_token : Token;
						if(i + 1 < tokens->Size()) {
							next_token := tokens->Get(i + 1);
						};
						
						select(token->GetType()) {
							label Token->Type->CLASS_ID {
								"class"->Print();
								PrintSpace(token, next_token);
							}

							label Token->Type->FUNCTION_ID {
								"function"->Print();
								PrintSpace(token, next_token);
							}

							label Token->Type->IF_ID {
								"if"->Print();
								PrintSpace(token, next_token);
							}

							label Token->Type->ASGN {
								":="->Print();
								PrintSpace(token, next_token);
							}

							label Token->Type->ASSESSOR {
								"->"->Print();
								PrintSpace(token, next_token);
							}

							label Token->Type->SEMI {
								next_token_id := next_token->GetType()->As(Int);

								"; ({$i},{$next_token_id})"->PrintLine();

								each(j : hspace) {
									'\t'->Print();
								};
							}

							label Token->Type->LESS {
								"<"->Print();
								PrintSpace(token, next_token);
							}

							label Token->Type->GTR {
								">"->Print();
								PrintSpace(token, next_token);
							}

							label Token->Type->NEQL {
								"<>"->Print();
								PrintSpace(token, next_token);
							}

							label Token->Type->IDENT {
								value := token->GetValue();
								"{$value}"->Print();
								PrintSpace(token, next_token);
							}

							label Token->Type->COLON {
								":"->Print();
								PrintSpace(token, next_token);
							}

							label Token->Type->ADD {
								"+"->Print();
								PrintSpace(token, next_token);
							}

							label Token->Type->TILDE {
								"~"->Print();
								PrintSpace(token, next_token);
							}

							label Token->Type->INT_NUM {
								token->GetInt()->Print();
								PrintSpace(token, next_token);
							}

							label Token->Type->FLOAT_NUM {
								token->GetFloat()->Print();
								PrintSpace(token, next_token);
							}

							label Token->Type->OBRACE {
								'['->Print();
								PrintSpace(token, next_token);
							}

							label Token->Type->CBRACE {
								']'->Print();
								PrintSpace(token, next_token);
							}

							label Token->Type->OCBRACE {
								'{'->PrintLine();
								hspace += 1;

								each(j : hspace) {
									'\t'->Print();
								};
							}

							label Token->Type->CCBRACE {
								hspace -= 1;

								'\n'->Print();
								each(j : hspace) {
									'\t'->Print();
								};
								'}'->Print();
							}

							label Token->Type->OPREN {
								'('->Print();
							}

							label Token->Type->CPREN {
								')'->Print();
								PrintSpace(token, next_token);
							}

							other {

							}
						};
					};

					'\n'->Print();
				};
			};
		};
	}

	function : PrintSpace(token : Token, next_token : Token) ~ Nil {
		if(next_token <> Nil & 
				token->GetType() <> Token->Type->ASSESSOR &
				next_token->GetType() <> Token->Type->ASSESSOR &

				next_token->GetType() <> Token->Type->SEMI &
				next_token->GetType() <> Token->Type->OBRACE & 
				next_token->GetType() <> Token->Type->OPREN & 
				next_token->GetType() <> Token->Type->CBRACE & 
				next_token->GetType() <> Token->Type->CCBRACE & 
				next_token->GetType() <> Token->Type->CPREN) {
			' '->Print();
		}
		else {
#			"*"->Print();
		};
	}
}