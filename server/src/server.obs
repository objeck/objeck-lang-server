use System.IO.Net;
use Data.JSON;
use Collection.Generic;

class Server {
	function : Main(args : String[]) ~ Nil {
		if(args->Size() = 1) {
			LanguageServer->New(args[0]->ToInt())->Listen();
		}
		else {
			"--- TODO: read config file ---"->ErrorLine();
		};
	}
}

class LanguageServer {
	@port : Int;
	@is_debug : Bool;

	New(port : Int) {
		@port := port;
		@is_debug := true;
	}

	method : public : Listen() ~ Nil {
		server := TCPSocketServer->New(6013);
		leaving {
			server->Close();
		};

		if(server->Listen(5)) {
			while(true) {
				Service->New(@is_debug)->Execute(server->Accept());
			};
		};
	}
}

class Service from System.Concurrency.Thread {
	@address : String;
	@port : Int;
	@quit : Bool;
	@is_initialized : Bool;
	@is_debug : Bool;
	@keywords : Vector<String>;

	New(is_debug : Bool) {
		Parent();

		@is_debug := is_debug;

		@keywords := Vector->New()<String>;
		@keywords->AddBack("method");
		@keywords->AddBack("function");
		@keywords->AddBack("Int");
		@keywords->AddBack("Float");
	}
	
	method : public : Run(param : Base) ~ Nil {
		socket := param->As(TCPSocket);

		while(<>@quit) {
			request := GetRpcRequest(socket);
			if(request <> Nil) {
				ProcessResponse(request, socket);
			}	
			else {
				@quit := true;
			};
		};

		socket->Close();
	}

	#--- Handle callback ---

	method : CallbackInitialize(id : Int, params : JSONElement, socket : TCPSocket) ~ Nil {
		workspace := params->FindElements("capabilities/workspace");
		configuration := params->FindElements("capabilities/workspace/configuration");

		# build response
		response := JSONElement->New(JSONType->OBJECT);
		capabilities := response->AddChild("capabilities");
        completionProvider := capabilities->AddChild("completionProvider");
        completionProvider->Insert("resolveProvider", true);

        workspace := capabilities->AddChild("workspace");
        workspaceFolders := workspace->AddChild("workspaceFolders");
        workspaceFolders->Insert("supported", true);

        capabilities->Insert("textDocumentSync", 2);
        
        # write response
        WriteString(socket, MakeRpcResult(id, response)->ToString());
	}

	method : CallbackShutdown(id : Int, params : JSONElement, socket : TCPSocket) ~ Nil {
		if(@is_debug) {
			"=> CallbackShutdown"->PrintLine();
		};

		@quit := true;
	}	

	method : CallbackCompletion(id : Int, params : JSONElement, socket : TCPSocket) ~ Nil {
		uri := params->FindElements("textDocument/uri");
		line_pos := params->FindElements("position/line");
		char_id := params->FindElements("position/character");
		kind := params->FindElements("context/triggerKind");

		if(@is_debug) {
			"CallbackCompletion => file='{$uri}', line={$line_pos}, char={$char_id}, kind={$kind}"->PrintLine();
		};

		response := JSONElement->New(JSONType->ARRAY);		
		each(i : @keywords) {
			item := JSONElement->New(JSONType->OBJECT);
			keyword := @keywords->Get(i);
			item->Insert("label", keyword);
			item->Insert("kind", 1);
			item->Insert("data", i + 1);
			item->Insert("detail", "{$keyword} details");
      		item->Insert("documentation", "{$keyword} documentation");      		
			response->Add(item);
		};

        # write response
        WriteString(socket, MakeRpcResult(id, response)->ToString());
	}

	#--- Handle notifications ---

	method : NotifyInitialized(params : JSONElement, socket : TCPSocket) ~ Nil {
		@is_initialized := true;
	}

	method : NotifyCancel(params : JSONElement, socket : TCPSocket) ~ Nil {
			
	}

	method : NotifyDidChangeWatchedFiles(params : JSONElement, socket : TCPSocket) ~ Nil {

	}

	method : NotifyDidOpen(params : JSONElement, socket : TCPSocket) ~ Nil {
		text := params->FindElements("textDocument/text");

		if(@is_debug) {
			"NotifyDidOpen => text='{$text}"->PrintLine();
		};
	}

	method : NotifyDidChange(params : JSONElement, socket : TCPSocket) ~ Nil {
		changes := params->FindElements("contentChanges");

		if(@is_debug) {
			count := changes->Size();
			"NotifyDidChange => count={$count}"->PrintLine();
		};

		each(i : changes) {
			change := changes->Get(i);
			change->Get("rangeLength")->GetValue()->PrintLine();
			change->Get("text")->GetValue()->PrintLine();
		};
	}

	# --- Process requests ---

	method : ProcessResponse(request : RpcRequest, socket : TCPSocket) ~ Nil {
		id := request->GetId();
		method_id := request->GetMethod();
		
		#
		# Notification
		#
		if(id->IsNeg()) {
			if(@is_debug) {
				"NOTIFICATION='{$method_id}'\n"->PrintLine();
			};

			if(method_id->Equals("initialized")) {
				NotifyInitialized(request->GetParams(), socket);
			}
			else if(method_id->Equals("$/cancelRequest")) {
				NotifyCancel(request->GetParams(), socket);
			}
			else if(method_id->Equals("workspace/didChangeWatchedFiles")) {
				NotifyDidChangeWatchedFiles(request->GetParams(), socket);
			}
			else if(method_id->Equals("textDocument/didOpen")) {
				NotifyDidOpen(request->GetParams(), socket);
			}
			else if(method_id->Equals("textDocument/didChange")) {
				NotifyDidChange(request->GetParams(), socket);
			}
			else {
				if(@is_debug) {
					"*** Unknown notification='{$method_id}' ***"->PrintLine();
				};
			};
		}
		#
		# Callbacks
		#
		else {
			if(@is_debug) {
				"METHOD='{$method_id}', id={$id}"->PrintLine();
			};

			if(method_id->Equals("initialize")) {
				CallbackInitialize(id, request->GetParams(), socket);
			}
			else if(method_id->Equals("textDocument/completion")) {
				CallbackCompletion(id, request->GetParams(), socket);
			}
			else if(method_id->Equals("shutdown")) {
				CallbackShutdown(id, request->GetParams(), socket);
			}
			else {
				if(@is_debug) {
					"*** Unknown method='{$method_id}' ***"->PrintLine();
				};
			};
		};
	}

	# --- Utility methods ---

	method : ReadString(socket : TCPSocket) ~ String {
		line := socket->ReadLine();
		socket->ReadLine();

		index := line->Find(':');
		if(index > 0) {
			index += 2;
			length := line->SubString(index, line->Size() - index)->ToInt();
			buffer := Byte->New[length];
			socket->ReadBuffer(0, buffer->Size(), buffer);

			text := String->New(buffer->ToUnicode());
			if(@is_debug) {
				"====\nREAD='{$text}'"->PrintLine();
			};

			return text;
		};

		return "";
	}

	method : WriteString(socket : TCPSocket, text : String) ~ Nil {
		if(@is_debug) {
			"WRITE='{$text}'"->PrintLine();
		};		
		length := text->Size();
		socket->WriteString("Content-Length: {$length}\r\n\r\n{$text}");
	}

	method : GetRpcRequest(socket : TCPSocket) ~ RpcRequest {
		text := ReadString(socket);
		if(<>text->IsEmpty()) {
			json :=JSONParser->New(text);
			if(json->Parse()) {
				node := json->GetRoot();
				
				id := -1;
				id_elem := node->Get("id");
				if(id_elem <> Nil) {
					id := id_elem->GetValue()->ToInt();
				};

				ver := node->Get("jsonrpc");
				mthd := node->Get("method")->GetValue();
				params := node->Get("params");

				if(ver <> Nil & ver->GetValue()->Equals("2.0") & mthd <> Nil) {
					return RpcRequest->New(id, mthd, params);
				};
			};
		};

		return Nil;
	}

	method : MakeRpcResult(id : Int, result : JSONElement) ~ JSONElement {
		node := JSONElement->New(JSONType->OBJECT);

		node->Insert("jsonrpc", "2.0");
		if(result = Nil) {
			node->Insert("result", JSONElement->New(JSONType->NULL));
		}
		else {
			node->Insert("result", result);
		};

		if(id > -1) {
			node->Insert("id", id);
		};

		return node;
	}
}

class : private : RpcRequest {
	@id : Int;
	@mthd : String;
	@params : JSONElement;

	New(id : Int, mthd : String, params : JSONElement) {
		@id := id;
		@mthd := mthd;
		@params := params;
	}

	method : public : GetId() ~ Int {
		return @id;
	}

	method : public : GetMethod() ~ String {
		return @mthd;
	}

	method : public : GetParams() ~ JSONElement {
		return @params;
	}
}
