use Collection.Generic;
use System.IO.Net;
use Data.JSON;
use Query.RegEx;

bundle LSP {
	class LintServer {
		@port : Int;
		@is_debug : Bool;

		function : Main(args : String[]) ~ Nil {
			LintService->Init();

			if(args->Size() = 1) {
				LintServer->New(args[0]->ToInt(), false)->Listen();
			}
			else if(args->Size() = 2 & args[1]->Equals("debug")) {
				LintServer->New(args[0]->ToInt(), true)->Listen();
			}
			else {
				"--- TODO: read config file ---"->ErrorLine();
			};
		}

		New(port : Int, is_debug : Bool) {
			@port := port;
			@is_debug := is_debug;
		}

		method : public : Listen() ~ Nil {
			server := TCPSocketServer->New(6013);
			leaving {
				server->Close();
			};

			if(server->Listen(5)) {
				while(true) {
					LintService->New(server->Accept(), @is_debug)->Execute(Nil);
				};
			};
		}
	}

	#~
	Handles requests
	~#
	class LintService from LspWorker {
		New(socket : TCPSocket, is_debug : Bool) {
			Parent(socket, is_debug);
		}

		#
		# Callbacks
		#
		method : CallbackReferences(id : Int, params : JsonElement) ~ Nil {
			uri := params->FindElements("textDocument/uri")->GetValue();
			line_pos := params->FindElements("position/line")->GetValue();
			char_pos:= params->FindElements("position/character")->GetValue();

			response := GetDocument(uri)->FindReferences(line_pos->ToInt(), char_pos->ToInt());
			WriteRpcResponse(id, response);
		}

		method : CallbackDeclaration(id : Int, params : JsonElement) ~ Nil {
			uri := params->FindElements("textDocument/uri")->GetValue();
			line_pos := params->FindElements("position/line")->GetValue();
			char_pos:= params->FindElements("position/character")->GetValue();

			response := GetDocument(uri)->FindDeclaration(line_pos->ToInt(), char_pos->ToInt());
			WriteRpcResponse(id, response);
		}


		method : CallbackInitialize(id : Int, params : JsonElement) ~ Nil {
			workspace := params->FindElements("capabilities/workspace");
			configuration := params->FindElements("capabilities/workspace/configuration");

			# build response
			response := JsonElement->New(JsonElement->JsonType->OBJECT);
			capabilities := response->AddChild("capabilities");
	        completionProvider := capabilities->AddChild("completionProvider");
	        completionProvider->Insert("resolveProvider", true);

	        workspace := capabilities->AddChild("workspace");
	        workspaceFolders := workspace->AddChild("workspaceFolders");
	        workspaceFolders->Insert("supported", true);

	        capabilities->Insert("textDocumentSync", 2);
	        capabilities->Insert("documentSymbolProvider", true);
	        capabilities->Insert("referencesProvider", true);
	        capabilities->Insert("declarationProvider", true);

	        # write response
	        WriteRpcResponse(id, response);
		}

		method : CallbackShutdown(id : Int, params : JsonElement) ~ Nil {
			if(IsDebug()) {
				"=> CallbackShutdown"->PrintLine();
			};

			@quit := true;
		}	

		method : CallbackCompletion(id : Int, params : JsonElement) ~ Nil {
			uri := params->FindElements("textDocument/uri");
			line_pos := params->FindElements("position/line");
			char_id := params->FindElements("position/character");
			kind := params->FindElements("context/triggerKind");

			if(IsDebug()) {
				"CallbackCompletion => file='{$uri}', line={$line_pos}, char={$char_id}, kind={$kind}"->PrintLine();
			};

			keywords := GetKeywords();
			response := JsonElement->New(JsonElement->JsonType->ARRAY);		
			each(i : keywords) {
				item := JsonElement->New(JsonElement->JsonType->OBJECT);
				keyword := keywords->Get(i);
				item->Insert("label", keyword);
				item->Insert("kind", 7);
				item->Insert("data", i);
				item->Insert("detail", "{$keyword} details");
	      		item->Insert("documentation", "{$keyword} documentation");      		
				response->Add(item);
			};

	        # write response
	        WriteRpcResponse(id, response);
		}

		method : CallbackDocumentSymbol(id : Int, params : JsonElement) ~ Nil {
			uri := params->FindElements("textDocument/uri")->GetValue();
			response := GetDocument(uri)->GetSymbols();
			WriteRpcResponse(id, response);
		}

		method : CallbackResolve(id : Int, params : JsonElement) ~ Nil {
			# write response
	        WriteRpcResponse(id, params);
		}

		#
		# Notifications
		#
		method : NotifyInitialized(params : JsonElement) ~ Nil {
			@is_initialized := true;
		}

		method : NotifyCancel(params : JsonElement) ~ Nil {
				
		}

		method : NotifyDidChangeWatchedFiles(params : JsonElement) ~ Nil {

		}

		method : NotifyDidOpen(params : JsonElement) ~ Nil {
			uri_elem := params->FindElements("textDocument/uri");
			text_elem := params->FindElements("textDocument/text");

			if(uri_elem <> Nil & text_elem <> Nil) {
				uri := uri_elem->GetValue();
				text := text_elem->GetValue();

				if(IsDebug()) {
					"NotifyDidOpen => text='{$text}"->PrintLine();
				};

				document := Document->New(uri, text, IsDebug());
				AddDocument(uri, document);
			}
			else {
				"*** Failed: NotifyDidOpen ***"->ErrorLine();		
			};
		}

		method : NotifyDidSave(params : JsonElement) ~ Nil {
			document := GetDocument(params->FindElements("textDocument/uri")->GetValue());
			if(document <> Nil) {
				document->Save();
			};
		}

		method : NotifyDidChange(params : JsonElement) ~ Nil {
			if(IsDebug()) {
				"NotifyDidChange"->PrintLine();
			};

			uri := params->FindElements("textDocument/uri")->GetValue();
			document := GetDocument(uri);
			changes := params->FindElements("contentChanges");
			if(document <> Nil & changes <> Nil) {
				each(i : changes) {
					change := changes->Get(i);

					range_length := change->Get("rangeLength")->GetValue();
					text := change->Get("text")->GetValue();

					start_line := change->FindElements("range/start/line")->GetValue();
					start_char := change->FindElements("range/start/character")->GetValue();

					end_line := change->FindElements("range/end/line")->GetValue();
					end_char := change->FindElements("range/end/character")->GetValue();
					
					if(range_length <> Nil & text <> Nil & start_line <> Nil & start_char <> Nil  & end_line <> Nil & end_char <> Nil) {
						document->Update(range_length->ToInt(), text, start_line->ToInt(), start_char->ToInt(),	end_line->ToInt(), end_char->ToInt());
					};
				};

				WriteRpcRequest("textDocument/publishDiagnostics", document->GetDiagnosis());
			};
		}
	}

	#~
	In-memory document
	~#
	class : private : Document {
		@uri : String;
		@text : String;
		@is_debug : Bool;

		New(uri : String, text : String, is_debug : Bool) {
			@uri := uri;
			@text := GetText(text);
			@is_debug := is_debug;
		}

		# TODO: hacked...
		method : public : GetDiagnosis() ~ JsonElement {
			parser := Parser->New(@text, @is_debug);
			leaving {
				parser->Release();
			};

			parser->Parse();
			return parser->GetDiagnosis(@uri, "gen_collect.obl");
		}

		method : public : GetSymbols() ~ JsonElement {
			parser := Parser->New(@text, @is_debug);
			leaving {
				parser->Release();
			};

			if(<>parser->Parse()) {
				return Nil;
			};

			return parser->GetSymbols();
		}

		method : public : FindReferences(line_pos : Int, char_pos : Int) ~ JsonElement {
			parser := Parser->New(@text, @is_debug);
			leaving {
				parser->Release();
			};

			return parser->FindReferences(line_pos, char_pos, @uri, "gen_collect.obl");
		}

		method : public : FindDeclaration(line_pos : Int, char_pos : Int) ~ JsonElement {
			parser := Parser->New(@text, @is_debug);
			leaving {
				parser->Release();
			};

			return parser->FindDeclaration(line_pos, char_pos, @uri, "gen_collect.obl");
		}

		method : public : Update(range_length : Int, text : String, start_line : Int, start_char: Int, end_line : Int, end_char : Int) ~ Nil {
			start := GetDocumentIndex(start_line, start_char);
			if(@is_debug) {
				"### Update: foo={$start}, range_length={$range_length}, text='{$text}'; start_line={$start_line}, start_char={$start_char}; end_line={$end_line}, end_char={$end_char} ###"->PrintLine();
			};
			
			if(start > -1) {
				if(range_length > 0) {
					@text->Delete(start, range_length);
				};
				@text->Insert(start, GetText(text));
			};
		}

		method : public : Save() ~ Nil {
			if(@is_debug) {
				"NotifyDidSave"->PrintLine();
			};
		}

		method : GetLineCharacterIndex(index : Int, line_pos : IntHolder, char_pos : IntHolder) ~ Nil {
			cur_line := 0;
			cur_char := 0;

			for(pos := 0; pos < index; pos += 1;) {
				char := @text->Get(pos);
				next_char := '\0';				
				if(pos + 1 < @text->Size()) {
					next_char := @text->Get(pos + 1);
				};

				if(char = '\\') {
					if(next_char = 'n') {
							cur_line += 1;
							cur_char := 0;
					};
					
					pos += 1;
					cur_char += 1;
				}
				else {
					cur_char += 1;
				};
			};

			line_pos->Set(cur_line);
			char_pos->Set(cur_char - 1);
		}

		method : GetDocumentIndex(line_pos : Int, char_pos : Int) ~ Int {
			cur_line := 0;
			cur_char := 0;

			each(pos : @text) {
				char := @text->Get(pos);
				next_char := '\0';				
				if(pos + 1 < @text->Size()) {
					next_char := @text->Get(pos + 1);
				};

				if(char = '\n') {
					cur_line += 1;					
				};
				cur_char += 1;

				if(cur_line = line_pos) {
					index := cur_char + char_pos;
					if(cur_line = 0) {
						index -= 1;
					};
					
					return index;
				};
			};

			return -1;
		}

		method : GetText(text : String) ~ String {
			out := "";

			each(i : text) {
				cur_char := text->Get(i);
				next_char := '\0';
				if(i + 1 < text->Size()) {
					next_char := text->Get(i + 1);
				};

				if(cur_char = '\\') {
					select(next_char) {
						label 't' {
							out += '\t';
							i += 1;
						}

						label 'r' {
							out += '\r';
							i += 1;
						}

						label 'n' {
							out += '\n';
							i += 1;
						}

						label '\\' {
							out += '\\';
							i += 1;
						}

						label '"' {
							out += '"';
							i += 1;
						}

						other {
							out += cur_char;
						}
					};
				}
				else {
					out += cur_char;
				};
			};

			return out;
		}

		method : DumpDocument() ~ Nil {
			if(@is_debug) {
				"TEXT='{$@text}'"->PrintLine();
			};
		}
	}
}