use Collection.Generic;
use System.IO.Net;
use Data.JSON;

bundle LSP {
	#~
	LSP TCP server
	~#
	class LintServer {
		@port : Int;
		@is_debug : Bool;

		function : Main(args : String[]) ~ Nil {
			LintService->Init();

			if(args->Size() = 1) {
				LintServer->New(args[0]->ToInt(), false)->Listen();
			}
			else if(args->Size() = 2 & args[1]->Equals("debug")) {
				LintServer->New(args[0]->ToInt(), true)->Listen();
			}
			else {
				"--- TODO: read config file ---"->ErrorLine();
			};
		}

		New(port : Int, is_debug : Bool) {
			@port := port;
			@is_debug := is_debug;
		}

		method : public : Listen() ~ Nil {
			server := TCPSocketServer->New(6013);
			leaving {
				server->Close();
			};

			if(server->Listen(5)) {
				while(true) {
					LintService->New(server->Accept(), @is_debug)->Execute(Nil);
				};
			};
		}
	}

	#~
	Handles TCP client requests
	~#
	class LintService from LspWorker {
		New(socket : TCPSocket, is_debug : Bool) {
			Parent(socket, is_debug);
		}

		#
		# Callbacks
		#
		method : CallbackReferences(id : Int, params : JsonElement) ~ Nil {
			uri := params->FindElements("textDocument/uri")->GetValue();
			line_pos := params->FindElements("position/line")->GetValue();
			char_pos:= params->FindElements("position/character")->GetValue();

			response := GetDocument(uri)->FindReferences(line_pos->ToInt(), char_pos->ToInt());
			WriteRpcResponse(id, response);
		}

		method : CallbackDeclaration(id : Int, params : JsonElement) ~ Nil {
			uri := params->FindElements("textDocument/uri")->GetValue();
			line_pos := params->FindElements("position/line")->GetValue();
			char_pos := params->FindElements("position/character")->GetValue();

			response := GetDocument(uri)->FindDeclaration(line_pos->ToInt(), char_pos->ToInt());
			WriteRpcResponse(id, response);
		}

		method : SignatureHelp(id : Int, params : JsonElement) ~ Nil {
			uri := params->FindElements("textDocument/uri")->GetValue();
			line_pos := params->FindElements("position/line")->GetValue();
			char_pos := params->FindElements("position/character")->GetValue();
			
			response := GetDocument(uri)->SignatureHelp(line_pos->ToInt(), char_pos->ToInt());
			WriteRpcResponse(id, response);
		}	

		method : CallbackCompletion(id : Int, params : JsonElement) ~ Nil {
			uri := params->FindElements("textDocument/uri")->GetValue();
			line_pos := params->FindElements("position/line")->GetValue();
			char_pos := params->FindElements("position/character")->GetValue();
			
			response := GetDocument(uri)->Completion(line_pos->ToInt(), char_pos->ToInt());
			WriteRpcResponse(id, response);
		}

		method : CallbackInitialize(id : Int, params : JsonElement) ~ Nil {
			workspace := params->FindElements("capabilities/workspace");
			if(workspace <> Nil) {
				configuration := params->FindElements("capabilities/workspace/configuration");
				if(configuration <> Nil & configuration->GetValue()->Equals("true")) {
					workspace_folders := params->FindElements("workspaceFolders");
					each(i : workspace_folders) {
						workspace_folder := workspace_folders->Get(i);
						# TODO: track workspace
						folder_uri := workspace_folder->Get("uri")->GetValue();
						folder_name := workspace_folder->Get("name")->GetValue();
						if(@is_debug) {
							"--- Added workspace:  folder_uri='{$folder_uri}', folder_name='{$folder_name}' ---"->PrintLine();
						};
					};
				};
			};
			
			# build response
			response := JsonElement->New(JsonElement->JsonType->OBJECT);
			capabilities := response->AddChild("capabilities");
	        completionProvider := capabilities->AddChild("completionProvider");
	        completionProvider->Insert("resolveProvider", true);

			signatureHelpProvider := capabilities->AddChild("signatureHelpProvider");
			triggerCharacters := JsonElement->New(JsonElement->JsonType->ARRAY);
	        triggerCharacters->Add("(");
	        triggerCharacters->Add(",");
			signatureHelpProvider->Insert("triggerCharacters", triggerCharacters);

	        workspace := capabilities->AddChild("workspace");
	        workspace_folders := workspace->AddChild("workspaceFolders");
	        workspace_folders->Insert("supported", true);
	        workspace_folders->Insert("changeNotifications", true);
	        
	        capabilities->Insert("workspace", workspace);
	        capabilities->Insert("textDocumentSync", 2);
	        capabilities->Insert("documentSymbolProvider", true);
	        capabilities->Insert("referencesProvider", true);
	        capabilities->Insert("declarationProvider", true);

	        # write response
	        WriteRpcResponse(id, response);
		}

		method : CallbackShutdown(id : Int, params : JsonElement) ~ Nil {
			if(IsDebug()) {
				"=> CallbackShutdown"->PrintLine();
			};

			@quit := true;
		}

		method : CallbackDocumentSymbol(id : Int, params : JsonElement) ~ Nil {
			uri := params->FindElements("textDocument/uri")->GetValue();
			response := GetDocument(uri)->GetSymbols();
			WriteRpcResponse(id, response);
		}

		method : CallbackResolve(id : Int, params : JsonElement) ~ Nil {
			# write response
	        WriteRpcResponse(id, params);
		}

		#
		# Notifications
		#
		method : NotifyInitialized(params : JsonElement) ~ Nil {
			@is_initialized := true;
		}

		method : NotifyCancel(params : JsonElement) ~ Nil {
		}

		method : NotifyDidChangeWatchedFiles(params : JsonElement) ~ Nil {
		}

		method : NotifyDidOpen(params : JsonElement) ~ Nil {
			uri := params->FindElements("textDocument/uri")->GetValue();
			text := params->FindElements("textDocument/text")->GetValue();

			if(IsDebug()) {
				"NotifyDidOpen => text=\"{$text}\""->PrintLine();
			};
			
			AddDocument(uri, Document->New(uri, text, IsDebug()));
		}

		method : NotifyDidSave(params : JsonElement) ~ Nil {
			document := GetDocument(params->FindElements("textDocument/uri")->GetValue());
			if(document <> Nil) {
				document->Save();
			};
		}
		
		method : NotifyDidClose(params : JsonElement) ~ Nil {
			uri := params->FindElements("textDocument/uri")->GetValue();
			document := GetDocument(params->FindElements("textDocument/uri")->GetValue());
			if(document <> Nil) {
				RemoveDocument(uri, document);
			};
		}

		method : NotifyDidChangeWorkspace(params : JsonElement) ~ Nil {
			added := params->FindElements("event/added");
			each(i : added) {
				folder := added->Get(i);
				
				folder_uri := folder->Get("uri")->GetValue();
				folder_name := folder->Get("name")->GetValue();
				if(@is_debug) {
					"--- Added workspace: '{$folder_uri}', '{$folder_name}' ---"->PrintLine();
				};
			};

			removed := params->FindElements("event/removed");
			each(i : removed) {
				folder := removed->Get(i);
				
				folder_uri := folder->Get("uri")->GetValue();
				folder_name := folder->Get("name")->GetValue();
				if(@is_debug) {
					"--- Removed workspace: '{$folder_uri}', '{$folder_name}' ---"->PrintLine();
				};
			};
		}


		method : NotifyDidChange(params : JsonElement) ~ Nil {
			if(IsDebug()) {
				"NotifyDidChange"->PrintLine();
			};

			uri := params->FindElements("textDocument/uri")->GetValue();
			document := GetDocument(uri);
			changes := params->FindElements("contentChanges");
			if(document <> Nil & changes <> Nil) {
				each(i : changes) {
					change := changes->Get(i);

					range_length := change->Get("rangeLength")->GetValue();
					text := change->Get("text")->GetValue();

					start_line := change->FindElements("range/start/line")->GetValue();
					start_char := change->FindElements("range/start/character")->GetValue();

					end_line := change->FindElements("range/end/line")->GetValue();
					end_char := change->FindElements("range/end/character")->GetValue();
					
					if(range_length <> Nil & text <> Nil & start_line <> Nil & start_char <> Nil  & end_line <> Nil & end_char <> Nil) {
						document->Update(range_length->ToInt(), text, start_line->ToInt(), start_char->ToInt(),	end_line->ToInt(), end_char->ToInt());
					};
				};

				WriteRpcRequest("textDocument/publishDiagnostics", document->GetDiagnosis());
			};
		}
	}
}