use Collection.Generic;
use System.IO.Net;
use Data.JSON;
use Query.RegEx;

bundle LSP {
	class LspWorker from System.Concurrency.Thread {		
		@address : String;
		@port : Int;
		@quit : Bool;
		@is_initialized : Bool;
		@is_debug : Bool;
		@documents : Map<String, Document>;
		@socket : TCPSocket;
		@keywords : static : Vector<String>;
		@id : Int;

		function : Init() ~ Nil {
			@keywords := Vector->New()<String>;
			@keywords->AddBack("method");
			@keywords->AddBack("function");
			@keywords->AddBack("Int");
			@keywords->AddBack("Float");
		}

		function : GetKeywords() ~ Vector<String> {
			return @keywords;
		}

		New(socket : TCPSocket, is_debug : Bool) {
			Parent();
			@socket := socket;
			@is_debug := is_debug;
			@documents := Map->New()<String, Document>;
		}
		
		method : public : Run(param : Base) ~ Nil {
			while(<>@quit) {
				request := ReadRpcRequest();
				if(request <> Nil) {
					ProcessResponse(request);
				}	
				else {
					@quit := true;
				};
			};

			@socket->Close();
		}

		method : public : IsDebug() ~ Bool {
			return @is_debug;
		}

		#
		# Notifications
		#
		method : virtual : NotifyInitialized(params : JsonElement) ~ Nil;
		method : virtual : NotifyCancel(params : JsonElement) ~ Nil;
		method : virtual : NotifyDidOpen(params : JsonElement) ~ Nil;
		method : virtual : NotifyDidChange(params : JsonElement) ~ Nil;
		method : virtual : NotifyDidChangeWatchedFiles(params : JsonElement) ~ Nil;
		method : virtual : NotifyDidSave(params : JsonElement) ~ Nil;

		#
		# Callbacks
		#
		method : virtual : CallbackInitialize(id : Int, params : JsonElement) ~ Nil;
		method : virtual : CallbackShutdown(id : Int, params : JsonElement) ~ Nil;
		method : virtual : CallbackCompletion(id : Int, params : JsonElement) ~ Nil;
		method : virtual : CallbackResolve(id : Int, params : JsonElement) ~ Nil;
		method : virtual : CallbackDocumentSymbol(id : Int, params : JsonElement) ~ Nil;
		method : virtual : CallbackReferences(id : Int, params : JsonElement) ~ Nil;

		method : AddDocument(uri : String, document : Document) ~ Nil {
			@documents->Insert(uri, document);
		}

		method : GetDocument(uri : String) ~ Document {
			return @documents->Find(uri);
		}

		# --- process requests ---
		method : ProcessResponse(request : RpcRequest) ~ Nil {
			id := request->GetId();
			method_id := request->GetMethod();
			
			# notification
			if(id->IsNeg()) {
				if(@is_debug) {
					"NOTIFICATION='{$method_id}'\n"->PrintLine();
				};

				if(method_id->Equals("initialized")) {
					NotifyInitialized(request->GetParams());
				}
				else if(method_id->Equals("$/cancelRequest")) {
					NotifyCancel(request->GetParams());
				}
				else if(method_id->Equals("workspace/didChangeWatchedFiles")) {
					NotifyDidChangeWatchedFiles(request->GetParams());
				}
				else if(method_id->Equals("textDocument/didOpen")) {
					NotifyDidOpen(request->GetParams());
				}
				else if(method_id->Equals("textDocument/didChange")) {
					NotifyDidChange(request->GetParams());
				}
				else if(method_id->Equals("textDocument/didSave")) {
					NotifyDidSave(request->GetParams());
				}
				else {
					if(@is_debug) {
						"*** Unknown notification='{$method_id}' ***"->PrintLine();
					};
				};
			}
			# callback
			else {
				if(@is_debug) {
					"METHOD='{$method_id}', id={$id}"->PrintLine();
				};

				if(method_id->Equals("initialize")) {
					CallbackInitialize(id, request->GetParams());
				}
				else if(method_id->Equals("textDocument/completion")) {
					CallbackCompletion(id, request->GetParams());
				}
				else if(method_id->Equals("completionItem/resolve")) {
					CallbackResolve(id, request->GetParams());
				}
				else if(method_id->Equals("textDocument/documentSymbol")) {
					CallbackDocumentSymbol(id, request->GetParams());
				}
				else if(method_id->Equals("textDocument/references")) {
					CallbackReferences(id, request->GetParams());
				}
				else if(method_id->Equals("shutdown")) {
					CallbackShutdown(id, request->GetParams());
				}
				else {
					if(@is_debug) {
						"*** Unknown method='{$method_id}' ***"->PrintLine();
					};
				};
			};
		}

		# --- utilities ---
		method : ReadString() ~ String {
			line := @socket->ReadLine();
			@socket->ReadLine();

			index := line->Find(':');
			if(index > 0) {
				index += 2;
				length := line->SubString(index, line->Size() - index)->ToInt();
				# TODO: check length (buffer overflow)
				buffer := Byte->New[length];
				@socket->ReadBuffer(0, buffer->Size(), buffer);

				text := String->New(buffer->ToUnicode());
				if(@is_debug) {
					"====\nREAD='{$text}'"->PrintLine();
				};

				return text;
			};

			return "";
		}

		method : WriteString(text : String) ~ Nil {
			if(@is_debug) {
				"WRITE='{$text}'"->PrintLine();
			};		
			length := text->Size();
			@socket->WriteString("Content-Length: {$length}\r\n\r\n{$text}");
		}

		method : ReadRpcRequest() ~ RpcRequest {
			text := ReadString();
			if(<>text->IsEmpty()) {
				json :=JsonParser->New(text);
				if(json->Parse()) {
					node := json->GetRoot();
					
					id := -1;
					id_elem := node->Get("id");
					if(id_elem <> Nil) {
						id := id_elem->GetValue()->ToInt();
					};

					ver := node->Get("jsonrpc");
					mthd := node->Get("method")->GetValue();
					params := node->Get("params");

					if(ver <> Nil & ver->GetValue()->Equals("2.0") & mthd <> Nil) {
						return RpcRequest->New(id, mthd, params);
					};
				};
			};

			return Nil;
		}

		# --- response ---
		method : WriteRpcResponse(id : Int, result : JsonElement) ~ Nil {
			WriteString(MakeRpcResponse(id, result)->ToString());
		}

		method : MakeRpcResponse(id : Int, result : JsonElement) ~ JsonElement {
			node := JsonElement->New(JsonElement->JsonType->OBJECT);

			node->Insert("jsonrpc", "2.0");
			if(result = Nil) {
				node->Insert("result", JsonElement->New(JsonElement->JsonType->NULL));
			}
			else {
				node->Insert("result", result);
			};

			if(id > -1) {
				node->Insert("id", id);
			};

			return node;
		}

		# --- request ---
		method : WriteRpcRequest(kind : String, result : JsonElement) ~ Nil {
			WriteString(MakeRpcRequest(kind, result)->ToString());
		}

		method : MakeRpcRequest(kind : String, result : JsonElement) ~ JsonElement {
			node := JsonElement->New(JsonElement->JsonType->OBJECT);

			node->Insert("jsonrpc", "2.0");
			node->Insert("method", kind);

			if(result = Nil) {
				node->Insert("params", JsonElement->New(JsonElement->JsonType->NULL));
			}
			else {
				node->Insert("params", result);
			};

			return node;
		}
	}

	#~
	Json-RPC request
	~#
	class : private : RpcRequest {
		@id : Int;
		@mthd : String;
		@params : JsonElement;

		New(id : Int, mthd : String, params : JsonElement) {
			@id := id;
			@mthd := mthd;
			@params := params;
			@is_debug := true;
		}

		method : public : GetId() ~ Int {
			return @id;
		}

		method : public : GetMethod() ~ String {
			return @mthd;
		}

		method : public : GetParams() ~ JsonElement {
			return @params;
		}
	}
}