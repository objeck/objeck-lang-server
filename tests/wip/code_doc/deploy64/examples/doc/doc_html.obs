#~
Objeck HTML code documentation system
Copyright (c) 2014, 2019 Randy Hollines
~#

use System.IO.File;
use Collection.Generic;

class JsonMaker {
	@parser : SnippetParser;
	@css_path : String;
	@version : String;
	
	#~
	DOC ME
	~#
	New(args : String[]) {
		@css_path := args[0];
		@version := args[1];
		@parser := SnippetParser->New(args);
	}
	
	#~
	DOC ME
	~#
	function : Main(args : String[]) ~ Nil {
		if(args->Size() > 2) {
			JsonMaker->New(args)->Make()->PrintLine();
		};
	}
	
	#~
	DOC ME
	~#
	method : Make() ~ Bool {
		if(<>@parser->Parse()) {
			"--- Unable to parse source file ---"->ErrorLine();
			return false;
		};
		
#~		
		class_css_path := String->New(@css_path);
		class_css_path += '/';
		class_css_path += "class_header.dat";
		class_header := FileReader->ReadFile(class_css_path);
		if(class_header = Nil) {
			"--- Unable load header CSS template ---"->ErrorLine();
			return false;
		};
~#

		## bundles
		bundles := @parser->GetBundles();
		bundle_pairs := bundles->GetKeyValues()<Pair<String, BundleSnippet>>;
"{"->PrintLine();
		each(i : bundle_pairs) {
			bundle_pair := bundle_pairs->Get(i);
			bundle_name := bundle_pair->GetFirst();

			# classes
			classes := bundle_pair->GetSecond()->GetClasses();
			class_key_values := classes->GetKeyValues()<Pair<String, ClassSnippet>>;
			
			each(j : class_key_values) {
				class_key_value := class_key_values->Get(j);
				class_name := String->New(bundle_name);
				class_name += '.';
				class_name += class_key_value->GetFirst();

				ProcessClass(class_name, class_key_value->GetSecond(), j + 1 < class_key_values->Size());
			};

			if(i + 1 < bundle_pairs->Size()) {
"\t,"->PrintLine();
			};
			
			# TODO: enums
		};
"}"->PrintLine();
		
		return true;
	}

	method : ProcessClass(name : String, snippet : ClassSnippet, has_next : Bool) ~ Nil {
		description := snippet->GetDesc();
"\t\"{$name}\": {"->PrintLine();
"\t\t\"description\": "->Print();
"\"{$description}\"\n\t}"->Print();

		if(has_next) {
			','->PrintLine();
		}
		else {
			'\n'->Print();
		};
	}
}