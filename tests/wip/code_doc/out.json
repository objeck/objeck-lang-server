{
"Collection.Generic.BackwardIterator": {
		"description": "Backward iterator",
		"functions": {
			"Get": {
				"descriptions": ["**Gets the value that's currently pointed to**\n\n\n\nreturn - H\n\n```method : public : Get() ~ H```"]
			},
			"More": {
				"descriptions": ["**Checks to see the pointer can be advanced Backward**\n\n\n\nreturn - Bool\n\n```method : public : More() ~ Bool```"]
			},
			"Next": {
				"descriptions": ["**Advances the pointer Backward**\n\n\n\nreturn - Nil\n\n```method : public : Next() ~ Nil```"]
			},
			"Remove": {
				"descriptions": ["**Removes the element at the pointer position**\n\n\n\nreturn - Nil\n\n```method : public : Remove() ~ Nil```"]
			}
		}
	},
	"Collection.Generic.Cache": {
		"description": "Object MRU/LRU cache",
		"functions": {
			"Empty": {
				"descriptions": ["**Clears the vector**\n\n\n\nreturn - Nil\n\n```method : public : Empty() ~ Nil```"]
			},
			"Find": {
				"descriptions": ["**Searches for a value in cache**\n\n\n\nK - key\n\nreturn - S\n\n```method : public : Find(key:K) ~ S```"]
			},
			"GetKeyValues": {
				"descriptions": ["**Gets a collection of key/value pairs**\n\n\n\nreturn - Vector&lt;Pair&gt;\n\n```method : public : GetKeyValues() ~ Vector&lt;Pair&gt;```"]
			},
			"GetKeys": {
				"descriptions": ["**Get a collection of keys**\n\n\n\nreturn - Vector&lt;K&gt;\n\n```method : public : GetKeys() ~ Vector&lt;K&gt;```"]
			},
			"GetValues": {
				"descriptions": ["**Gets a collection of values**\n\n\n\nreturn - Vector&lt;S&gt;\n\n```method : public : GetValues() ~ Vector&lt;S&gt;```"]
			},
			"Has": {
				"descriptions": ["**Checks for a value in a cache**\n\n\n\nK - key\n\nreturn - Bool\n\n```method : public : Has(key:K) ~ Bool```"]
			},
			"Insert": {
				"descriptions": ["**Inserts a value into the hash**\n\n\n\nK - key\n\nS - value\n\nreturn - Bool\n\n```method : public : Insert(key:K, value:S) ~ Bool```"]
			},
			"IsEmpty": {
				"descriptions": ["**Checks to see if the vector is empty**\n\n\n\nreturn - Bool\n\n```method : public : IsEmpty() ~ Bool```"]
			},
			"New": {
				"descriptions": ["**Default constructor**\n\n\n\nCache-&gt;Type - type\n\nInt - max\n\n```New(max:Int)```"]
			},
			"Remove": {
				"descriptions": ["**Removes a value from the cache**\n\n\n\nK - key\n\nreturn - Bool\n\n```method : public : Remove(key:K) ~ Bool```"]
			},
			"Size": {
				"descriptions": ["**Size of cache**\n\n\n\nreturn - Int\n\n```method : public : Size() ~ Int```"]
			}
		}
	},
	"Collection.Generic.CompareBackwardIterator": {
		"description": "Backward iterator of comparables",
		"functions": {
			"Get": {
				"descriptions": ["**Gets the value that's currently pointed to**\n\n\n\nreturn - H\n\n```method : public : Get() ~ H```"]
			},
			"More": {
				"descriptions": ["**Checks to see the pointer can be advanced Backward**\n\n\n\nreturn - Bool\n\n```method : public : More() ~ Bool```"]
			},
			"Next": {
				"descriptions": ["**Advances the pointer Backward**\n\n\n\nreturn - Nil\n\n```method : public : Next() ~ Nil```"]
			},
			"Remove": {
				"descriptions": ["**Removes the element at the pointer position**\n\n\n\nreturn - Nil\n\n```method : public : Remove() ~ Nil```"]
			}
		}
	},
	"Collection.Generic.CompareForwardIterator": {
		"description": "Forward iterator of comparables",
		"functions": {
			"Get": {
				"descriptions": ["**Gets the value that's currently pointed to**\n\n\n\nreturn - H\n\n```method : public : Get() ~ H```"]
			},
			"More": {
				"descriptions": ["**Checks to see the pointer can be advanced**\n\n\n\nreturn - Bool\n\n```method : public : More() ~ Bool```"]
			},
			"Next": {
				"descriptions": ["**Advances the pointer**\n\n\n\nreturn - Nil\n\n```method : public : Next() ~ Nil```"]
			},
			"Remove": {
				"descriptions": ["**Removes the element at the pointer position**\n\n\n\nreturn - Nil\n\n```method : public : Remove() ~ Nil```"]
			}
		}
	},
	"Collection.Generic.CompareList": {
		"description": "List of comparable generics",
		"functions": {
			"AddBack": {
				"descriptions": ["**Adds a value to the end**\n\n\n\nH - value\n\nreturn - Nil\n\n```method : public : native : AddBack(value:H) ~ Nil```"]
			},
			"AddFront": {
				"descriptions": ["**Adds a value to the front**\n\n\n\nH - value\n\nreturn - Nil\n\n```method : public : native : AddFront(value:H) ~ Nil```"]
			},
			"Back": {
				"descriptions": ["**Returns the last element in the list**\n\n\n\nreturn - H\n\n```method : public : Back() ~ H```"]
			},
			"BackwardIterator": {
				"descriptions": ["**Instance of a backward iterator**\n\n\n\nreturn - CompareBackwardIterator&lt;H&gt;\n\n```method : public : BackwardIterator() ~ CompareBackwardIterator&lt;H&gt;```"]
			},
			"Empty": {
				"descriptions": ["**Clears the list**\n\n\n\nreturn - Nil\n\n```method : public : Empty() ~ Nil```"]
			},
			"Filter": {
				"descriptions": ["**Uses the given function to filter out values**\n\n\n\n(H)~Bool - f\n\nreturn - CompareList&lt;H&gt;\n\n```method : public : Filter(f:(H)~Bool) ~ CompareList&lt;H&gt;```"]
			},
			"Find": {
				"descriptions": ["**Finds a value in the list and sets the pointer**\n\n\n\nH - value\n\nreturn - H\n\n```method : public : Find(value:H) ~ H```"]
			},
			"Forward": {
				"descriptions": ["**Moves the pointer to the end of the list**\n\n\n\nreturn - Nil\n\n```method : public : Forward() ~ Nil```"]
			},
			"ForwardIterator": {
				"descriptions": ["**Instance of a forward iterator**\n\n\n\nreturn - CompareForwardIterator&lt;H&gt;\n\n```method : public : ForwardIterator() ~ CompareForwardIterator&lt;H&gt;```"]
			},
			"Front": {
				"descriptions": ["**Returns the first element in the list**\n\n\n\nreturn - H\n\n```method : public : Front() ~ H```"]
			},
			"Get": {
				"descriptions": ["**Gets the value that's currently pointed to**\n\n\n\nreturn - H\n\n```method : public : Get() ~ H```"]
			},
			"Has": {
				"descriptions": ["**Searches for a value**\n\n\n\nH - value\n\nreturn - Bool\n\n```method : public : Has(value:H) ~ Bool```"]
			},
			"Insert": {
				"descriptions": ["**Inserts a value into the list based upon the pointer location**\n\n\n\nH - value\n\nreturn - Bool\n\n```method : public : native : Insert(value:H) ~ Bool```"]
			},
			"IsBack": {
				"descriptions": ["**Checks to see if the pointer is at the end of the list**\n\n\n\nreturn - Bool\n\n```method : public : IsBack() ~ Bool```"]
			},
			"IsEmpty": {
				"descriptions": ["**Checks to see if the list is empty**\n\n\n\nreturn - Bool\n\n```method : public : IsEmpty() ~ Bool```"]
			},
			"IsFront": {
				"descriptions": ["**Checks to see if the pointer is at the front of the list**\n\n\n\nreturn - Bool\n\n```method : public : IsFront() ~ Bool```"]
			},
			"Map": {
				"descriptions": ["**Maps the given function to each value in the list**\n\n\n\n(H)~H - f\n\nreturn - CompareList&lt;H&gt;\n\n```method : public : Map(f:(H)~H) ~ CompareList&lt;H&gt;```"]
			},
			"More": {
				"descriptions": ["**Checks to see the pointer can be advanced**\n\n\n\nreturn - Bool\n\n```method : public : More() ~ Bool```"]
			},
			"New": {
				"descriptions": ["**Default constructor**\n\n\n\n```New()```"]
			},
			"Next": {
				"descriptions": ["**Advances the pointer**\n\n\n\nreturn - Nil\n\n```method : public : Next() ~ Nil```"]
			},
			"Previous": {
				"descriptions": ["**Retreats the pointer**\n\n\n\nreturn - Nil\n\n```method : public : Previous() ~ Nil```"]
			},
			"Remove": {
				"descriptions": ["**Removes the element at the pointer position**\n\n\n\nreturn - Nil\n\n```method : public : native : Remove() ~ Nil```", "**Removes the element at the pointer position**\n\n\n\nCompareListNode&lt;H&gt; - node\n\nreturn - Nil\n\n```method : public : native : Remove(node:CompareListNode&lt;H&gt;) ~ Nil```"]
			},
			"RemoveBack": {
				"descriptions": ["**Removes the last value from the list**\n\n\n\nreturn - Nil\n\n```method : public : RemoveBack() ~ Nil```"]
			},
			"RemoveFront": {
				"descriptions": ["**Removes the first value from the list**\n\n\n\nreturn - Nil\n\n```method : public : RemoveFront() ~ Nil```"]
			},
			"Rest": {
				"descriptions": ["**List of all but first element**\n\n\n\nreturn - CompareList&lt;H&gt;\n\n```method : public : Rest() ~ CompareList&lt;H&gt;```"]
			},
			"Rewind": {
				"descriptions": ["**Moves the pointer to the start of the list**\n\n\n\nreturn - Nil\n\n```method : public : Rewind() ~ Nil```"]
			},
			"Size": {
				"descriptions": ["**Size of list**\n\n\n\nreturn - Int\n\n```method : public : Size() ~ Int```"]
			}
		}
	},
	"Collection.Generic.CompareVector": {
		"description": "Growable array of comparable generics",
		"functions": {
			"AddBack": {
				"descriptions": ["**Adds a vector of values to the end of the vector**\n\n\n\nVector&lt;H&gt; - values\n\nreturn - Nil\n\n```method : public : AddBack(values:Vector&lt;H&gt;) ~ Nil```", "**Adds a value to the end**\n\n\n\nH - value\n\nreturn - Nil\n\n```method : public : AddBack(value:H) ~ Nil```"]
			},
			"BinarySearch": {
				"descriptions": ["**Performs a binary search O(log n)**\n\n\n\nH - value\n\nreturn - Int\n\n```method : public : native : BinarySearch(value:H) ~ Int```"]
			},
			"Compress": {
				"descriptions": ["**Compresses the Vector freeing unused memory**\n\n\n\nreturn - Nil\n\n```method : public : Compress() ~ Nil```"]
			},
			"Each": {
				"descriptions": ["**Function called for each element**\n\n\n\n(H)~Nil - f\n\nreturn - CompareVector&lt;H&gt;\n\n```method : public : Each(f:(H)~Nil) ~ CompareVector&lt;H&gt;```"]
			},
			"Empty": {
				"descriptions": ["**Clears the vector**\n\n\n\nreturn - Nil\n\n```method : public : Empty() ~ Nil```"]
			},
			"Filter": {
				"descriptions": ["**Uses the given function to filter out values**\n\n\n\n(H)~Bool - f\n\nreturn - CompareVector&lt;H&gt;\n\n```method : public : Filter(f:(H)~Bool) ~ CompareVector&lt;H&gt;```"]
			},
			"Find": {
				"descriptions": ["**Finds a given value in the vector via linear search**\n\n\n\nH - value\n\nreturn - Int\n\n```method : public : Find(value:H) ~ Int```"]
			},
			"Get": {
				"descriptions": ["**Gets an indexed value**\n\n\n\nInt - index\n\nreturn - H\n\n```method : public : Get(index:Int) ~ H```"]
			},
			"Has": {
				"descriptions": ["**Check of the given value is in the vector**\n\n\n\nH - value\n\nreturn - Bool\n\n```method : public : Has(value:H) ~ Bool```"]
			},
			"IsEmpty": {
				"descriptions": ["**Checks to see if the vector is empty**\n\n\n\nreturn - Bool\n\n```method : public : IsEmpty() ~ Bool```"]
			},
			"Limit": {
				"descriptions": ["**Returns a limited list**\n\n\n\nInt - l\n\nreturn - CompareVector&lt;H&gt;\n\n```method : public : Limit(l:Int) ~ CompareVector&lt;H&gt;```"]
			},
			"Map": {
				"descriptions": ["**Maps the given function to each value in the vector**\n\n\n\n(H)~H - f\n\nreturn - CompareVector&lt;H&gt;\n\n```method : public : Map(f:(H)~H) ~ CompareVector&lt;H&gt;```"]
			},
			"New": {
				"descriptions": ["**Default constructor**\n\n\n\n```New()```", "**Copy constructor**\n\n\n\nH[] - values\n\n```New(values:H[])```", "**Copy constructor**\n\n\n\nVector&lt;H&gt; - values\n\n```New(values:Vector&lt;H&gt;)```"]
			},
			"Remove": {
				"descriptions": ["**Removes an indexed value**\n\n\n\nInt - i\n\nreturn - H\n\n```method : public : Remove(i:Int) ~ H```"]
			},
			"RemoveBack": {
				"descriptions": ["**Removes the last value**\n\n\n\nreturn - H\n\n```method : public : RemoveBack() ~ H```"]
			},
			"Set": {
				"descriptions": ["**Sets an indexed value**\n\n\n\nH - value\n\nInt - index\n\nreturn - Bool\n\n```method : public : Set(value:H, index:Int) ~ Bool```"]
			},
			"Size": {
				"descriptions": ["**Size of vector**\n\n\n\nreturn - Int\n\n```method : public : Size() ~ Int```"]
			},
			"Sort": {
				"descriptions": ["**Sorts the values in the vector**\n\n\n\nreturn - Nil\n\n```method : public : native : Sort() ~ Nil```"]
			},
			"ToArray": {
				"descriptions": ["**Converts the vector into an object array**\n\n\n\nreturn - H[]\n\n```method : public : ToArray() ~ H[]```"]
			}
		}
	},
	"Collection.Generic.ForwardIterator": {
		"description": "Forward iterator",
		"functions": {
			"Get": {
				"descriptions": ["**Gets the value that's currently pointed to**\n\n\n\nreturn - H\n\n```method : public : Get() ~ H```"]
			},
			"More": {
				"descriptions": ["**Checks to see the pointer can be advanced**\n\n\n\nreturn - Bool\n\n```method : public : More() ~ Bool```"]
			},
			"Next": {
				"descriptions": ["**Advances the pointer**\n\n\n\nreturn - Nil\n\n```method : public : Next() ~ Nil```"]
			},
			"Remove": {
				"descriptions": ["**Removes the element at the pointer position**\n\n\n\nreturn - Nil\n\n```method : public : Remove() ~ Nil```"]
			}
		}
	},
	"Collection.Generic.Hash": {
		"description": "Hash table of generics",
		"functions": {
			"Capacity": {
				"descriptions": ["**Gets the hash table capacity**\n\n\n\nreturn - Hash-&gt;Capacity\n\n```method : public : Capacity() ~ Hash-&gt;Capacity```"]
			},
			"Empty": {
				"descriptions": ["**Clears the map**\n\n\n\nreturn - Nil\n\n```method : public : Empty() ~ Nil```"]
			},
			"Find": {
				"descriptions": ["**Searches for a value in a hash**\n\n\n\nK - key\n\nreturn - V\n\n```method : public : native : Find(key:K) ~ V```"]
			},
			"GetKeyValues": {
				"descriptions": ["**Gets a collection of key/value pairs**\n\n\n\nreturn - Vector&lt;Pair&gt;\n\n```method : public : GetKeyValues() ~ Vector&lt;Pair&gt;```"]
			},
			"GetKeys": {
				"descriptions": ["**Get a collection of keys**\n\n\n\nreturn - Vector&lt;K&gt;\n\n```method : public : native : GetKeys() ~ Vector&lt;K&gt;```"]
			},
			"GetValues": {
				"descriptions": ["**Gets a collection of values**\n\n\n\nreturn - Vector&lt;V&gt;\n\n```method : public : native : GetValues() ~ Vector&lt;V&gt;```"]
			},
			"Has": {
				"descriptions": ["**Checks for a value in a hash**\n\n\n\nK - key\n\nreturn - Bool\n\n```method : public : Has(key:K) ~ Bool```"]
			},
			"Insert": {
				"descriptions": ["**Inserts a value into the hash**\n\n\n\nK - key\n\nV - value\n\nreturn - Nil\n\n```method : public : Insert(key:K, value:V) ~ Nil```"]
			},
			"New": {
				"descriptions": ["**Default constructor**\n\n\n\n```New()```", "**Default constructor**\n\n\n\nHash-&gt;Capacity - capacity\n\n```New(capacity:Hash-&gt;Capacity)```"]
			},
			"Remove": {
				"descriptions": ["**Removes a value from the hash**\n\n\n\nK - key\n\nreturn - Bool\n\n```method : public : native : Remove(key:K) ~ Bool```"]
			},
			"Resize": {
				"descriptions": ["**Resizes the hash table**\n\n\n\nHash-&gt;Capacity - capacity\n\nBool - auto_resize\n\nreturn - Nil\n\n```method : public : native : Resize(capacity:Hash-&gt;Capacity, auto_resize:Bool) ~ Nil```"]
			},
			"Size": {
				"descriptions": ["**Size of map**\n\n\n\nreturn - Int\n\n```method : public : Size() ~ Int```"]
			}
		}
	},
	"Collection.Generic.List": {
		"description": "List of generics",
		"functions": {
			"AddBack": {
				"descriptions": ["**Adds a value to the end**\n\n\n\nH - value\n\nreturn - Nil\n\n```method : public : native : AddBack(value:H) ~ Nil```"]
			},
			"AddFront": {
				"descriptions": ["**Adds a value to the front**\n\n\n\nH - value\n\nreturn - Nil\n\n```method : public : native : AddFront(value:H) ~ Nil```"]
			},
			"Back": {
				"descriptions": ["**Returns the last element in the list**\n\n\n\nreturn - H\n\n```method : public : Back() ~ H```"]
			},
			"BackwardIterator": {
				"descriptions": ["**Instance of a backward iterator**\n\n\n\nreturn - BackwardIterator&lt;H&gt;\n\n```method : public : BackwardIterator() ~ BackwardIterator&lt;H&gt;```"]
			},
			"Each": {
				"descriptions": ["**Function called for each element**\n\n\n\n(H)~Nil - f\n\nreturn - List&lt;H&gt;\n\n```method : public : Each(f:(H)~Nil) ~ List&lt;H&gt;```"]
			},
			"Empty": {
				"descriptions": ["**Clears the list**\n\n\n\nreturn - Nil\n\n```method : public : Empty() ~ Nil```"]
			},
			"Filter": {
				"descriptions": ["**Uses the given function to filter out values**\n\n\n\n(H)~Bool - f\n\nreturn - List&lt;H&gt;\n\n```method : public : Filter(f:(H)~Bool) ~ List&lt;H&gt;```"]
			},
			"Forward": {
				"descriptions": ["**Moves the pointer to the end of the list**\n\n\n\nreturn - Nil\n\n```method : public : Forward() ~ Nil```"]
			},
			"ForwardIterator": {
				"descriptions": ["**Instance of a forward iterator**\n\n\n\nreturn - ForwardIterator&lt;H&gt;\n\n```method : public : ForwardIterator() ~ ForwardIterator&lt;H&gt;```"]
			},
			"Front": {
				"descriptions": ["**Returns the first element in the list**\n\n\n\nreturn - H\n\n```method : public : Front() ~ H```"]
			},
			"Get": {
				"descriptions": ["**Gets the value that's currently pointed to**\n\n\n\nreturn - H\n\n```method : public : Get() ~ H```"]
			},
			"Insert": {
				"descriptions": ["**Inserts a value into the list based upon the pointer location**\n\n\n\nH - value\n\nreturn - Bool\n\n```method : public : native : Insert(value:H) ~ Bool```"]
			},
			"IsBack": {
				"descriptions": ["**Checks to see if the pointer is at the end of the list**\n\n\n\nreturn - Bool\n\n```method : public : IsBack() ~ Bool```"]
			},
			"IsEmpty": {
				"descriptions": ["**Checks to see if the list is empty**\n\n\n\nreturn - Bool\n\n```method : public : IsEmpty() ~ Bool```"]
			},
			"IsFront": {
				"descriptions": ["**Checks to see if the pointer is at the front of the list**\n\n\n\nreturn - Bool\n\n```method : public : IsFront() ~ Bool```"]
			},
			"Limit": {
				"descriptions": ["**Returns a limited list**\n\n\n\nInt - l\n\nreturn - List&lt;H&gt;\n\n```method : public : Limit(l:Int) ~ List&lt;H&gt;```"]
			},
			"Map": {
				"descriptions": ["**Maps the given function to each value in the list**\n\n\n\n(H)~H - f\n\nreturn - List&lt;H&gt;\n\n```method : public : Map(f:(H)~H) ~ List&lt;H&gt;```"]
			},
			"More": {
				"descriptions": ["**Checks to see the pointer can be advanced**\n\n\n\nreturn - Bool\n\n```method : public : More() ~ Bool```"]
			},
			"New": {
				"descriptions": ["**Default constructor**\n\n\n\n```New()```"]
			},
			"Next": {
				"descriptions": ["**Advances the pointer**\n\n\n\nreturn - Nil\n\n```method : public : Next() ~ Nil```"]
			},
			"Previous": {
				"descriptions": ["**Retreats the pointer**\n\n\n\nreturn - Nil\n\n```method : public : Previous() ~ Nil```"]
			},
			"Remove": {
				"descriptions": ["**Removes the element at the pointer position**\n\n\n\nreturn - Nil\n\n```method : public : native : Remove() ~ Nil```"]
			},
			"RemoveBack": {
				"descriptions": ["**Removes the last value from the list**\n\n\n\nreturn - Nil\n\n```method : public : RemoveBack() ~ Nil```"]
			},
			"RemoveFront": {
				"descriptions": ["**Removes the first value from the list**\n\n\n\nreturn - Nil\n\n```method : public : RemoveFront() ~ Nil```"]
			},
			"Rest": {
				"descriptions": ["**List of all but first element**\n\n\n\nreturn - List&lt;H&gt;\n\n```method : public : Rest() ~ List&lt;H&gt;```"]
			},
			"Rewind": {
				"descriptions": ["**Moves the pointer to the start of the list**\n\n\n\nreturn - Nil\n\n```method : public : Rewind() ~ Nil```"]
			},
			"Size": {
				"descriptions": ["**Size of list**\n\n\n\nreturn - Int\n\n```method : public : Size() ~ Int```"]
			}
		}
	},
	"Collection.Generic.Map": {
		"description": "Balanced tree of generics",
		"functions": {
			"Each": {
				"descriptions": ["**Function called for each element**\n\n\n\n(K,V)~Nil - f\n\nreturn - Map&lt;K,V&gt;\n\n```method : public : Each(f:(K,V)~Nil) ~ Map&lt;K,V&gt;```"]
			},
			"Empty": {
				"descriptions": ["**Clears the map**\n\n\n\nreturn - Nil\n\n```method : public : Empty() ~ Nil```"]
			},
			"Filter": {
				"descriptions": ["**Uses the given function to filter out values**\n\n\n\n(K)~Bool - f\n\nreturn - Map&lt;K,V&gt;\n\n```method : public : Filter(f:(K)~Bool) ~ Map&lt;K,V&gt;```"]
			},
			"Find": {
				"descriptions": ["**Searches for a value in a map**\n\n\n\nK - key\n\nreturn - V\n\n```method : public : Find(key:K) ~ V```"]
			},
			"GetKeyValues": {
				"descriptions": ["**Get a collection of keys**\n\n\n\nreturn - Collection.Generic.Vector&lt;Pair&gt;\n\n```method : public : GetKeyValues() ~ Collection.Generic.Vector&lt;Pair&gt;```"]
			},
			"GetKeys": {
				"descriptions": ["**Get a collection of keys**\n\n\n\nreturn - Collection.Generic.Vector&lt;K&gt;\n\n```method : public : GetKeys() ~ Collection.Generic.Vector&lt;K&gt;```"]
			},
			"GetValues": {
				"descriptions": ["**Gets a collection of values**\n\n\n\nreturn - Collection.Generic.Vector&lt;V&gt;\n\n```method : public : GetValues() ~ Collection.Generic.Vector&lt;V&gt;```"]
			},
			"Has": {
				"descriptions": ["**Checks for a value in a map**\n\n\n\nK - key\n\nreturn - Bool\n\n```method : public : Has(key:K) ~ Bool```"]
			},
			"Insert": {
				"descriptions": ["**Inserts a value into the map**\n\n\n\nK - key\n\nV - value\n\nreturn - Nil\n\n```method : public : Insert(key:K, value:V) ~ Nil```"]
			},
			"IsEmpty": {
				"descriptions": ["**Checks to see if the queue is empty**\n\n\n\nreturn - Bool\n\n```method : public : IsEmpty() ~ Bool```"]
			},
			"New": {
				"descriptions": ["**Default constructor**\n\n\n\n```New()```"]
			},
			"Remove": {
				"descriptions": ["**Removes a value from the map**\n\n\n\nK - key\n\nreturn - Bool\n\n```method : public : Remove(key:K) ~ Bool```"]
			},
			"Size": {
				"descriptions": ["**Size of queue**\n\n\n\nreturn - Int\n\n```method : public : Size() ~ Int```"]
			},
			"Zip": {
				"descriptions": ["**Creates a map from a vector of keys and values**\n\n\n\nCompareVector&lt;K&gt; - keys\n\nVector&lt;V&gt; - values\n\nreturn - Map&lt;K,V&gt;\n\n```function : public : Zip(keys:CompareVector&lt;K&gt;, values:Vector&lt;V&gt;) ~ Map&lt;K,V&gt;```"]
			}
		}
	},
	"Collection.Generic.MultiMap": {
		"description": "Binary tree that holds multiple values with the same key",
		"functions": {
			"Each": {
				"descriptions": ["**Function called for each element**\n\n\n\n(K,V)~Nil - f\n\nreturn - MultiMap&lt;K,V&gt;\n\n```method : public : Each(f:(K,V)~Nil) ~ MultiMap&lt;K,V&gt;```"]
			},
			"Empty": {
				"descriptions": ["**Clears the set**\n\n\n\nreturn - Nil\n\n```method : public : Empty() ~ Nil```"]
			},
			"Filter": {
				"descriptions": ["**Uses the given function to filter out values**\n\n\n\n(K)~Bool - f\n\nreturn - MultiMap&lt;K,V&gt;\n\n```method : public : Filter(f:(K)~Bool) ~ MultiMap&lt;K,V&gt;```"]
			},
			"Find": {
				"descriptions": ["**Checks for a value in a map**\n\n\n\nK - key\n\nreturn - Vector&lt;V&gt;\n\n```method : public : Find(key:K) ~ Vector&lt;V&gt;```"]
			},
			"GetKeys": {
				"descriptions": ["**Get a collection of keys**\n\n\n\nreturn - Vector&lt;K&gt;\n\n```method : public : GetKeys() ~ Vector&lt;K&gt;```"]
			},
			"GetValues": {
				"descriptions": ["**Gets a collection of values**\n\n\n\nreturn - Vector&lt;V&gt;\n\n```method : public : GetValues() ~ Vector&lt;V&gt;```"]
			},
			"Has": {
				"descriptions": ["**Checks for a value in a map**\n\n\n\nK - key\n\nreturn - Bool\n\n```method : public : Has(key:K) ~ Bool```"]
			},
			"Insert": {
				"descriptions": ["**Inserts a value into the map**\n\n\n\nK - key\n\nV - value\n\nreturn - Nil\n\n```method : public : Insert(key:K, value:V) ~ Nil```"]
			},
			"IsEmpty": {
				"descriptions": ["**Checks to see if the queue is empty**\n\n\n\nreturn - Bool\n\n```method : public : IsEmpty() ~ Bool```"]
			},
			"New": {
				"descriptions": ["**Default constructor**\n\n\n\n```New()```"]
			},
			"Remove": {
				"descriptions": ["**Removes a set of values from the map**\n\n\n\nK - key\n\nreturn - Bool\n\n```method : public : Remove(key:K) ~ Bool```"]
			},
			"Size": {
				"descriptions": ["**Size of unique keys**\n\n\n\nreturn - Int\n\n```method : public : Size() ~ Int```"]
			},
			"TotalSize": {
				"descriptions": ["**Size of values**\n\n\n\nreturn - Int\n\n```method : public : TotalSize() ~ Int```"]
			},
			"Zip": {
				"descriptions": ["**Creates a map from a vector of keys and values**\n\n\n\nCompareVector&lt;K&gt; - keys\n\nVector&lt;V&gt; - values\n\nreturn - MultiMap&lt;K,V&gt;\n\n```function : public : Zip(keys:CompareVector&lt;K&gt;, values:Vector&lt;V&gt;) ~ MultiMap&lt;K,V&gt;```"]
			}
		}
	},
	"Collection.Generic.Pair": {
		"description": "Generic pair",
		"functions": {
			"Compare": {
				"descriptions": ["**Compares two objects based upon first value**\n\n\n\nSystem.Compare - first\n\nreturn - Int\n\n```method : public : Compare(first:System.Compare) ~ Int```"]
			},
			"GetFirst": {
				"descriptions": ["**Gets the first value**\n\n\n\nreturn - F\n\n```method : public : GetFirst() ~ F```"]
			},
			"GetSecond": {
				"descriptions": ["**Gets the second value**\n\n\n\nreturn - S\n\n```method : public : GetSecond() ~ S```"]
			},
			"HashID": {
				"descriptions": ["**Returns the class default hash ID**\n\n\n\nreturn - Int\n\n```method : public : HashID() ~ Int```"]
			},
			"New": {
				"descriptions": ["**Default constructor**\n\n\n\nF - first\n\nS - second\n\n```New(first:F, second:S)```"]
			},
			"SetFirst": {
				"descriptions": ["**Sets the first value**\n\n\n\nF - first\n\nreturn - Nil\n\n```method : public : SetFirst(first:F) ~ Nil```"]
			},
			"SetSecond": {
				"descriptions": ["**Sets the second value**\n\n\n\nS - second\n\nreturn - Nil\n\n```method : public : SetSecond(second:S) ~ Nil```"]
			}
		}
	},
	"Collection.Generic.Queue": {
		"description": "Queue of generics",
		"functions": {
			"Add": {
				"descriptions": ["**Adds a value to the back of the queue**\n\n\n\nH - value\n\nreturn - Nil\n\n```method : public : Add(value:H) ~ Nil```"]
			},
			"Empty": {
				"descriptions": ["**Clears the queue**\n\n\n\nreturn - Nil\n\n```method : public : Empty() ~ Nil```"]
			},
			"Head": {
				"descriptions": ["**Get the value from the head of the queue**\n\n\n\nreturn - H\n\n```method : public : Head() ~ H```"]
			},
			"IsEmpty": {
				"descriptions": ["**Checks to see if the queue is empty**\n\n\n\nreturn - Bool\n\n```method : public : IsEmpty() ~ Bool```"]
			},
			"New": {
				"descriptions": ["**Default constructor**\n\n\n\n```New()```"]
			},
			"Remove": {
				"descriptions": ["**Removes a value from the front of the queue**\n\n\n\nreturn - H\n\n```method : public : Remove() ~ H```"]
			},
			"Size": {
				"descriptions": ["**Size of queue**\n\n\n\nreturn - Int\n\n```method : public : Size() ~ Int```"]
			}
		}
	},
	"Collection.Generic.Set": {
		"description": "Set of objects",
		"functions": {
			"Empty": {
				"descriptions": ["**Clears the set**\n\n\n\nreturn - Nil\n\n```method : public : Empty() ~ Nil```"]
			},
			"GetKeys": {
				"descriptions": ["**Get a collection of keys**\n\n\n\nreturn - Vector&lt;K&gt;\n\n```method : public : GetKeys() ~ Vector&lt;K&gt;```"]
			},
			"Has": {
				"descriptions": ["**Checks for key in set**\n\n\n\nK - key\n\nreturn - Bool\n\n```method : public : Has(key:K) ~ Bool```"]
			},
			"Insert": {
				"descriptions": ["**Inserts a key into the set**\n\n\n\nK - key\n\nreturn - Nil\n\n```method : public : Insert(key:K) ~ Nil```"]
			},
			"IsEmpty": {
				"descriptions": ["**Checks to see if the map is empty**\n\n\n\nreturn - Bool\n\n```method : public : IsEmpty() ~ Bool```"]
			},
			"New": {
				"descriptions": ["**Default constructor**\n\n\n\n```New()```"]
			},
			"Remove": {
				"descriptions": ["**Removes a key from the set**\n\n\n\nK - key\n\nreturn - Bool\n\n```method : public : Remove(key:K) ~ Bool```"]
			},
			"Size": {
				"descriptions": ["**Size of map**\n\n\n\nreturn - Int\n\n```method : public : Size() ~ Int```"]
			}
		}
	},
	"Collection.Generic.Stack": {
		"description": "Growable stack of generics",
		"functions": {
			"Empty": {
				"descriptions": ["**Clears the vector**\n\n\n\nreturn - Nil\n\n```method : public : Empty() ~ Nil```"]
			},
			"IsEmpty": {
				"descriptions": ["**Checks to see if the vector is empty**\n\n\n\nreturn - Bool\n\n```method : public : IsEmpty() ~ Bool```"]
			},
			"New": {
				"descriptions": ["**Default constructor**\n\n\n\n```New()```"]
			},
			"Pop": {
				"descriptions": ["**Pushes a value from the stack**\n\n\n\nreturn - H\n\n```method : public : Pop() ~ H```"]
			},
			"Push": {
				"descriptions": ["**Pushes a value onto the stack**\n\n\n\nH - value\n\nreturn - Nil\n\n```method : public : Push(value:H) ~ Nil```"]
			},
			"Size": {
				"descriptions": ["**Size of stack**\n\n\n\nreturn - Int\n\n```method : public : Size() ~ Int```"]
			},
			"Top": {
				"descriptions": ["**Check the top of the stack**\n\n\n\nreturn - H\n\n```method : public : Top() ~ H```"]
			}
		}
	},
	"Collection.Generic.Vector": {
		"description": "Growable array of generics",
		"functions": {
			"AddBack": {
				"descriptions": ["**Adds a vector of values to the end of the vector**\n\n\n\nVector&lt;H&gt; - values\n\nreturn - Nil\n\n```method : public : AddBack(values:Vector&lt;H&gt;) ~ Nil```", "**Adds a value to the end**\n\n\n\nH - value\n\nreturn - Nil\n\n```method : public : AddBack(value:H) ~ Nil```"]
			},
			"Compress": {
				"descriptions": ["**Compresses the Vector freeing unused memory**\n\n\n\nreturn - Nil\n\n```method : public : Compress() ~ Nil```"]
			},
			"Each": {
				"descriptions": ["**Function called for each element**\n\n\n\n(H)~Nil - f\n\nreturn - Vector&lt;H&gt;\n\n```method : public : Each(f:(H)~Nil) ~ Vector&lt;H&gt;```"]
			},
			"Empty": {
				"descriptions": ["**Clears the vector**\n\n\n\nreturn - Nil\n\n```method : public : Empty() ~ Nil```"]
			},
			"Get": {
				"descriptions": ["**Gets an indexed value**\n\n\n\nInt - index\n\nreturn - H\n\n```method : public : Get(index:Int) ~ H```"]
			},
			"IsEmpty": {
				"descriptions": ["**Checks to see if the vector is empty**\n\n\n\nreturn - Bool\n\n```method : public : IsEmpty() ~ Bool```"]
			},
			"Limit": {
				"descriptions": ["**Returns a limited list**\n\n\n\nInt - l\n\nreturn - Vector&lt;H&gt;\n\n```method : public : Limit(l:Int) ~ Vector&lt;H&gt;```"]
			},
			"Map": {
				"descriptions": ["**Maps the given function to each value in the vector**\n\n\n\n(H)~H - f\n\nreturn - Vector&lt;H&gt;\n\n```method : public : Map(f:(H)~H) ~ Vector&lt;H&gt;```"]
			},
			"New": {
				"descriptions": ["**Default constructor**\n\n\n\n```New()```", "**Copy constructor**\n\n\n\nH[] - values\n\n```New(values:H[])```", "**Copy constructor**\n\n\n\nVector&lt;H&gt; - values\n\n```New(values:Vector&lt;H&gt;)```"]
			},
			"Remove": {
				"descriptions": ["**Removes an indexed value**\n\n\n\nInt - i\n\nreturn - H\n\n```method : public : Remove(i:Int) ~ H```"]
			},
			"RemoveBack": {
				"descriptions": ["**Removes the last value**\n\n\n\nreturn - H\n\n```method : public : RemoveBack() ~ H```"]
			},
			"Set": {
				"descriptions": ["**Sets an indexed value**\n\n\n\nH - value\n\nInt - index\n\nreturn - Bool\n\n```method : public : Set(value:H, index:Int) ~ Bool```"]
			},
			"Size": {
				"descriptions": ["**Size of vector**\n\n\n\nreturn - Int\n\n```method : public : Size() ~ Int```"]
			},
			"Swap": {
				"descriptions": ["**Swap two values in the vector**\n\n\n\nInt - a\n\nInt - b\n\nreturn - Bool\n\n```method : public : Swap(a:Int, b:Int) ~ Bool```"]
			},
			"ToArray": {
				"descriptions": ["**Converts the vector into an object array**\n\n\n\nreturn - H[]\n\n```method : public : ToArray() ~ H[]```"]
			}
		}
	},
	"System.Base": {
		"description": "Base class for all objects",
		"functions": {
			"GetClass": {
				"descriptions": ["**Returns the class associated with this instance**\n\n\n\nreturn - Introspection.Class\n\n```method : public : GetClass() ~ Introspection.Class```"]
			},
			"GetClassID": {
				"descriptions": ["**Returns the unique class ID**\n\n\n\nreturn - ClassID\n\n```method : public : native : GetClassID() ~ ClassID```"]
			},
			"GetInstanceID": {
				"descriptions": ["**Returns the unique instance ID**\n\n\n\nreturn - Int\n\n```method : public : native : GetInstanceID() ~ Int```"]
			},
			"New": {
				"descriptions": ["**Default constructor**\n\n\n\n```New()```"]
			}
		}
	},
	"System.BaseArrayHolder": {
		"description": "Holds an base array",
		"functions": {
			"Get": {
				"descriptions": ["**Get values**\n\n\n\nreturn - Base[]\n\n```method : public : Get() ~ Base[]```"]
			},
			"New": {
				"descriptions": ["**Copy constructor**\n\n\n\nBase[] - values\n\n```New(values:Base[])```"]
			},
			"Set": {
				"descriptions": ["**Set values**\n\n\n\nBase[] - values\n\nreturn - Nil\n\n```method : public : Set(values:Base[]) ~ Nil```"]
			}
		}
	},
	"System.BasicCompare": {
		"description": "Provides rudimentary compare functionality",
		"functions": {
			"Compare": {
				"descriptions": ["**Compares two objects**\n\n\n\nSystem.Compare - rhs\n\nreturn - Int\n\n```method : public : Compare(rhs:System.Compare) ~ Int```"]
			},
			"HashID": {
				"descriptions": ["**Returns the class default hash ID**\n\n\n\nreturn - Int\n\n```method : public : HashID() ~ Int```"]
			},
			"New": {
				"descriptions": ["**Default constructor**\n\n\n\n```New()```"]
			}
		}
	},
	"System.Bool": {
		"description": "Boolean class",
		"functions": {
			"Error": {
				"descriptions": ["**Prints an error boolean value**\n\n\n\nreturn - Nil\n\n```function : public : Error() ~ Nil```"]
			},
			"ErrorLine": {
				"descriptions": ["**Prints an error boolean value with a newline**\n\n\n\nreturn - Nil\n\n```function : public : ErrorLine() ~ Nil```"]
			},
			"Print": {
				"descriptions": ["**Prints a boolean value**\n\n\n\nreturn - Nil\n\n```function : public : Print() ~ Nil```"]
			},
			"PrintLine": {
				"descriptions": ["**Prints a boolean value with a newline**\n\n\n\nreturn - Nil\n\n```function : public : PrintLine() ~ Nil```"]
			},
			"ToString": {
				"descriptions": ["**Formats the boolean value into a string**\n\n\n\nreturn - String\n\n```function : public : native : ToString() ~ String```"]
			}
		}
	},
	"System.BoolHolder": {
		"description": "Holds a boolean value",
		"functions": {
			"Clone": {
				"descriptions": ["**Clones the object instance**\n\n\n\nreturn - System.Compare\n\n```method : public : Clone() ~ System.Compare```"]
			},
			"Compare": {
				"descriptions": ["**Compares two objects**\n\n\n\nSystem.Compare - rhs\n\nreturn - Int\n\n```method : public : native : Compare(rhs:System.Compare) ~ Int```"]
			},
			"Get": {
				"descriptions": ["**Get boolean value**\n\n\n\nreturn - Bool\n\n```method : public : Get() ~ Bool```"]
			},
			"HashID": {
				"descriptions": ["**Returns a unique hash ID for a boolean**\n\n\n\nreturn - Int\n\n```method : public : HashID() ~ Int```"]
			},
			"New": {
				"descriptions": ["**Default constructor**\n\n\n\n```New()```", "**Copy constructor**\n\n\n\nBool - value\n\n```New(value:Bool)```"]
			},
			"Set": {
				"descriptions": ["**Set boolean value**\n\n\n\nBool - value\n\nreturn - Nil\n\n```method : public : Set(value:Bool) ~ Nil```"]
			}
		}
	},
	"System.Byte": {
		"description": "The byte class represents a 1-byte value.",
		"functions": {
			"Abs": {
				"descriptions": ["**Returns the absolute value**\n\n\n\nreturn - Byte\n\n```function : public : native : Abs() ~ Byte```"]
			},
			"CRC32": {
				"descriptions": ["**Calculates the signed CRC32 value for the stream**\n\n\n\nreturn - Int\n\n```function : public : CRC32() ~ Int```"]
			},
			"Compare": {
				"descriptions": ["**Compares two values**\n\n\n\nByte - l\n\nByte - r\n\nreturn - Int\n\n```function : public : native : Compare(l:Byte, r:Byte) ~ Int```"]
			},
			"Compress": {
				"descriptions": ["**Compresses a byte stream using zlib**\n\n\n\nreturn - Byte[]\n\n```function : public : Compress() ~ Byte[]```"]
			},
			"Error": {
				"descriptions": ["**Prints error value**\n\n\n\nreturn - Nil\n\n```function : public : Error() ~ Nil```"]
			},
			"ErrorLine": {
				"descriptions": ["**Prints error value with newline**\n\n\n\nreturn - Nil\n\n```function : public : ErrorLine() ~ Nil```"]
			},
			"IsNeg": {
				"descriptions": ["**Checks is a number is negative**\n\n\n\nreturn - Bool\n\n```function : public : native : IsNeg() ~ Bool```"]
			},
			"Max": {
				"descriptions": ["**Returns the largest byte value**\n\n\n\nByte - l\n\nByte - r\n\nreturn - Byte\n\n```function : public : Max(l:Byte, r:Byte) ~ Byte```"]
			},
			"Min": {
				"descriptions": ["**Returns the smallest byte value**\n\n\n\nByte - l\n\nByte - r\n\nreturn - Byte\n\n```function : public : Min(l:Byte, r:Byte) ~ Byte```"]
			},
			"NotNeg": {
				"descriptions": ["**Checks is a number is not negative**\n\n\n\nreturn - Bool\n\n```function : public : native : NotNeg() ~ Bool```"]
			},
			"Print": {
				"descriptions": ["**Prints value**\n\n\n\nreturn - Nil\n\n```function : public : Print() ~ Nil```"]
			},
			"PrintLine": {
				"descriptions": ["**Prints value with newline**\n\n\n\nreturn - Nil\n\n```function : public : PrintLine() ~ Nil```"]
			},
			"ToBinaryString": {
				"descriptions": ["**Returns a binary string representation of the value**\n\n\n\nreturn - String\n\n```function : public : native : ToBinaryString() ~ String```"]
			},
			"ToChar": {
				"descriptions": ["**Returns the Character value**\n\n\n\nreturn - Char\n\n```function : public : ToChar() ~ Char```"]
			},
			"ToFloat": {
				"descriptions": ["**Returns the Float value**\n\n\n\nreturn - Float\n\n```function : public : ToFloat() ~ Float```"]
			},
			"ToHexString": {
				"descriptions": ["**Returns a hexadecimal string representation of the value**\n\n\n\nreturn - String\n\n```function : public : native : ToHexString() ~ String```"]
			},
			"ToInt": {
				"descriptions": ["**Returns the Int value**\n\n\n\nreturn - Int\n\n```function : public : ToInt() ~ Int```"]
			},
			"ToString": {
				"descriptions": ["**Returns a string representation of the value**\n\n\n\nreturn - String\n\n```function : public : native : ToString() ~ String```"]
			},
			"Uncompress": {
				"descriptions": ["**Uncompresses a byte stream using zlib**\n\n\n\nreturn - Byte[]\n\n```function : public : Uncompress() ~ Byte[]```"]
			}
		}
	},
	"System.ByteArrayHolder": {
		"description": "Holds a byte array",
		"functions": {
			"Get": {
				"descriptions": ["**Get values**\n\n\n\nreturn - Byte[]\n\n```method : public : Get() ~ Byte[]```"]
			},
			"New": {
				"descriptions": ["**Copy constructor**\n\n\n\nByte[] - values\n\n```New(values:Byte[])```"]
			},
			"Set": {
				"descriptions": ["**Sets values**\n\n\n\nByte[] - values\n\nreturn - Nil\n\n```method : public : Set(values:Byte[]) ~ Nil```"]
			}
		}
	},
	"System.ByteHolder": {
		"description": "Holds an byte value",
		"functions": {
			"Clone": {
				"descriptions": ["**Clones the object instance**\n\n\n\nreturn - System.Compare\n\n```method : public : Clone() ~ System.Compare```"]
			},
			"Compare": {
				"descriptions": ["**Compares two objects**\n\n\n\nSystem.Compare - rhs\n\nreturn - Int\n\n```method : public : native : Compare(rhs:System.Compare) ~ Int```"]
			},
			"Get": {
				"descriptions": ["**Get byte value**\n\n\n\nreturn - Byte\n\n```method : public : Get() ~ Byte```"]
			},
			"HashID": {
				"descriptions": ["**Returns a unique hash ID for a byte**\n\n\n\nreturn - Int\n\n```method : public : HashID() ~ Int```"]
			},
			"New": {
				"descriptions": ["**Default constructor**\n\n\n\n```New()```", "**Copy constructor**\n\n\n\nByte - value\n\n```New(value:Byte)```"]
			},
			"Set": {
				"descriptions": ["**Set byte value**\n\n\n\nByte - value\n\nreturn - Nil\n\n```method : public : Set(value:Byte) ~ Nil```"]
			}
		}
	},
	"System.Char": {
		"description": "Character class represents a Unicode character value.",
		"functions": {
			"Compare": {
				"descriptions": ["**Compares two values**\n\n\n\nChar - l\n\nChar - r\n\nreturn - Int\n\n```function : public : native : Compare(l:Char, r:Char) ~ Int```"]
			},
			"Error": {
				"descriptions": ["**Prints error value**\n\n\n\nreturn - Nil\n\n```function : public : Error() ~ Nil```"]
			},
			"ErrorLine": {
				"descriptions": ["**Prints error value with newline**\n\n\n\nreturn - Nil\n\n```function : public : ErrorLine() ~ Nil```"]
			},
			"IsChar": {
				"descriptions": ["**Checks of the character is a alpha digit**\n\n\n\nreturn - Bool\n\n```function : public : native : IsChar() ~ Bool```"]
			},
			"IsDigit": {
				"descriptions": ["**Checks of the character is a numeric digit**\n\n\n\nreturn - Bool\n\n```function : public : native : IsDigit() ~ Bool```"]
			},
			"IsLower": {
				"descriptions": ["**Checks if the character is lower-case**\n\n\n\nreturn - Bool\n\n```function : public : native : IsLower() ~ Bool```"]
			},
			"IsUpper": {
				"descriptions": ["**Checks if the character is upper-case**\n\n\n\nreturn - Bool\n\n```function : public : native : IsUpper() ~ Bool```"]
			},
			"Max": {
				"descriptions": ["**Returns the largest byte value**\n\n\n\nChar - l\n\nChar - r\n\nreturn - Char\n\n```function : public : native : Max(l:Char, r:Char) ~ Char```"]
			},
			"Min": {
				"descriptions": ["**Returns the smallest byte value**\n\n\n\nChar - l\n\nChar - r\n\nreturn - Char\n\n```function : public : native : Min(l:Char, r:Char) ~ Char```"]
			},
			"Print": {
				"descriptions": ["**Prints value**\n\n\n\nreturn - Nil\n\n```function : public : Print() ~ Nil```"]
			},
			"Sort": {
				"descriptions": ["**Prints value with newline**\n\n\n\nreturn - Char[]\n\n```function : public : native : Sort() ~ Char[]```"]
			},
			"ToByte": {
				"descriptions": ["**Returns the Character value**\n\n\n\nreturn - Byte\n\n```function : public : ToByte() ~ Byte```"]
			},
			"ToFloat": {
				"descriptions": ["**Returns the Float value**\n\n\n\nreturn - Float\n\n```function : public : ToFloat() ~ Float```"]
			},
			"ToInt": {
				"descriptions": ["**Returns the Int value**\n\n\n\nreturn - Int\n\n```function : public : ToInt() ~ Int```"]
			},
			"ToLower": {
				"descriptions": ["**Converts character to lower-case**\n\n\n\nreturn - Char\n\n```function : public : native : ToLower() ~ Char```"]
			},
			"ToString": {
				"descriptions": ["**Returns a string representation of the value**\n\n\n\nreturn - String\n\n```function : public : native : ToString() ~ String```"]
			},
			"ToUpper": {
				"descriptions": ["**Converts character to upper-case**\n\n\n\nreturn - Char\n\n```function : public : native : ToUpper() ~ Char```"]
			}
		}
	},
	"System.CharArrayHolder": {
		"description": "Holds a character array",
		"functions": {
			"Get": {
				"descriptions": ["**Get value**\n\n\n\nreturn - Char[]\n\n```method : public : Get() ~ Char[]```"]
			},
			"New": {
				"descriptions": ["**Copy constructor**\n\n\n\nChar[] - values\n\n```New(values:Char[])```"]
			},
			"Set": {
				"descriptions": ["**Set value**\n\n\n\nChar[] - values\n\nreturn - Nil\n\n```method : public : Set(values:Char[]) ~ Nil```"]
			}
		}
	},
	"System.CharHolder": {
		"description": "Holds an character value",
		"functions": {
			"Clone": {
				"descriptions": ["**Clones the object instance**\n\n\n\nreturn - System.Compare\n\n```method : public : Clone() ~ System.Compare```"]
			},
			"Compare": {
				"descriptions": ["**Compares two objects**\n\n\n\nSystem.Compare - rhs\n\nreturn - Int\n\n```method : public : native : Compare(rhs:System.Compare) ~ Int```"]
			},
			"Get": {
				"descriptions": ["**Get character value**\n\n\n\nreturn - Char\n\n```method : public : Get() ~ Char```"]
			},
			"HashID": {
				"descriptions": ["**Returns a unique hash ID for a character**\n\n\n\nreturn - Int\n\n```method : public : HashID() ~ Int```"]
			},
			"New": {
				"descriptions": ["**Default constructor**\n\n\n\n```New()```", "**Copy constructor**\n\n\n\nChar - value\n\n```New(value:Char)```"]
			},
			"Set": {
				"descriptions": ["**Set character value**\n\n\n\nChar - value\n\nreturn - Nil\n\n```method : public : Set(value:Char) ~ Nil```"]
			}
		}
	},
	"System.Clone": {
		"description": "Used to clone objects",
		"functions": {
			"Clone": {
				"descriptions": ["**Clones the object instance**\n\n\n\nreturn - System.Clone\n\n```method : public : virutal : Clone() ~ System.Clone```"]
			}
		}
	},
	"System.Compare": {
		"description": "Used to compare two abstract values",
		"functions": {
			"Compare": {
				"descriptions": ["**Compares two objects**\n\n\n\nSystem.Compare - rhs\n\nreturn - Int\n\n```method : public : virutal : Compare(rhs:System.Compare) ~ Int```"]
			},
			"HashID": {
				"descriptions": ["**Returns a hash ID for the given class**\n\n\n\nreturn - Int\n\n```method : public : virutal : HashID() ~ Int```"]
			}
		}
	},
	"System.Float": {
		"description": "Float class represents a double-precision floating-point value",
		"functions": {
			"Abs": {
				"descriptions": ["**Returns the absolute value**\n\n\n\nreturn - Float\n\n```function : public : native : Abs() ~ Float```"]
			},
			"ArcCos": {
				"descriptions": ["**Calculates the cosine value**\n\n\n\nreturn - Float\n\n```function : public : ArcCos() ~ Float```"]
			},
			"ArcSin": {
				"descriptions": ["**Calculates the arc-sine value**\n\n\n\nreturn - Float\n\n```function : public : ArcSin() ~ Float```"]
			},
			"ArcTan": {
				"descriptions": ["**Calculates the arc-tangent value**\n\n\n\nreturn - Float\n\n```function : public : ArcTan() ~ Float```"]
			},
			"ArcTan2": {
				"descriptions": ["**Calculates arc tangent of y/x**\n\n\n\nFloat - y\n\nFloat - x\n\nreturn - Float\n\n```function : public : ArcTan2(y:Float, x:Float) ~ Float```"]
			},
			"Ceiling": {
				"descriptions": ["**Calculates the ceiling value**\n\n\n\nreturn - Float\n\n```function : public : Ceiling() ~ Float```"]
			},
			"Compare": {
				"descriptions": ["**Compares two value**\n\n\n\nFloat - l\n\nFloat - r\n\nreturn - Int\n\n```function : public : native : Compare(l:Float, r:Float) ~ Int```"]
			},
			"Cos": {
				"descriptions": ["**Calculates the cosine value**\n\n\n\nreturn - Float\n\n```function : public : Cos() ~ Float```"]
			},
			"E": {
				"descriptions": ["**Value of E**\n\n\n\nreturn - Float\n\n```function : public : native : E() ~ Float```"]
			},
			"Error": {
				"descriptions": ["**Prints error value**\n\n\n\nreturn - Nil\n\n```function : public : Error() ~ Nil```"]
			},
			"ErrorLine": {
				"descriptions": ["**Prints error value with newline**\n\n\n\nreturn - Nil\n\n```function : public : ErrorLine() ~ Nil```"]
			},
			"Floor": {
				"descriptions": ["**Calculates the floor value**\n\n\n\nreturn - Float\n\n```function : public : Floor() ~ Float```"]
			},
			"IsNeg": {
				"descriptions": ["**Checks is a number is negative**\n\n\n\nreturn - Bool\n\n```function : public : native : IsNeg() ~ Bool```"]
			},
			"Log": {
				"descriptions": ["**Calculates the log value**\n\n\n\nreturn - Float\n\n```function : public : Log() ~ Float```"]
			},
			"Max": {
				"descriptions": ["**Returns the largest float value**\n\n\n\nFloat - l\n\nFloat - r\n\nreturn - Float\n\n```function : public : native : Max(l:Float, r:Float) ~ Float```"]
			},
			"Min": {
				"descriptions": ["**Returns the smallest float value**\n\n\n\nFloat - l\n\nFloat - r\n\nreturn - Float\n\n```function : public : native : Min(r:Float) ~ Float```"]
			},
			"NotNeg": {
				"descriptions": ["**Checks is a number is not negative**\n\n\n\nreturn - Bool\n\n```function : public : native : NotNeg() ~ Bool```"]
			},
			"Pi": {
				"descriptions": ["**Value of Pi**\n\n\n\nreturn - Float\n\n```function : public : native : Pi() ~ Float```"]
			},
			"Power": {
				"descriptions": ["**Calculates the power value**\n\n\n\nFloat - b\n\nFloat - r\n\nreturn - Float\n\n```function : public : Power(b:Float, r:Float) ~ Float```"]
			},
			"Print": {
				"descriptions": ["**Prints value**\n\n\n\nreturn - Nil\n\n```function : public : Print() ~ Nil```"]
			},
			"PrintLine": {
				"descriptions": ["**Prints value with newline**\n\n\n\nreturn - Nil\n\n```function : public : PrintLine() ~ Nil```"]
			},
			"Random": {
				"descriptions": ["**Returns a pseudo random value between 0.0 and 1.0**\n\n\n\nreturn - Float\n\n```function : public : Random() ~ Float```"]
			},
			"Sin": {
				"descriptions": ["**Calculates the sine value**\n\n\n\nreturn - Float\n\n```function : public : Sin() ~ Float```"]
			},
			"SquareRoot": {
				"descriptions": ["**Calculates the natural log value**\n\n\n\nreturn - Float\n\n```function : public : SquareRoot() ~ Float```"]
			},
			"Tan": {
				"descriptions": ["**Calculates the tangent value**\n\n\n\nreturn - Float\n\n```function : public : Tan() ~ Float```"]
			},
			"ToByte": {
				"descriptions": ["**Returns the Character value**\n\n\n\nreturn - Byte\n\n```function : public : ToByte() ~ Byte```"]
			},
			"ToChar": {
				"descriptions": ["**Returns the Int value**\n\n\n\nreturn - Char\n\n```function : public : ToChar() ~ Char```"]
			},
			"ToDegrees": {
				"descriptions": ["**Converts the value into degrees**\n\n\n\nreturn - Float\n\n```function : public : native : ToDegrees() ~ Float```"]
			},
			"ToInt": {
				"descriptions": ["**Returns the Int value**\n\n\n\nreturn - Int\n\n```function : public : ToInt() ~ Int```"]
			},
			"ToRadians": {
				"descriptions": ["**Converts the value into radians**\n\n\n\nreturn - Float\n\n```function : public : native : ToRadians() ~ Float```"]
			},
			"ToString": {
				"descriptions": ["**Returns a string representation of the value**\n\n\n\nreturn - String\n\n```function : public : native : ToString() ~ String```"]
			}
		}
	},
	"System.FloatArrayHolder": {
		"description": "Holds a float array",
		"functions": {
			"Get": {
				"descriptions": ["**Gets values**\n\n\n\nreturn - Float[]\n\n```method : public : Get() ~ Float[]```"]
			},
			"New": {
				"descriptions": ["**Copy constructor**\n\n\n\nFloat[] - values\n\n```New(values:Float[])```"]
			},
			"Set": {
				"descriptions": ["**Sets values**\n\n\n\nFloat[] - values\n\nreturn - Nil\n\n```method : public : Set(values:Float[]) ~ Nil```"]
			}
		}
	},
	"System.FloatHolder": {
		"description": "Holds a float",
		"functions": {
			"Add": {
				"descriptions": ["**Adds to value**\n\n\n\nFloat - value\n\nreturn - Nil\n\n```method : public : Add(value:Float) ~ Nil```"]
			},
			"Clone": {
				"descriptions": ["**Clones the object instance**\n\n\n\nreturn - System.Compare\n\n```method : public : Clone() ~ System.Compare```"]
			},
			"Compare": {
				"descriptions": ["**Compares two objects**\n\n\n\nSystem.Compare - rhs\n\nreturn - Int\n\n```method : public : native : Compare(rhs:System.Compare) ~ Int```"]
			},
			"Div": {
				"descriptions": ["**Divide by value**\n\n\n\nFloat - value\n\nreturn - Nil\n\n```method : public : Div(value:Float) ~ Nil```"]
			},
			"Get": {
				"descriptions": ["**Get value**\n\n\n\nreturn - Float\n\n```method : public : Get() ~ Float```"]
			},
			"HashID": {
				"descriptions": ["**Returns a unique hash ID for a float**\n\n\n\nreturn - Int\n\n```method : public : HashID() ~ Int```"]
			},
			"Mul": {
				"descriptions": ["**Multiply to value**\n\n\n\nFloat - value\n\nreturn - Nil\n\n```method : public : Mul(value:Float) ~ Nil```"]
			},
			"New": {
				"descriptions": ["**Default constructor**\n\n\n\n```New()```", "**Copy constructor**\n\n\n\nFloat - value\n\n```New(value:Float)```"]
			},
			"Set": {
				"descriptions": ["**Set value**\n\n\n\nFloat - value\n\nreturn - Nil\n\n```method : public : Set(value:Float) ~ Nil```"]
			},
			"Sub": {
				"descriptions": ["**Subtract from value**\n\n\n\nFloat - value\n\nreturn - Nil\n\n```method : public : Sub(value:Float) ~ Nil```"]
			}
		}
	},
	"System.Func2Holder": {
		"description": "Holds a function of in type X and out type R",
		"functions": {
			"Apply": {
				"descriptions": ["**Apply function**\n\n\n\nX - arg\n\nreturn - R\n\n```function : public : Apply(arg:X) ~ R```"]
			},
			"Get": {
				"descriptions": ["**Gets function**\n\n\n\nreturn - (X)~R\n\n```method : public : Get() ~ (X)~R```"]
			},
			"New": {
				"descriptions": ["**Constructor**\n\n\n\n(X)~R - func\n\n```New(func:(X)~R)```"]
			},
			"Set": {
				"descriptions": ["**Sets function**\n\n\n\n(X)~R - func\n\nreturn - Nil\n\n```method : public : Set(func:(X)~R) ~ Nil```"]
			}
		}
	},
	"System.Func3Holder": {
		"description": "Holds a function of in types X, Y and out type R",
		"functions": {
			"Get": {
				"descriptions": ["**Gets function**\n\n\n\nreturn - (X,Y)~R\n\n```method : public : Get() ~ (X,Y)~R```"]
			},
			"New": {
				"descriptions": ["**Constructor**\n\n\n\n(X,Y)~R - func\n\n```New(func:(X,Y)~R)```"]
			},
			"Set": {
				"descriptions": ["**Sets function**\n\n\n\n(X,Y)~R - func\n\nreturn - Nil\n\n```method : public : Set(func:(X,Y)~R) ~ Nil```"]
			}
		}
	},
	"System.Func4Holder": {
		"description": "Holds a function of in types X, Y, Z and out type R",
		"functions": {
			"Get": {
				"descriptions": ["**Gets function**\n\n\n\nreturn - (X,Y,Z)~R\n\n```method : public : Get() ~ (X,Y,Z)~R```"]
			},
			"New": {
				"descriptions": ["**Constructor**\n\n\n\n(X,Y,Z)~R - func\n\n```New(func:(X,Y,Z)~R)```"]
			},
			"Set": {
				"descriptions": ["**Sets function**\n\n\n\n(X,Y,Z)~R - func\n\nreturn - Nil\n\n```method : public : Set(func:(X,Y,Z)~R) ~ Nil```"]
			}
		}
	},
	"System.FuncHolder": {
		"description": "Holds a function of in/out type R",
		"functions": {
			"Get": {
				"descriptions": ["**Gets function**\n\n\n\nreturn - ()~R\n\n```method : public : Get() ~ ()~R```"]
			},
			"New": {
				"descriptions": ["**Constructor**\n\n\n\n()~R - func\n\n```New(func:()~R)```"]
			},
			"Set": {
				"descriptions": ["**Sets function**\n\n\n\n()~R - func\n\nreturn - Nil\n\n```method : public : Set(func:()~R) ~ Nil```"]
			}
		}
	},
	"System.Int": {
		"description": "Integer class represents an operating system long value",
		"functions": {
			"Abs": {
				"descriptions": ["**Returns the absolute value**\n\n\n\nreturn - Int\n\n```function : public : native : Abs() ~ Int```"]
			},
			"Compare": {
				"descriptions": ["**Compares two values**\n\n\n\nInt - l\n\nInt - r\n\nreturn - Int\n\n```function : public : native : Compare(l:Int, r:Int) ~ Int```"]
			},
			"Error": {
				"descriptions": ["**Prints error value**\n\n\n\nreturn - Nil\n\n```function : public : Error() ~ Nil```"]
			},
			"ErrorLine": {
				"descriptions": ["**Prints error value with newline**\n\n\n\nreturn - Nil\n\n```function : public : ErrorLine() ~ Nil```"]
			},
			"Factorial": {
				"descriptions": ["**Calculates the factorial of existing value**\n\n\n\nInt - n\n\nreturn - Int\n\n```function : public : native : Factorial() ~ Int```"]
			},
			"IsNeg": {
				"descriptions": ["**Checks is a number is negative**\n\n\n\nreturn - Bool\n\n```function : public : native : IsNeg() ~ Bool```"]
			},
			"Max": {
				"descriptions": ["**Returns the largest integer value**\n\n\n\nInt - l\n\nInt - r\n\nreturn - Int\n\n```function : public : native : Max(l:Int, r:Int) ~ Int```"]
			},
			"MaxSize": {
				"descriptions": ["**Returns the maximum size of an integer**\n\n\n\nreturn - Int\n\n```function : public : native : MaxSize() ~ Int```"]
			},
			"Min": {
				"descriptions": ["**Returns the smallest integer value**\n\n\n\nInt - l\n\nInt - r\n\nreturn - Int\n\n```function : public : native : Min(l:Int, r:Int) ~ Int```"]
			},
			"MinSize": {
				"descriptions": ["**Returns the minimum size of an integer**\n\n\n\nreturn - Int\n\n```function : public : native : MinSize() ~ Int```"]
			},
			"NotNeg": {
				"descriptions": ["**Checks is a number is not negative**\n\n\n\nreturn - Bool\n\n```function : public : native : NotNeg() ~ Bool```"]
			},
			"Print": {
				"descriptions": ["**Prints value**\n\n\n\nreturn - Nil\n\n```function : public : Print() ~ Nil```"]
			},
			"PrintLine": {
				"descriptions": ["**Prints value with newline**\n\n\n\nreturn - Nil\n\n```function : public : PrintLine() ~ Nil```"]
			},
			"Random": {
				"descriptions": ["**Returns a random number within the given range**\n\n\n\nInt - min\n\nInt - max\n\nreturn - Int\n\n```function : public : Random(min:Int, max:Int) ~ Int```", "**Returns a random number between 0 and max value**\n\n\n\nInt - max\n\nreturn - Int\n\n```function : public : Random(max:Int) ~ Int```"]
			},
			"ToBinaryString": {
				"descriptions": ["**Returns the binary string value**\n\n\n\nreturn - String\n\n```function : public : native : ToBinaryString() ~ String```"]
			},
			"ToByte": {
				"descriptions": ["**Returns the Byte value**\n\n\n\nreturn - Byte\n\n```function : public : ToByte() ~ Byte```"]
			},
			"ToChar": {
				"descriptions": ["**Returns the Character value**\n\n\n\nreturn - Char\n\n```function : public : ToChar() ~ Char```"]
			},
			"ToCommaString": {
				"descriptions": ["**Returns a comma formatted string value**\n\n\n\nreturn - String\n\n```function : public : native : ToCommaString() ~ String```"]
			},
			"ToFloat": {
				"descriptions": ["**Returns the Float value**\n\n\n\nreturn - Float\n\n```function : public : ToFloat() ~ Float```"]
			},
			"ToHexString": {
				"descriptions": ["**Returns the hex string value**\n\n\n\nreturn - String\n\n```function : public : native : ToHexString() ~ String```"]
			},
			"ToString": {
				"descriptions": ["**Returns the string value**\n\n\n\nreturn - String\n\n```function : public : ToString() ~ String```", "**Returns a string representation of the value**\n\n\n\nreturn - String\n\n```function : public : native : ToString() ~ String```"]
			}
		}
	},
	"System.IntArrayHolder": {
		"description": "Holds an integer array",
		"functions": {
			"Get": {
				"descriptions": ["**Get values**\n\n\n\nreturn - Int[]\n\n```method : public : Get() ~ Int[]```"]
			},
			"New": {
				"descriptions": ["**Copy constructor**\n\n\n\nInt[] - values\n\n```New(values:Int[])```"]
			},
			"Set": {
				"descriptions": ["**Set values**\n\n\n\nInt[] - values\n\nreturn - Nil\n\n```method : public : Set(values:Int[]) ~ Nil```"]
			}
		}
	},
	"System.IntHolder": {
		"description": "Holds an integer value",
		"functions": {
			"Add": {
				"descriptions": ["**Adds to value**\n\n\n\nInt - value\n\nreturn - Nil\n\n```method : public : Add(value:Int) ~ Nil```"]
			},
			"Clone": {
				"descriptions": ["**Clones the object instance**\n\n\n\nreturn - System.Compare\n\n```method : public : Clone() ~ System.Compare```"]
			},
			"Compare": {
				"descriptions": ["**Compares two objects**\n\n\n\nSystem.Compare - rhs\n\nreturn - Int\n\n```method : public : native : Compare(rhs:System.Compare) ~ Int```"]
			},
			"Dec": {
				"descriptions": ["**Decrements value by 1**\n\n\n\nreturn - Nil\n\n```method : public : Dec() ~ Nil```"]
			},
			"Div": {
				"descriptions": ["**Divide by value**\n\n\n\nInt - value\n\nreturn - Nil\n\n```method : public : Div(value:Int) ~ Nil```"]
			},
			"Get": {
				"descriptions": ["**Get integer value**\n\n\n\nreturn - Int\n\n```method : public : Get() ~ Int```"]
			},
			"HashID": {
				"descriptions": ["**Returns a unique hash ID for a integer**\n\n\n\nreturn - Int\n\n```method : public : HashID() ~ Int```"]
			},
			"Inc": {
				"descriptions": ["**Increments value by 1**\n\n\n\nreturn - Nil\n\n```method : public : Inc() ~ Nil```"]
			},
			"Mul": {
				"descriptions": ["**Multiply to value**\n\n\n\nInt - value\n\nreturn - Nil\n\n```method : public : Mul(value:Int) ~ Nil```"]
			},
			"New": {
				"descriptions": ["**Default constructor**\n\n\n\n```New()```", "**Copy constructor**\n\n\n\nInt - value\n\n```New(value:Int)```"]
			},
			"Set": {
				"descriptions": ["**Set integer value**\n\n\n\nInt - value\n\nreturn - Nil\n\n```method : public : Set(value:Int) ~ Nil```"]
			},
			"Sub": {
				"descriptions": ["**Subtract from value**\n\n\n\nInt - value\n\nreturn - Nil\n\n```method : public : Sub(value:Int) ~ Nil```"]
			}
		}
	},
	"System.Runtime": {
		"description": "Provides access to runtime system",
		"functions": {
			"Assert": {
				"descriptions": ["**Asserts runtime value to be true. If false, program exits with stack trace.**\n\n\n\nBool - assert\n\nreturn - Nil\n\n```function : public : Assert(assert:Bool) ~ Nil```"]
			},
			"Command": {
				"descriptions": ["**Executes a system command**\n\n\n\nSystem.String - n\n\nreturn - Int\n\n```function : public : Command(n:System.String) ~ Int```"]
			},
			"CommandOutput": {
				"descriptions": ["**Executes a system command**\n\n\n\nSystem.String - n\n\nreturn - System.String[]\n\n```function : public : CommandOutput(n:System.String) ~ System.String[]```"]
			},
			"Copy": {
				"descriptions": ["**Copies data between two byte arrays**\n\n\n\nByte[] - dest\n\nInt - dest_offset\n\nByte[] - src\n\nInt - src_offset\n\nInt - len\n\nreturn - Bool\n\n```function : public : Copy(dest:Byte[], dest_offset:Int, src:Byte[], src_offset:Int, len:Int) ~ Bool```", "**Copies data between two character arrays**\n\n\n\nChar[] - dest\n\nInt - dest_offset\n\nChar[] - src\n\nInt - src_offset\n\nInt - len\n\nreturn - Bool\n\n```function : public : Copy(dest:Char[], dest_offset:Int, src:Char[], src_offset:Int, len:Int) ~ Bool```", "**Copies data between two integer arrays**\n\n\n\nInt[] - dest\n\nInt - dest_offset\n\nInt[] - src\n\nInt - src_offset\n\nInt - len\n\nreturn - Bool\n\n```function : public : Copy(dest:Int[], dest_offset:Int, src:Int[], src_offset:Int, len:Int) ~ Bool```", "**Copies data between two Base arrays**\n\n\n\nBase[] - dest\n\nInt - dest_offset\n\nBase[] - src\n\nInt - src_offset\n\nInt - len\n\nreturn - Bool\n\n```function : public : Copy(dest:Base[], dest_offset:Int, src:Base[], src_offset:Int, len:Int) ~ Bool```", "**Copies data between two Compare arrays**\n\n\n\nCompare[] - dest\n\nInt - dest_offset\n\nCompare[] - src\n\nInt - src_offset\n\nInt - len\n\nreturn - Bool\n\n```function : public : Copy(dest:Compare[], dest_offset:Int, src:Compare[], src_offset:Int, len:Int) ~ Bool```", "**Copies data between two float arrays**\n\n\n\nFloat[] - dest\n\nInt - dest_offset\n\nFloat[] - src\n\nInt - src_offset\n\nInt - len\n\nreturn - Bool\n\n```function : public : Copy(dest:Float[], dest_offset:Int, src:Float[], src_offset:Int, len:Int) ~ Bool```"]
			},
			"Exit": {
				"descriptions": ["**Causes the executing program to halt**\n\n\n\nInt - code\n\nreturn - Nil\n\n```function : public : Exit(code:Int) ~ Nil```"]
			},
			"GetInstallDir": {
				"descriptions": ["**Returns the installation directory**\n\n\n\nreturn - String\n\n```function : public : GetInstallDir() ~ String```"]
			},
			"GetPlatform": {
				"descriptions": ["**Returns an OS platform string**\n\n\n\nreturn - String\n\n```function : public : GetPlatform() ~ String```"]
			},
			"GetProperty": {
				"descriptions": ["**Fetches a runtime property. System properties include: 'user_dir', temp_dir and 'install_dir'.**\n\n\n\nString - key\n\nreturn - String\n\n```function : public : GetProperty(key:String) ~ String```"]
			},
			"GetTempDir": {
				"descriptions": ["**Returns the system's temporary directory**\n\n\n\nreturn - String\n\n```function : public : GetTempDir() ~ String```"]
			},
			"GetTime": {
				"descriptions": ["**Returns the current time**\n\n\n\nBool - gmt\n\nreturn - Time.Date\n\n```function : public : GetTime(gmt:Bool) ~ Time.Date```"]
			},
			"GetUserDir": {
				"descriptions": ["**Returns the current user's working directory**\n\n\n\nreturn - String\n\n```function : public : GetUserDir() ~ String```"]
			},
			"GetVersion": {
				"descriptions": ["**Returns the package version string**\n\n\n\nreturn - String\n\n```function : public : GetVersion() ~ String```"]
			},
			"SetPrecision": {
				"descriptions": ["**Set floating point display precision. Valid values are a number, 'fixed' or 'scientific'.**\n\n\n\nString - value\n\nreturn - Nil\n\n```function : public : SetPrecision(value:String) ~ Nil```"]
			},
			"SetProperty": {
				"descriptions": ["**Sets a runtime property**\n\n\n\nString - key\n\nString - value\n\nreturn - Nil\n\n```function : public : SetProperty(key:String, value:String) ~ Nil```"]
			}
		}
	},
	"System.String": {
		"description": "Resizeable Unicode string class that supports typical string operations.",
		"functions": {
			"Append": {
				"descriptions": ["**Appends a boolean value**\n\n\n\nBool - flag\n\nreturn - Nil\n\n```method : public : Append(flag:Bool) ~ Nil```", "**Appends a integer value**\n\n\n\nInt - i\n\nreturn - Nil\n\n```method : public : Append(i:Int) ~ Nil```", "**Appends a float value**\n\n\n\nFloat - f\n\nreturn - Nil\n\n```method : public : Append(f:Float) ~ Nil```", "**Appends a string**\n\n\n\nString - str\n\nreturn - Nil\n\n```method : public : native : Append(str:String) ~ Nil```", "**Appends a character array**\n\n\n\nChar[] - array\n\nreturn - Nil\n\n```method : public : Append(array:Char[]) ~ Nil```", "**Appends a portion of character array**\n\n\n\nChar[] - array\n\nInt - offset\n\nInt - length\n\nreturn - Nil\n\n```method : public : native : Append(array:Char[], offset:Int, length:Int) ~ Nil```", "**Appends a character array**\n\n\n\nByte[] - array\n\nreturn - Nil\n\n```method : public : native : Append(array:Byte[]) ~ Nil```", "**Appends a portion of byte array**\n\n\n\nByte[] - array\n\nInt - offset\n\nInt - length\n\nreturn - Nil\n\n```method : public : native : Append(array:Byte[], offset:Int, length:Int) ~ Nil```", "**Appends a character**\n\n\n\nChar - c\n\nreturn - Nil\n\n```method : public : Append(c:Char) ~ Nil```", "**Appends a byte**\n\n\n\nByte - c\n\nreturn - Nil\n\n```method : public : Append(c:Byte) ~ Nil```"]
			},
			"Capacity": {
				"descriptions": ["**Gets the current string capacity.**\n\n\n\nreturn - Int\n\n```method : public : Capacity() ~ Int```"]
			},
			"Clear": {
				"descriptions": ["**Clears string**\n\n\n\nreturn - Nil\n\n```method : public : Clear() ~ Nil```"]
			},
			"Clone": {
				"descriptions": ["**Clones the object instance**\n\n\n\nreturn - System.Compare\n\n```method : public : Clone() ~ System.Compare```"]
			},
			"Compare": {
				"descriptions": ["**Compares two objects**\n\n\n\nSystem.Compare - rhs\n\nreturn - Int\n\n```method : public : Compare(rhs:System.Compare) ~ Int```"]
			},
			"Compress": {
				"descriptions": ["**Compresses a string removing unused space.**\n\n\n\nreturn - Nil\n\n```method : public : Compress() ~ Nil```"]
			},
			"Count": {
				"descriptions": ["**Count the occurrences of the character**\n\n\n\nChar - char\n\nreturn - Int\n\n```method : public : Count(char:Char) ~ Int```"]
			},
			"Delete": {
				"descriptions": ["**Deletes the character at the given index**\n\n\n\nInt - offset\n\nreturn - Bool\n\n```method : public : Delete(offset:Int) ~ Bool```", "**Deletes the characters at the given range**\n\n\n\nInt - offset\n\nInt - length\n\nreturn - Bool\n\n```method : public : Delete(offset:Int, length:Int) ~ Bool```"]
			},
			"EndsWith": {
				"descriptions": ["**Checks if the string ends with the given character**\n\n\n\nChar - char\n\nreturn - Bool\n\n```method : public : EndsWith(char:Char) ~ Bool```", "**Checks if the string ends with the given character**\n\n\n\nString - string\n\nreturn - Bool\n\n```method : public : native : EndsWith(string:String) ~ Bool```"]
			},
			"Equals": {
				"descriptions": ["**Compares two strings**\n\n\n\nString - rhs\n\nreturn - Bool\n\n```method : public : Equals(rhs:String) ~ Bool```"]
			},
			"Error": {
				"descriptions": ["**Print an error string**\n\n\n\nreturn - Nil\n\n```method : public : native : Error() ~ Nil```"]
			},
			"ErrorLine": {
				"descriptions": ["**Print an error string with a newline**\n\n\n\nreturn - Nil\n\n```method : public : native : ErrorLine() ~ Nil```"]
			},
			"Find": {
				"descriptions": ["**Searches for the first occurrence of a character**\n\n\n\nChar - char\n\nreturn - Int\n\n```method : public : Find(char:Char) ~ Int```", "**Searches for the first occurrence of a character**\n\n\n\nInt - offset\n\nChar - char\n\nreturn - Int\n\n```method : public : native : Find(offset:Int, char:Char) ~ Int```", "**Searches for the first occurrence of a string**\n\n\n\nString - find\n\nreturn - Int\n\n```method : public : Find(find:String) ~ Int```", "**Searches for the first occurrence of a string**\n\n\n\nInt - offset\n\nString - find\n\nreturn - Int\n\n```method : public : native : Find(offset:Int, find:String) ~ Int```"]
			},
			"FindAll": {
				"descriptions": ["**Searches for all occurrences of a string**\n\n\n\nString - find\n\nreturn - Int[]\n\n```method : public : FindAll(find:String) ~ Int[]```"]
			},
			"FindLast": {
				"descriptions": ["**Searches for the last occurrence of a character**\n\n\n\nChar - char\n\nreturn - Int\n\n```method : public : FindLast(char:Char) ~ Int```", "**Searches for the last occurrence of a character**\n\n\n\nInt - offset\n\nChar - char\n\nreturn - Int\n\n```method : public : native : FindLast(offset:Int, char:Char) ~ Int```"]
			},
			"Get": {
				"descriptions": ["**Returns character at the given index**\n\n\n\nInt - index\n\nreturn - Char\n\n```method : public : native : Get(index:Int) ~ Char```"]
			},
			"Has": {
				"descriptions": ["**Searches for the first occurrence of a character**\n\n\n\nChar - char\n\nreturn - Bool\n\n```method : public : Has(char:Char) ~ Bool```", "**Searches for the first occurrence of a character**\n\n\n\nInt - offset\n\nChar - char\n\nreturn - Bool\n\n```method : public : Has(offset:Int, char:Char) ~ Bool```", "**Searches for the first occurrence of a character**\n\n\n\nString - str\n\nreturn - Bool\n\n```method : public : Has(str:String) ~ Bool```", "**Searches for the first occurrence of a character**\n\n\n\nInt - offset\n\nString - str\n\nreturn - Bool\n\n```method : public : Has(offset:Int, str:String) ~ Bool```"]
			},
			"HashID": {
				"descriptions": ["**Returns a unique hash ID for a given string sequence**\n\n\n\nreturn - Int\n\n```method : public : native : HashID() ~ Int```"]
			},
			"Insert": {
				"descriptions": ["**Insert inserts a character**\n\n\n\nInt - index\n\nChar - char\n\nreturn - Bool\n\n```method : public : Insert(index:Int, char:Char) ~ Bool```", "**Insert inserts a string**\n\n\n\nInt - index\n\nString - string\n\nreturn - Bool\n\n```method : public : Insert(index:Int, string:String) ~ Bool```"]
			},
			"IsEmpty": {
				"descriptions": ["**Returns rather the string is empty**\n\n\n\nreturn - Bool\n\n```method : public : IsEmpty() ~ Bool```"]
			},
			"New": {
				"descriptions": ["**Default constructor**\n\n\n\n```New()```", "**Copy constructor**\n\n\n\nString - string\n\n```New(string:String)```", "**Copy constructor**\n\n\n\nChar[] - array\n\n```New(array:Char[])```", "**Copy constructor**\n\n\n\nChar[] - array\n\nBool - copy\n\n```New(array:Char[], copy:Bool)```", "**Copy constructor**\n\n\n\nChar[] - array\n\nInt - offset\n\nInt - length\n\n```New(array:Char[], offset:Int, length:Int)```", "**Copy constructor**\n\n\n\nByte[] - bytes\n\n```New(bytes:Byte[])```", "**Copy constructor**\n\n\n\nByte[] - bytes\n\nInt - offset\n\nInt - length\n\n```New(bytes:Byte[], offset:Int, length:Int)```"]
			},
			"Pop": {
				"descriptions": ["**Pops the last character from the string reducing the size by 1**\n\n\n\nreturn - Char\n\n```method : public : native : Pop() ~ Char```"]
			},
			"Print": {
				"descriptions": ["**Print a string**\n\n\n\nreturn - Nil\n\n```method : public : native : Print() ~ Nil```"]
			},
			"PrintLine": {
				"descriptions": ["**Print a string with a newline**\n\n\n\nreturn - Nil\n\n```method : public : native : PrintLine() ~ Nil```"]
			},
			"Replace": {
				"descriptions": ["**Replaces the first occurrence the search string**\n\n\n\nString - find\n\nString - replace\n\nreturn - String\n\n```method : public : Replace(find:String, replace:String) ~ String```"]
			},
			"ReplaceAll": {
				"descriptions": ["**Replaces all occurrences the search string**\n\n\n\nString - find\n\nString - replace\n\nreturn - String\n\n```method : public : ReplaceAll(find:String, replace:String) ~ String```", "**Replaces all occurrences the search string**\n\n\n\nChar - find\n\nChar - replace\n\nreturn - String\n\n```method : public : native : ReplaceAll(find:Char, replace:Char) ~ String```"]
			},
			"Reverse": {
				"descriptions": ["**Reverses a string**\n\n\n\nreturn - String\n\n```method : public : native : Reverse() ~ String```"]
			},
			"Set": {
				"descriptions": ["**Sets character at the given index**\n\n\n\nChar - char\n\nInt - index\n\nreturn - Bool\n\n```method : public : native : Set(char:Char, index:Int) ~ Bool```"]
			},
			"Size": {
				"descriptions": ["**Return the size of the string**\n\n\n\nreturn - Int\n\n```method : public : Size() ~ Int```"]
			},
			"Split": {
				"descriptions": ["**Splits a string based upon delimiter**\n\n\n\nString - delim\n\nreturn - String[]\n\n```method : public : native : Split(delim:String) ~ String[]```"]
			},
			"StartsWith": {
				"descriptions": ["**Checks if the string starts with the given character**\n\n\n\nChar - char\n\nreturn - Bool\n\n```method : public : StartsWith(char:Char) ~ Bool```", "**Checks if the string starts with the given string**\n\n\n\nString - string\n\nreturn - Bool\n\n```method : public : StartsWith(string:String) ~ Bool```"]
			},
			"SubString": {
				"descriptions": ["**Creates a sub-string**\n\n\n\nInt - length\n\nreturn - String\n\n```method : public : SubString(length:Int) ~ String```", "**Creates a sub-string**\n\n\n\nInt - offset\n\nInt - length\n\nreturn - String\n\n```method : public : SubString(offset:Int, length:Int) ~ String```"]
			},
			"ToByteArray": {
				"descriptions": ["**Returns a byte array representation of the String**\n\n\n\nreturn - Byte[]\n\n```method : public : native : ToByteArray() ~ Byte[]```"]
			},
			"ToCharArray": {
				"descriptions": ["**Returns a character array representation of the String**\n\n\n\nreturn - Char[]\n\n```method : public : ToCharArray() ~ Char[]```"]
			},
			"ToFloat": {
				"descriptions": ["**Parses the string into a float**\n\n\n\nreturn - Float\n\n```method : public : ToFloat() ~ Float```"]
			},
			"ToInt": {
				"descriptions": ["**Parses the string into an integer**\n\n\n\nreturn - Int\n\n```method : public : ToInt() ~ Int```", "**Parses the string into an integer**\n\n\n\nInt - base\n\nreturn - Int\n\n```method : public : ToInt(base:Int) ~ Int```"]
			},
			"ToLower": {
				"descriptions": ["**Transforms a to lower case**\n\n\n\nreturn - String\n\n```method : public : native : ToLower() ~ String```"]
			},
			"ToUpper": {
				"descriptions": ["**Transforms a to upper case**\n\n\n\nreturn - String\n\n```method : public : native : ToUpper() ~ String```"]
			},
			"Trim": {
				"descriptions": ["**Removes all leading and ending white space**\n\n\n\nreturn - String\n\n```method : public : native : Trim() ~ String```"]
			}
		}
	},
	"System.StringArrayHolder": {
		"description": "Holds an base array",
		"functions": {
			"Get": {
				"descriptions": ["**Get values**\n\n\n\nreturn - String[]\n\n```method : public : Get() ~ String[]```"]
			},
			"New": {
				"descriptions": ["**Copy constructor**\n\n\n\nString[] - values\n\n```New(values:String[])```"]
			},
			"Set": {
				"descriptions": ["**Set values**\n\n\n\nString[] - values\n\nreturn - Nil\n\n```method : public : Set(values:String[]) ~ Nil```"]
			}
		}
	},
	"System.API.DllProxy": {
		"description": "Class allow programmers to load native shared libraries that can be called by Objeck classes. Programmers can call native C functions within these libraries.",
		"functions": {
			"CallFunction": {
				"descriptions": ["**Calls a native C function.**\n\n\n\nString - name\n\nBase[] - args\n\nreturn - Nil\n\n```method : public : CallFunction(name:String, args:Base[]) ~ Nil```"]
			},
			"IsLoaded": {
				"descriptions": ["**Returns rather the shared library has been successfully loaded**\n\n\n\nreturn - Bool\n\n```method : public : IsLoaded() ~ Bool```"]
			},
			"New": {
				"descriptions": ["**Path to the shared library. The path should not include the extension name (i.e. .dll, .so, etc.) for platform portability**\n\n\n\nString - name\n\n```New(name:String)```"]
			},
			"Unload": {
				"descriptions": ["**Unloads the shared library**\n\n\n\nreturn - Nil\n\n```method : public : Unload() ~ Nil```"]
			}
		}
	},
	"System.Concurrency.Thread": {
		"description": "Abstracts native system thread execution",
		"functions": {
			"Execute": {
				"descriptions": ["**Called to execute a new thread**\n\n\n\nSystem.Base - param\n\nreturn - Nil\n\n```method : public : Execute(param:System.Base) ~ Nil```"]
			},
			"GetExecuteID": {
				"descriptions": ["**Returns a unique execution ID**\n\n\n\nreturn - Int\n\n```method : public : GetExecuteID() ~ Int```"]
			},
			"GetName": {
				"descriptions": ["**Returns the thread's name**\n\n\n\nreturn - String\n\n```method : public : GetName() ~ String```"]
			},
			"Join": {
				"descriptions": ["**Joins the executing thread with the caller**\n\n\n\nreturn - Nil\n\n```method : public : Join() ~ Nil```"]
			},
			"New": {
				"descriptions": ["**Name of the thread**\n\n\n\nString - name\n\n```New(name:String)```"]
			},
			"Run": {
				"descriptions": ["**Prototype for the thread to be executed**\n\n\n\nSystem.Base - param\n\nreturn - Nil\n\n```method : public : virutal : Run(param:System.Base) ~ Nil```"]
			},
			"Sleep": {
				"descriptions": ["**Sleeps the executing thread**\n\n\n\nInt - t\n\nreturn - Nil\n\n```function : public : Sleep(t:Int) ~ Nil```"]
			}
		}
	},
	"System.Concurrency.ThreadMutex": {
		"description": "Thread mutex used to protect critical sections",
		"functions": {
			"GetName": {
				"descriptions": ["**Name of the mutex**\n\n\n\nreturn - String\n\n```method : public : GetName() ~ String```"]
			},
			"New": {
				"descriptions": ["**Name of the mutex**\n\n\n\nString - name\n\n```New(name:String)```"]
			}
		}
	},
	"System.IO.Deserializer": {
		"description": "Used to deserialize objects",
		"functions": {
			"New": {
				"descriptions": ["**Default constructor**\n\n\n\nByte[] - buffer\n\n```New(buffer:Byte[])```"]
			},
			"ReadBool": {
				"descriptions": ["**Reads a value**\n\n\n\nreturn - Bool\n\n```method : public : ReadBool() ~ Bool```"]
			},
			"ReadBoolArray": {
				"descriptions": ["**Reads an array of values**\n\n\n\nreturn - Bool[]\n\n```method : public : ReadBoolArray() ~ Bool[]```"]
			},
			"ReadByteArray": {
				"descriptions": ["**Reads an array of values**\n\n\n\nreturn - Byte[]\n\n```method : public : ReadByteArray() ~ Byte[]```"]
			},
			"ReadChar": {
				"descriptions": ["**Reads a value**\n\n\n\nreturn - Char\n\n```method : public : ReadChar() ~ Char```"]
			},
			"ReadCharArray": {
				"descriptions": ["**Reads an array of values**\n\n\n\nreturn - Char[]\n\n```method : public : ReadCharArray() ~ Char[]```"]
			},
			"ReadFloat": {
				"descriptions": ["**Reads a value**\n\n\n\nreturn - Float\n\n```method : public : ReadFloat() ~ Float```"]
			},
			"ReadFloatArray": {
				"descriptions": ["**Reads an array of values**\n\n\n\nreturn - Float[]\n\n```method : public : ReadFloatArray() ~ Float[]```"]
			},
			"ReadInt": {
				"descriptions": ["**Reads a value**\n\n\n\nreturn - Int\n\n```method : public : ReadInt() ~ Int```"]
			},
			"ReadIntArray": {
				"descriptions": ["**Reads an array of values**\n\n\n\nreturn - Int[]\n\n```method : public : ReadIntArray() ~ Int[]```"]
			},
			"ReadObject": {
				"descriptions": ["**Reads an object**\n\n\n\nreturn - Base\n\n```method : public : ReadObject() ~ Base```"]
			},
			"ReadObjectArray": {
				"descriptions": ["**Reads an object array**\n\n\n\nreturn - Base[]\n\n```method : public : ReadObjectArray() ~ Base[]```"]
			}
		}
	},
	"System.IO.InputStream": {
		"description": "An abstract input stream",
		"functions": {
			"Close": {
				"descriptions": ["**Closes the stream**\n\n\n\nreturn - Nil\n\n```method : public : virutal : Close() ~ Nil```"]
			},
			"ReadBuffer": {
				"descriptions": ["**Reads bytes into a byte buffer**\n\n\n\nInt - offset\n\nInt - num\n\nByte[] - buffer\n\nreturn - Int\n\n```method : public : virutal : ReadBuffer(offset:Int, num:Int, buffer:Byte[]) ~ Int```", "**Reads bytes into a character buffer**\n\n\n\nInt - offset\n\nInt - num\n\nChar[] - buffer\n\nreturn - Int\n\n```method : public : virutal : ReadBuffer(offset:Int, num:Int, buffer:Char[]) ~ Int```"]
			},
			"ReadByte": {
				"descriptions": ["**Reads a byte**\n\n\n\nreturn - Byte\n\n```method : public : virutal : ReadByte() ~ Byte```"]
			},
			"ReadLine": {
				"descriptions": ["**Reads a string until a newline or character return is detected**\n\n\n\nreturn - System.String\n\n```method : public : virutal : ReadLine() ~ System.String```"]
			}
		}
	},
	"System.IO.OutputStream": {
		"description": "An abstract output stream",
		"functions": {
			"Close": {
				"descriptions": ["**Closes the stream**\n\n\n\nreturn - Nil\n\n```method : public : virutal : Close() ~ Nil```"]
			},
			"WriteBuffer": {
				"descriptions": ["**Writes bytes from a buffer**\n\n\n\nInt - offset\n\nInt - num\n\nByte[] - buffer\n\nreturn - Int\n\n```method : public : virutal : WriteBuffer(offset:Int, num:Int, buffer:Byte[]) ~ Int```", "**Writes characters from a buffer**\n\n\n\nInt - offset\n\nInt - num\n\nChar[] - buffer\n\nreturn - Int\n\n```method : public : virutal : WriteBuffer(offset:Int, num:Int, buffer:Char[]) ~ Int```"]
			},
			"WriteByte": {
				"descriptions": ["**Writes a byte**\n\n\n\nInt - b\n\nreturn - Bool\n\n```method : public : virutal : WriteByte(b:Int) ~ Bool```"]
			},
			"WriteString": {
				"descriptions": ["**Writes a character string**\n\n\n\nSystem.String - str\n\nreturn - Nil\n\n```method : public : virutal : WriteString(str:System.String) ~ Nil```"]
			}
		}
	},
	"System.IO.Serializer": {
		"description": "Used to serialize objects",
		"functions": {
			"Serialize": {
				"descriptions": ["**Create a byte stream of the objects that have been serialized**\n\n\n\nreturn - Byte[]\n\n```method : public : Serialize() ~ Byte[]```"]
			},
			"Write": {
				"descriptions": ["**Serializes a value**\n\n\n\nBool - b\n\nreturn - Nil\n\n```method : public : Write(b:Bool) ~ Nil```", "**Serializes a value**\n\n\n\nChar - c\n\nreturn - Nil\n\n```method : public : Write(c:Char) ~ Nil```", "**Serializes a value**\n\n\n\nInt - i\n\nreturn - Nil\n\n```method : public : Write(i:Int) ~ Nil```", "**Serializes a value**\n\n\n\nFloat - f\n\nreturn - Nil\n\n```method : public : Write(f:Float) ~ Nil```", "**Serializes a base object**\n\n\n\nBase - o\n\nreturn - Nil\n\n```method : public : Write(o:Base) ~ Nil```", "**Serializes a base object**\n\n\n\nBool[] - b\n\nreturn - Nil\n\n```method : public : Write(b:Bool[]) ~ Nil```", "**Serializes base objects**\n\n\n\nBase[] - o\n\nreturn - Nil\n\n```method : public : Write(o:Base[]) ~ Nil```", "**Serializes a value**\n\n\n\nByte[] - b\n\nreturn - Nil\n\n```method : public : Write(b:Byte[]) ~ Nil```", "**Serializes an array of values**\n\n\n\nChar[] - c\n\nreturn - Nil\n\n```method : public : Write(c:Char[]) ~ Nil```", "**Serializes an array of values**\n\n\n\nInt[] - i\n\nreturn - Nil\n\n```method : public : Write(i:Int[]) ~ Nil```", "**Serializes an array of values**\n\n\n\nFloat[] - f\n\nreturn - Nil\n\n```method : public : Write(f:Float[]) ~ Nil```"]
			}
		}
	},
	"System.IO.Standard": {
		"description": "Provides standard I/O operations",
		"functions": {
			"Error": {
				"descriptions": ["**Writes an error value**\n\n\n\nBool - b\n\nreturn - ConsoleIO\n\n```function : public : Error(b:Bool) ~ ConsoleIO```", "**Writes an error value**\n\n\n\nByte - b\n\nreturn - ConsoleIO\n\n```function : public : Error(b:Byte) ~ ConsoleIO```", "**Writes an error value**\n\n\n\nChar - c\n\nreturn - ConsoleIO\n\n```function : public : Error(c:Char) ~ ConsoleIO```", "**Writes an error value**\n\n\n\nInt - i\n\nreturn - ConsoleIO\n\n```function : public : Error(i:Int) ~ ConsoleIO```", "**Writes an error value**\n\n\n\nFloat - f\n\nreturn - ConsoleIO\n\n```function : public : Error(f:Float) ~ ConsoleIO```", "**Writes an error value**\n\n\n\nChar[] - cc\n\nreturn - ConsoleIO\n\n```function : public : Error(cc:Char[]) ~ ConsoleIO```", "**Writes an error value**\n\n\n\nSystem.String - s\n\nreturn - ConsoleIO\n\n```function : public : Error(s:System.String) ~ ConsoleIO```"]
			},
			"ErrorLine": {
				"descriptions": ["**Writes an error value**\n\n\n\nBool - b\n\nreturn - ConsoleIO\n\n```function : public : ErrorLine(b:Bool) ~ ConsoleIO```", "**Writes an error value**\n\n\n\nByte - b\n\nreturn - ConsoleIO\n\n```function : public : ErrorLine(b:Byte) ~ ConsoleIO```", "**Writes an error value**\n\n\n\nChar - c\n\nreturn - ConsoleIO\n\n```function : public : ErrorLine(c:Char) ~ ConsoleIO```", "**Writes an error value**\n\n\n\nInt - i\n\nreturn - ConsoleIO\n\n```function : public : ErrorLine(i:Int) ~ ConsoleIO```", "**Writes an error value**\n\n\n\nFloat - f\n\nreturn - ConsoleIO\n\n```function : public : ErrorLine(f:Float) ~ ConsoleIO```", "**Writes an error value**\n\n\n\nChar[] - cc\n\nreturn - ConsoleIO\n\n```function : public : ErrorLine(cc:Char[]) ~ ConsoleIO```", "**Writes an error value**\n\n\n\nSystem.String - s\n\nreturn - ConsoleIO\n\n```function : public : ErrorLine(s:System.String) ~ ConsoleIO```", "**Writes an error character return**\n\n\n\nreturn - ConsoleIO\n\n```function : public : ErrorLine() ~ ConsoleIO```"]
			},
			"Print": {
				"descriptions": ["**Writes a value**\n\n\n\nBool - b\n\nreturn - ConsoleIO\n\n```function : public : Print(b:Bool) ~ ConsoleIO```", "**Writes a value**\n\n\n\nByte - b\n\nreturn - ConsoleIO\n\n```function : public : Print(b:Byte) ~ ConsoleIO```", "**Writes a value**\n\n\n\nChar - c\n\nreturn - ConsoleIO\n\n```function : public : Print(c:Char) ~ ConsoleIO```", "**Writes a value**\n\n\n\nInt - i\n\nreturn - ConsoleIO\n\n```function : public : Print(i:Int) ~ ConsoleIO```", "**Writes a value**\n\n\n\nFloat - f\n\nreturn - ConsoleIO\n\n```function : public : Print(f:Float) ~ ConsoleIO```", "**Writes a value**\n\n\n\nChar[] - cc\n\nreturn - ConsoleIO\n\n```function : public : Print(cc:Char[]) ~ ConsoleIO```", "**Writes a value**\n\n\n\nSystem.String - s\n\nreturn - ConsoleIO\n\n```function : public : Print(s:System.String) ~ ConsoleIO```"]
			},
			"PrintLine": {
				"descriptions": ["**Writes a value**\n\n\n\nBool - b\n\nreturn - ConsoleIO\n\n```function : public : PrintLine(b:Bool) ~ ConsoleIO```", "**Writes a value**\n\n\n\nByte - b\n\nreturn - ConsoleIO\n\n```function : public : PrintLine(b:Byte) ~ ConsoleIO```", "**Writes a value**\n\n\n\nChar - c\n\nreturn - ConsoleIO\n\n```function : public : PrintLine(c:Char) ~ ConsoleIO```", "**Writes a value**\n\n\n\nInt - i\n\nreturn - ConsoleIO\n\n```function : public : PrintLine(i:Int) ~ ConsoleIO```", "**Writes a value**\n\n\n\nFloat - f\n\nreturn - ConsoleIO\n\n```function : public : PrintLine(f:Float) ~ ConsoleIO```", "**Writes a value**\n\n\n\nChar[] - cc\n\nreturn - ConsoleIO\n\n```function : public : PrintLine(cc:Char[]) ~ ConsoleIO```", "**Writes a value**\n\n\n\nSystem.String - s\n\nreturn - ConsoleIO\n\n```function : public : PrintLine(s:System.String) ~ ConsoleIO```", "**Prints a character return**\n\n\n\nreturn - ConsoleIO\n\n```function : public : PrintLine() ~ ConsoleIO```"]
			},
			"ReadBuffer": {
				"descriptions": ["**Reads bytes from STDIN**\n\n\n\nInt - offset\n\nInt - num\n\nByte[] - buffer\n\nreturn - Int\n\n```function : public : ReadBuffer(offset:Int, num:Int, buffer:Byte[]) ~ Int```", "**Read characters from STDIN**\n\n\n\nInt - offset\n\nInt - num\n\nChar[] - buffer\n\nreturn - Int\n\n```function : public : ReadBuffer(offset:Int, num:Int, buffer:Char[]) ~ Int```"]
			},
			"ReadLine": {
				"descriptions": ["**Reads a string from STDIN**\n\n\n\nreturn - System.String\n\n```function : public : ReadLine() ~ System.String```"]
			},
			"WriteBuffer": {
				"descriptions": ["**Write a byte buffer to STDOUT**\n\n\n\nInt - offset\n\nInt - num\n\nByte[] - buffer\n\nreturn - Bool\n\n```function : public : WriteBuffer(offset:Int, num:Int, buffer:Byte[]) ~ Bool```", "**Write a character buffer to STDOUT**\n\n\n\nInt - offset\n\nInt - num\n\nChar[] - buffer\n\nreturn - Bool\n\n```function : public : WriteBuffer(offset:Int, num:Int, buffer:Char[]) ~ Bool```"]
			},
			"WriteErrorBuffer": {
				"descriptions": ["**Write a byte buffer to STDERR**\n\n\n\nInt - offset\n\nInt - num\n\nByte[] - buffer\n\nreturn - Bool\n\n```function : public : WriteErrorBuffer(offset:Int, num:Int, buffer:Byte[]) ~ Bool```", "**Write a character buffer to STDERR**\n\n\n\nInt - offset\n\nInt - num\n\nChar[] - buffer\n\nreturn - Bool\n\n```function : public : WriteErrorBuffer(offset:Int, num:Int, buffer:Char[]) ~ Bool```"]
			}
		}
	},
	"System.IO.File.Directory": {
		"description": "Provide file directory operations",
		"functions": {
			"Create": {
				"descriptions": ["**Creates a directory**\n\n\n\nSystem.String - n\n\nreturn - Bool\n\n```function : public : Create(n:System.String) ~ Bool```"]
			},
			"CreatePath": {
				"descriptions": ["**Creates a directory path**\n\n\n\nString - n\n\nreturn - Bool\n\n```function : public : CreatePath(n:String) ~ Bool```"]
			},
			"Exists": {
				"descriptions": ["**Checks to see if the given directory exists**\n\n\n\nSystem.String - n\n\nreturn - Bool\n\n```function : public : Exists(n:System.String) ~ Bool```"]
			},
			"List": {
				"descriptions": ["**List of directory content**\n\n\n\nSystem.String - n\n\nreturn - System.String[]\n\n```function : public : List(n:System.String) ~ System.String[]```"]
			}
		}
	},
	"System.IO.File.File": {
		"description": "Provides file operations",
		"functions": {
			"AccessedTime": {
				"descriptions": ["**Returns the time in which the file was accessed**\n\n\n\nSystem.String - n\n\nreturn - Date\n\n```function : public : AccessedTime(n:System.String) ~ Date```", "**Returns the time in which the file was accessed**\n\n\n\nreturn - Date\n\n```method : public : AccessedTime() ~ Date```", "**Returns the time in which the file was accessed**\n\n\n\nSystem.String - n\n\nBool - gmt\n\nreturn - Date\n\n```function : public : AccessedTime(n:System.String, gmt:Bool) ~ Date```", "**Returns the time in which the file was accessed**\n\n\n\nBool - gmt\n\nreturn - Date\n\n```method : public : AccessedTime(gmt:Bool) ~ Date```"]
			},
			"CreateTime": {
				"descriptions": ["**Returns the time in which the file was created**\n\n\n\nSystem.String - n\n\nreturn - Date\n\n```function : public : CreateTime(n:System.String) ~ Date```", "**Returns the time in which the file was created**\n\n\n\nreturn - Date\n\n```method : public : CreateTime() ~ Date```", "**Returns the time in which the file was created**\n\n\n\nSystem.String - n\n\nBool - gmt\n\nreturn - Date\n\n```function : public : CreateTime(n:System.String, gmt:Bool) ~ Date```", "**Returns the time in which the file was created**\n\n\n\nBool - gmt\n\nreturn - Date\n\n```method : public : CreateTime(gmt:Bool) ~ Date```"]
			},
			"Delete": {
				"descriptions": ["**Deletes a file**\n\n\n\nSystem.String - n\n\nreturn - Bool\n\n```function : public : Delete(n:System.String) ~ Bool```", "**Deletes a file**\n\n\n\nreturn - Bool\n\n```method : public : Delete() ~ Bool```"]
			},
			"Exists": {
				"descriptions": ["**Check to see if a file exists**\n\n\n\nSystem.String - n\n\nreturn - Bool\n\n```function : public : Exists(n:System.String) ~ Bool```", "**Check to see if a file exists**\n\n\n\nreturn - Bool\n\n```method : public : Exists() ~ Bool```"]
			},
			"GetFullName": {
				"descriptions": ["**Gets the full path name for file**\n\n\n\nSystem.String - n\n\nreturn - System.String\n\n```function : public : GetFullName(n:System.String) ~ System.String```", "**Gets the full path name for file**\n\n\n\nreturn - System.String\n\n```method : public : GetFullName() ~ System.String```"]
			},
			"GetName": {
				"descriptions": ["**Gets the file name**\n\n\n\nreturn - String\n\n```method : public : GetName() ~ String```"]
			},
			"GetTempName": {
				"descriptions": ["**Gets a temporary file name**\n\n\n\nreturn - System.String\n\n```function : public : GetTempName() ~ System.String```"]
			},
			"Group": {
				"descriptions": ["**Gets the file group name**\n\n\n\nSystem.String - n\n\nreturn - System.String\n\n```function : public : Group(n:System.String) ~ System.String```", "**Gets the file group name**\n\n\n\nreturn - System.String\n\n```method : public : Group() ~ System.String```"]
			},
			"IsEOF": {
				"descriptions": ["**Check if seek pointer is at the end-of-file**\n\n\n\nreturn - Bool\n\n```method : public : IsEOF() ~ Bool```"]
			},
			"IsOpen": {
				"descriptions": ["**Checks of the file is open**\n\n\n\nreturn - Bool\n\n```method : public : IsOpen() ~ Bool```"]
			},
			"IsReadOnly": {
				"descriptions": ["**Check to see if a file can be read**\n\n\n\nSystem.String - n\n\nreturn - Bool\n\n```function : public : IsReadOnly(n:System.String) ~ Bool```", "**Check to see if a file can be read**\n\n\n\nreturn - Bool\n\n```method : public : IsReadOnly() ~ Bool```"]
			},
			"IsReadWrite": {
				"descriptions": ["**Check to see if a file can be read-only**\n\n\n\nSystem.String - n\n\nreturn - Bool\n\n```function : public : IsReadWrite(n:System.String) ~ Bool```", "**Check to see if a file can be read-only**\n\n\n\nreturn - Bool\n\n```method : public : IsReadWrite() ~ Bool```"]
			},
			"IsWriteOnly": {
				"descriptions": ["**Check to see if a file can be written**\n\n\n\nSystem.String - n\n\nreturn - Bool\n\n```function : public : IsWriteOnly(n:System.String) ~ Bool```", "**Check to see if a file can be written**\n\n\n\nreturn - Bool\n\n```method : public : IsWriteOnly() ~ Bool```"]
			},
			"ModifiedTime": {
				"descriptions": ["**Returns the time in which the file was modified**\n\n\n\nSystem.String - n\n\nreturn - Date\n\n```function : public : ModifiedTime(n:System.String) ~ Date```", "**Returns the time in which the file was modified**\n\n\n\nSystem.String - n\n\nBool - gmt\n\nreturn - Date\n\n```function : public : ModifiedTime(n:System.String, gmt:Bool) ~ Date```"]
			},
			"New": {
				"descriptions": ["**Default constructor**\n\n\n\nSystem.String - name\n\n```New(name:System.String)```"]
			},
			"Owner": {
				"descriptions": ["**Gets the file owner name**\n\n\n\nSystem.String - n\n\nreturn - System.String\n\n```function : public : Owner(n:System.String) ~ System.String```", "**Gets the file owner name**\n\n\n\nreturn - System.String\n\n```method : public : Owner() ~ System.String```"]
			},
			"Rename": {
				"descriptions": ["**Renames a file**\n\n\n\nSystem.String - o\n\nSystem.String - n\n\nreturn - Bool\n\n```function : public : Rename(o:System.String, n:System.String) ~ Bool```"]
			},
			"Rewind": {
				"descriptions": ["**Rewinds the seek pointer**\n\n\n\nreturn - Nil\n\n```method : public : Rewind() ~ Nil```"]
			},
			"Seek": {
				"descriptions": ["**Seeks to a point in the file**\n\n\n\nInt - p\n\nreturn - Bool\n\n```method : public : Seek(p:Int) ~ Bool```"]
			},
			"Size": {
				"descriptions": ["**Returns the size of the file**\n\n\n\nSystem.String - n\n\nreturn - Int\n\n```function : public : Size(n:System.String) ~ Int```", "**Returns the size of the file**\n\n\n\nreturn - Int\n\n```method : public : Size() ~ Int```"]
			}
		}
	},
	"System.IO.File.FileReader": {
		"description": "Supports file read operations",
		"functions": {
			"Close": {
				"descriptions": ["**Closes the file**\n\n\n\nreturn - Nil\n\n```method : public : Close() ~ Nil```"]
			},
			"New": {
				"descriptions": ["**Default constructor.**\n\n\n\nSystem.String - name\n\n```New(name:System.String)```"]
			},
			"ReadBinaryFile": {
				"descriptions": ["**Reads a file's contents into byte array**\n\n\n\nString - name\n\nreturn - Byte[]\n\n```function : public : ReadBinaryFile(name:String) ~ Byte[]```"]
			},
			"ReadBuffer": {
				"descriptions": ["**Reads bytes into a byte buffer**\n\n\n\nInt - offset\n\nInt - num\n\nChar[] - buffer\n\nreturn - Int\n\n```method : public : ReadBuffer(offset:Int, num:Int, buffer:Char[]) ~ Int```", "**Reads bytes into a character buffer**\n\n\n\nInt - offset\n\nInt - num\n\nByte[] - buffer\n\nreturn - Int\n\n```method : public : ReadBuffer(offset:Int, num:Int, buffer:Byte[]) ~ Int```"]
			},
			"ReadByte": {
				"descriptions": ["**Reads a byte**\n\n\n\nreturn - Byte\n\n```method : public : ReadByte() ~ Byte```"]
			},
			"ReadFile": {
				"descriptions": ["**Reads a file's contents into a string**\n\n\n\nString - name\n\nreturn - String\n\n```function : public : ReadFile(name:String) ~ String```"]
			},
			"ReadLine": {
				"descriptions": ["**Reads a string until a newline or character return is detected**\n\n\n\nreturn - System.String\n\n```method : public : ReadLine() ~ System.String```"]
			}
		}
	},
	"System.IO.File.FileWriter": {
		"description": "Supports file write operations",
		"functions": {
			"Close": {
				"descriptions": ["**Closes a file**\n\n\n\nreturn - Nil\n\n```method : public : Close() ~ Nil```"]
			},
			"Flush": {
				"descriptions": ["**Flushes the file buffer**\n\n\n\nreturn - Nil\n\n```method : public : Flush() ~ Nil```"]
			},
			"New": {
				"descriptions": ["**Opens a new file.**\n\n\n\nSystem.String - name\n\n```New(name:System.String)```", "**Opens a new file or appends to an existing one.**\n\n\n\nSystem.String - name\n\nBool - append\n\n```New(name:System.String, append:Bool)```"]
			},
			"Temp": {
				"descriptions": ["**Creates a temporary file**\n\n\n\nreturn - FileWriter\n\n```function : public : Temp() ~ FileWriter```"]
			},
			"WriteBuffer": {
				"descriptions": ["**Writes bytes from a buffer**\n\n\n\nInt - offset\n\nInt - num\n\nByte[] - buffer\n\nreturn - Int\n\n```method : public : WriteBuffer(offset:Int, num:Int, buffer:Byte[]) ~ Int```", "**Writes characters from a buffer**\n\n\n\nInt - offset\n\nInt - num\n\nChar[] - buffer\n\nreturn - Int\n\n```method : public : WriteBuffer(offset:Int, num:Int, buffer:Char[]) ~ Int```", "**Writes bytes from a buffer**\n\n\n\nByte[] - buffer\n\nreturn - Int\n\n```method : public : WriteBuffer(buffer:Byte[]) ~ Int```", "**Writes characters from a buffer**\n\n\n\nChar[] - buffer\n\nreturn - Int\n\n```method : public : WriteBuffer(buffer:Char[]) ~ Int```"]
			},
			"WriteByte": {
				"descriptions": ["**Writes a byte**\n\n\n\nInt - b\n\nreturn - Bool\n\n```method : public : WriteByte(b:Int) ~ Bool```"]
			},
			"WriteFile": {
				"descriptions": ["**Write a file's contents into a string**\n\n\n\nString - name\n\nString - content\n\nreturn - Bool\n\n```function : public : WriteFile(name:String, content:String) ~ Bool```"]
			},
			"WriteString": {
				"descriptions": ["**Writes a character string**\n\n\n\nSystem.String - str\n\nreturn - Nil\n\n```method : public : WriteString(str:System.String) ~ Nil```"]
			}
		}
	},
	"System.IO.File.Logger": {
		"description": "Logs messages to temporary files",
		"functions": {
			"ClearError": {
				"descriptions": ["**Clears the error log file**\n\n\n\nreturn - Nil\n\n```method : public : ClearError() ~ Nil```"]
			},
			"ClearInfo": {
				"descriptions": ["**Clears the info log file**\n\n\n\nreturn - Nil\n\n```method : public : ClearInfo() ~ Nil```"]
			},
			"ClearWarn": {
				"descriptions": ["**Clears the warning log file**\n\n\n\nreturn - Nil\n\n```method : public : ClearWarn() ~ Nil```"]
			},
			"Error": {
				"descriptions": ["**Logs an error message**\n\n\n\nString - message\n\nreturn - Bool\n\n```method : public : Error(message:String) ~ Bool```"]
			},
			"GetDirectory": {
				"descriptions": ["**Gets the logging directory**\n\n\n\nreturn - String\n\n```method : public : GetDirectory() ~ String```"]
			},
			"GetErrorFile": {
				"descriptions": ["**Gets path to error file**\n\n\n\nreturn - String\n\n```method : public : GetErrorFile() ~ String```"]
			},
			"GetInfoFile": {
				"descriptions": ["**Gets path to information file**\n\n\n\nreturn - String\n\n```method : public : GetInfoFile() ~ String```"]
			},
			"GetWarnFile": {
				"descriptions": ["**Gets path to warning file**\n\n\n\nreturn - String\n\n```method : public : GetWarnFile() ~ String```"]
			},
			"Info": {
				"descriptions": ["**Logs an informational message**\n\n\n\nString - message\n\nreturn - Bool\n\n```method : public : Info(message:String) ~ Bool```"]
			},
			"Instance": {
				"descriptions": ["**Gets an instance of the logger**\n\n\n\nreturn - Logger\n\n```function : public : Instance() ~ Logger```"]
			},
			"Warn": {
				"descriptions": ["**Logs a warning message**\n\n\n\nString - message\n\nreturn - Bool\n\n```method : public : Warn(message:String) ~ Bool```"]
			}
		}
	},
	"System.IO.Net.TCPSecureSocket": {
		"description": "Secure SSL TCP/IP socket",
		"functions": {
			"Close": {
				"descriptions": ["**Closes the socket**\n\n\n\nreturn - Nil\n\n```method : public : Close() ~ Nil```"]
			},
			"Flush": {
				"descriptions": ["**Flushes the output buffer. This is a no-opt given this socket is not backed by an output buffer.**\n\n\n\nreturn - Nil\n\n```method : public : Flush() ~ Nil```"]
			},
			"GetAddress": {
				"descriptions": ["**Returns the connected network address**\n\n\n\nreturn - String\n\n```method : public : GetAddress() ~ String```"]
			},
			"GetCert": {
				"descriptions": ["**Gets the X.509 certificate's subject name**\n\n\n\nreturn - String\n\n```method : public : GetCert() ~ String```"]
			},
			"GetPort": {
				"descriptions": ["**Returns the connected network port**\n\n\n\nreturn - Int\n\n```method : public : GetPort() ~ Int```"]
			},
			"IsOpen": {
				"descriptions": ["**Returns rather the socket is open**\n\n\n\nreturn - Bool\n\n```method : public : IsOpen() ~ Bool```"]
			},
			"New": {
				"descriptions": ["**Default constructor**\n\n\n\nSystem.String - address\n\nInt - port\n\n```New(address:System.String, port:Int)```"]
			},
			"ReadBuffer": {
				"descriptions": ["**Reads bytes into a byte buffer**\n\n\n\nInt - offset\n\nInt - num\n\nByte[] - buffer\n\nreturn - Int\n\n```method : public : ReadBuffer(offset:Int, num:Int, buffer:Byte[]) ~ Int```", "**Reads bytes into a character buffer**\n\n\n\nInt - offset\n\nInt - num\n\nChar[] - buffer\n\nreturn - Int\n\n```method : public : ReadBuffer(offset:Int, num:Int, buffer:Char[]) ~ Int```"]
			},
			"ReadByte": {
				"descriptions": ["**Reads a byte**\n\n\n\nreturn - Byte\n\n```method : public : ReadByte() ~ Byte```"]
			},
			"ReadLine": {
				"descriptions": ["**Reads a string until a newline or character return is detected**\n\n\n\nreturn - System.String\n\n```method : public : native : ReadLine() ~ System.String```"]
			},
			"WriteBuffer": {
				"descriptions": ["**Writes bytes from a byte buffer**\n\n\n\nInt - offset\n\nInt - num\n\nByte[] - buffer\n\nreturn - Int\n\n```method : public : WriteBuffer(offset:Int, num:Int, buffer:Byte[]) ~ Int```", "**Writes characters from a character buffer**\n\n\n\nInt - offset\n\nInt - num\n\nChar[] - buffer\n\nreturn - Int\n\n```method : public : WriteBuffer(offset:Int, num:Int, buffer:Char[]) ~ Int```"]
			},
			"WriteByte": {
				"descriptions": ["**Writes a byte**\n\n\n\nInt - b\n\nreturn - Bool\n\n```method : public : WriteByte(b:Int) ~ Bool```"]
			},
			"WriteString": {
				"descriptions": ["**Writes a character string**\n\n\n\nSystem.String - str\n\nreturn - Nil\n\n```method : public : WriteString(str:System.String) ~ Nil```"]
			}
		}
	},
	"System.IO.Net.TCPSocket": {
		"description": "TCP/IP socket",
		"functions": {
			"Close": {
				"descriptions": ["**Closes the socket**\n\n\n\nreturn - Nil\n\n```method : public : Close() ~ Nil```"]
			},
			"Flush": {
				"descriptions": ["**Flushes the output buffer. This is a no-opt given this socket is not backed by an output buffer.**\n\n\n\nreturn - Nil\n\n```method : public : Flush() ~ Nil```"]
			},
			"GetAddress": {
				"descriptions": ["**Returns the connected network address**\n\n\n\nreturn - String\n\n```method : public : GetAddress() ~ String```"]
			},
			"GetPort": {
				"descriptions": ["**Returns the connected network port**\n\n\n\nreturn - Int\n\n```method : public : GetPort() ~ Int```"]
			},
			"HostName": {
				"descriptions": ["**Reads the host name**\n\n\n\nreturn - System.String\n\n```function : public : HostName() ~ System.String```"]
			},
			"IsOpen": {
				"descriptions": ["**Returns rather the socket is open**\n\n\n\nreturn - Bool\n\n```method : public : IsOpen() ~ Bool```"]
			},
			"New": {
				"descriptions": ["**Default constructor**\n\n\n\nSystem.String - address\n\nInt - port\n\n```New(address:System.String, port:Int)```"]
			},
			"ReadBuffer": {
				"descriptions": ["**Reads bytes into a byte buffer**\n\n\n\nInt - offset\n\nInt - num\n\nByte[] - buffer\n\nreturn - Int\n\n```method : public : ReadBuffer(offset:Int, num:Int, buffer:Byte[]) ~ Int```", "**Reads bytes into a character buffer**\n\n\n\nInt - offset\n\nInt - num\n\nChar[] - buffer\n\nreturn - Int\n\n```method : public : ReadBuffer(offset:Int, num:Int, buffer:Char[]) ~ Int```"]
			},
			"ReadByte": {
				"descriptions": ["**Reads a byte**\n\n\n\nreturn - Byte\n\n```method : public : ReadByte() ~ Byte```"]
			},
			"ReadLine": {
				"descriptions": ["**Reads a string until a newline or character return is detected**\n\n\n\nreturn - System.String\n\n```method : public : ReadLine() ~ System.String```"]
			},
			"Resolve": {
				"descriptions": ["**List of resolved IP addresses**\n\n\n\nSystem.String - n\n\nreturn - System.String[]\n\n```function : public : Resolve(n:System.String) ~ System.String[]```"]
			},
			"WriteBuffer": {
				"descriptions": ["**Writes bytes from a byte buffer**\n\n\n\nInt - offset\n\nInt - num\n\nByte[] - buffer\n\nreturn - Int\n\n```method : public : WriteBuffer(offset:Int, num:Int, buffer:Byte[]) ~ Int```", "**Writes characters from a character buffer**\n\n\n\nInt - offset\n\nInt - num\n\nChar[] - buffer\n\nreturn - Int\n\n```method : public : WriteBuffer(offset:Int, num:Int, buffer:Char[]) ~ Int```"]
			},
			"WriteByte": {
				"descriptions": ["**Writes a byte**\n\n\n\nInt - b\n\nreturn - Bool\n\n```method : public : WriteByte(b:Int) ~ Bool```"]
			},
			"WriteString": {
				"descriptions": ["**Writes a character string**\n\n\n\nSystem.String - str\n\nreturn - Nil\n\n```method : public : WriteString(str:System.String) ~ Nil```"]
			}
		}
	},
	"System.IO.Net.TCPSocketServer": {
		"description": "TCP/IP Server socket",
		"functions": {
			"Accept": {
				"descriptions": ["**Accepts a client connection**\n\n\n\nreturn - TCPSocket\n\n```method : public : Accept() ~ TCPSocket```"]
			},
			"Close": {
				"descriptions": ["**Closes the server socket**\n\n\n\nreturn - Nil\n\n```method : public : Close() ~ Nil```"]
			},
			"Listen": {
				"descriptions": ["**Listens for incoming client connections**\n\n\n\nInt - backlog\n\nreturn - Bool\n\n```method : public : Listen(backlog:Int) ~ Bool```"]
			},
			"New": {
				"descriptions": ["**Default constructor**\n\n\n\nInt - port\n\n```New(port:Int)```"]
			}
		}
	},
	"System.Introspection.Class": {
		"description": "Represents a runtime class",
		"functions": {
			"GetMethodNumber": {
				"descriptions": ["**Returns the number of methods associated with the class**\n\n\n\nreturn - Int\n\n```method : public : GetMethodNumber() ~ Int```"]
			},
			"GetMethods": {
				"descriptions": ["**Returns an array of associated methods**\n\n\n\nreturn - Method[]\n\n```method : public : GetMethods() ~ Method[]```"]
			},
			"GetName": {
				"descriptions": ["**Returns the type name of the class**\n\n\n\nreturn - String\n\n```method : public : GetName() ~ String```"]
			},
			"Instance": {
				"descriptions": ["**Creates an instance of the given class. The class must have a zero-parameter constructor to support this operation.**\n\n\n\nSystem.String - name\n\nreturn - System.Base\n\n```function : public : Instance(name:System.String) ~ System.Base```"]
			},
			"IsLoaded": {
				"descriptions": ["**Checks rather the class has been loaded**\n\n\n\nreturn - Bool\n\n```method : public : IsLoaded() ~ Bool```"]
			}
		}
	},
	"System.Introspection.DataType": {
		"description": "Represents a runtime data type",
		"functions": {
			"GetClassName": {
				"descriptions": ["**Returns array the class type name**\n\n\n\nreturn - String\n\n```method : public : GetClassName() ~ String```"]
			},
			"GetDimension": {
				"descriptions": ["**Returns array dimension size of the data type. Will return 0 if type is a scalar**\n\n\n\nreturn - Int\n\n```method : public : GetDimension() ~ Int```"]
			},
			"GetType": {
				"descriptions": ["**Returns the data type's type**\n\n\n\nreturn - TypeId\n\n```method : public : GetType() ~ TypeId```"]
			}
		}
	},
	"System.Introspection.Method": {
		"description": "Represents a runtime method or function",
		"functions": {
			"GetClass": {
				"descriptions": ["**Returns the class associated with this method**\n\n\n\nreturn - Class\n\n```method : public : GetClass() ~ Class```"]
			},
			"GetName": {
				"descriptions": ["**Returns the name of the method**\n\n\n\nreturn - String\n\n```method : public : GetName() ~ String```"]
			},
			"GetParameters": {
				"descriptions": ["**Returns an array of method parameters**\n\n\n\nreturn - DataType[]\n\n```method : public : GetParameters() ~ DataType[]```"]
			},
			"GetReturn": {
				"descriptions": ["**Returns the method's return type**\n\n\n\nreturn - DataType\n\n```method : public : GetReturn() ~ DataType```"]
			}
		}
	},
	"System.Matrix.Matrix2D": {
		"description": "Encapsulates 2D matrix operations",
		"functions": {
			"Add": {
				"descriptions": ["**Adds a constant to a matrix**\n\n\n\nFloat - x\n\nFloat[,] - b\n\nreturn - Float[,]\n\n```function : public : native : Add(x:Float, b:Float[,]) ~ Float[,]```", "**Adds a constant to a matrix**\n\n\n\nFloat[,] - b\n\nFloat - x\n\nreturn - Float[,]\n\n```function : public : native : Add(b:Float[,], x:Float) ~ Float[,]```", "**Adds two matrices**\n\n\n\nFloat[,] - a\n\nFloat[,] - b\n\nreturn - Float[,]\n\n```function : public : native : Add(a:Float[,], b:Float[,]) ~ Float[,]```"]
			},
			"Concatenate": {
				"descriptions": ["**Concatenates two matrix**\n\n\n\nFloat[,] - a\n\nFloat[,] - b\n\nBool - is_row\n\nreturn - Float[,]\n\n```function : public : Concatenate(a:Float[,], b:Float[,], is_row:Bool) ~ Float[,]```"]
			},
			"Divide": {
				"descriptions": ["**Divides a constant by a matrix**\n\n\n\nFloat[,] - b\n\nFloat - x\n\nreturn - Float[,]\n\n```function : public : native : Divide(b:Float[,], x:Float) ~ Float[,]```", "**Divides a constant by a matrix**\n\n\n\nFloat - x\n\nFloat[,] - b\n\nreturn - Float[,]\n\n```function : public : native : Divide(x:Float, b:Float[,]) ~ Float[,]```", "**Divides two matrices**\n\n\n\nFloat[,] - a\n\nFloat[,] - b\n\nreturn - Float[,]\n\n```function : public : native : Divide(a:Float[,], b:Float[,]) ~ Float[,]```"]
			},
			"Dot": {
				"descriptions": ["**Calculates the dot product.**\n\n\n\nFloat[,] - a\n\nFloat[,] - b\n\nreturn - Float[,]\n\n```function : public : native : Dot(a:Float[,], b:Float[,]) ~ Float[,]```"]
			},
			"DotSigmoid": {
				"descriptions": ["**Calculates the Dot Product applying while applying the Sigmoid function to all elements**\n\n\n\nFloat[,] - a\n\nFloat[,] - b\n\nreturn - Float[,]\n\n```function : public : native : DotSigmoid(a:Float[,], b:Float[,]) ~ Float[,]```"]
			},
			"Multiple": {
				"descriptions": ["**Multiplies a constant by a matrix**\n\n\n\nFloat - x\n\nFloat[,] - b\n\nreturn - Float[,]\n\n```function : public : native : Multiple(x:Float, b:Float[,]) ~ Float[,]```", "**Multiplies a constant by a matrix**\n\n\n\nFloat[,] - b\n\nFloat - x\n\nreturn - Float[,]\n\n```function : public : native : Multiple(b:Float[,], x:Float) ~ Float[,]```", "**Multiplies two matrices using the Hadamard rule**\n\n\n\nFloat[,] - a\n\nFloat[,] - b\n\nreturn - Float[,]\n\n```function : public : native : Multiple(a:Float[,], b:Float[,]) ~ Float[,]```"]
			},
			"Random": {
				"descriptions": ["**Generates a random 2D array of values from 0.0 to 1.0**\n\n\n\nInt - rows\n\nInt - cols\n\nreturn - Float[,]\n\n```function : public : Random(rows:Int, cols:Int) ~ Float[,]```"]
			},
			"RandomNormal": {
				"descriptions": ["**Generates a random normal distribution of values**\n\n\n\nFloat - mean\n\nFloat - variance\n\nInt - rows\n\nInt - cols\n\nreturn - Float[,]\n\n```function : public : RandomNormal(mean:Float, variance:Float, rows:Int, cols:Int) ~ Float[,]```", "**Generates a random normal value**\n\n\n\nFloat - mean\n\nFloat - variance\n\nreturn - Float\n\n```function : public : RandomNormal(mean:Float, variance:Float) ~ Float```"]
			},
			"Sigmoid": {
				"descriptions": ["**Sigmoid 'S' function**\n\n\n\nFloat - x\n\nreturn - Float\n\n```function : public : native : Sigmoid(x:Float) ~ Float```", "**Applies the Sigmoid function to all elements**\n\n\n\nFloat[,] - b\n\nreturn - Float[,]\n\n```function : public : native : Sigmoid(b:Float[,]) ~ Float[,]```"]
			},
			"Split": {
				"descriptions": ["**Splits a matrix**\n\n\n\nFloat[,] - b\n\nInt - offset\n\nInt - count\n\nBool - is_row\n\nreturn - Float[,]\n\n```function : public : Split(b:Float[,], offset:Int, count:Int, is_row:Bool) ~ Float[,]```"]
			},
			"Subtract": {
				"descriptions": ["**Subtracts a constant from a matrix**\n\n\n\nFloat - x\n\nFloat[,] - b\n\nreturn - Float[,]\n\n```function : public : native : Subtract(x:Float, b:Float[,]) ~ Float[,]```", "**Adds a constant to a matrix**\n\n\n\nFloat[,] - b\n\nFloat - x\n\nreturn - Float[,]\n\n```function : public : native : Subtract(b:Float[,], x:Float) ~ Float[,]```", "**Subtracts two matrices**\n\n\n\nFloat[,] - a\n\nFloat[,] - b\n\nreturn - Float[,]\n\n```function : public : native : Subtract(a:Float[,], b:Float[,]) ~ Float[,]```"]
			},
			"Transpose": {
				"descriptions": ["**Transpose a matrix swapping rows and columns.**\n\n\n\nFloat[,] - a\n\nreturn - Float[,]\n\n```function : public : native : Transpose(a:Float[,]) ~ Float[,]```"]
			}
		}
	},
	"System.Time.Date": {
		"description": "Provides date and time functionality",
		"functions": {
			"AddDays": {
				"descriptions": ["**Add days to the date**\n\n\n\nInt - value\n\nreturn - Nil\n\n```method : public : AddDays(value:Int) ~ Nil```"]
			},
			"AddHours": {
				"descriptions": ["**Add hours to the date**\n\n\n\nInt - value\n\nreturn - Nil\n\n```method : public : AddHours(value:Int) ~ Nil```"]
			},
			"AddMinutes": {
				"descriptions": ["**Add minutes to the date**\n\n\n\nInt - value\n\nreturn - Nil\n\n```method : public : AddMinutes(value:Int) ~ Nil```"]
			},
			"AddSeconds": {
				"descriptions": ["**Add seconds to the date**\n\n\n\nInt - value\n\nreturn - Nil\n\n```method : public : AddSeconds(value:Int) ~ Nil```"]
			},
			"Clone": {
				"descriptions": ["**Clones the object instance**\n\n\n\nreturn - System.Compare\n\n```method : public : Clone() ~ System.Compare```"]
			},
			"Compare": {
				"descriptions": ["**Compares two dates**\n\n\n\nSystem.Compare - rhs\n\nreturn - Int\n\n```method : public : Compare(rhs:System.Compare) ~ Int```"]
			},
			"GetDay": {
				"descriptions": ["**Returns the day**\n\n\n\nreturn - Int\n\n```method : public : GetDay() ~ Int```"]
			},
			"GetDayName": {
				"descriptions": ["**Returns name of the day**\n\n\n\nreturn - String\n\n```method : public : GetDayName() ~ String```"]
			},
			"GetHours": {
				"descriptions": ["**Returns the hours**\n\n\n\nreturn - Int\n\n```method : public : GetHours() ~ Int```"]
			},
			"GetMinutes": {
				"descriptions": ["**Returns the minutes**\n\n\n\nreturn - Int\n\n```method : public : GetMinutes() ~ Int```"]
			},
			"GetMonth": {
				"descriptions": ["**Returns the month**\n\n\n\nreturn - Int\n\n```method : public : GetMonth() ~ Int```"]
			},
			"GetMonthName": {
				"descriptions": ["**Returns name of the month**\n\n\n\nreturn - String\n\n```method : public : GetMonthName() ~ String```"]
			},
			"GetSeconds": {
				"descriptions": ["**Returns the seconds**\n\n\n\nreturn - Int\n\n```method : public : GetSeconds() ~ Int```"]
			},
			"GetYear": {
				"descriptions": ["**Returns the year**\n\n\n\nreturn - Int\n\n```method : public : GetYear() ~ Int```"]
			},
			"HashID": {
				"descriptions": ["**Returns a hash ID for the given class**\n\n\n\nreturn - Int\n\n```method : public : HashID() ~ Int```"]
			},
			"New": {
				"descriptions": ["**Default constructor**\n\n\n\n```New()```", "**Constructor**\n\n\n\nBool - gmt\n\n```New(gmt:Bool)```", "**Constructor, sets time to midnight of the given day**\n\n\n\nInt - day\n\nInt - month\n\nInt - year\n\nBool - gmt\n\n```New(day:Int, month:Int, year:Int, gmt:Bool)```", "**Constructor**\n\n\n\nInt - day\n\nInt - month\n\nInt - year\n\nInt - hours\n\nInt - mins\n\nInt - secs\n\nBool - gmt\n\n```New(day:Int, month:Int, year:Int, hours:Int, mins:Int, secs:Int, gmt:Bool)```"]
			},
			"ToShortString": {
				"descriptions": ["**Creates a shortened string representation of the date**\n\n\n\nreturn - String\n\n```method : public : ToShortString() ~ String```"]
			},
			"ToString": {
				"descriptions": ["**Creates a string representation of the date**\n\n\n\nreturn - String\n\n```method : public : ToString() ~ String```"]
			}
		}
	},
	"System.Time.Timer": {
		"description": "Provides elapsed time",
		"functions": {
			"End": {
				"descriptions": ["**Ends the timer**\n\n\n\nreturn - Nil\n\n```method : public : End() ~ Nil```"]
			},
			"GetElapsedTime": {
				"descriptions": ["**Gets the elapsed time in seconds**\n\n\n\nreturn - Float\n\n```method : public : GetElapsedTime() ~ Float```"]
			},
			"Start": {
				"descriptions": ["**Starts the timer**\n\n\n\nreturn - Nil\n\n```method : public : Start() ~ Nil```"]
			}
		}
	}}