{
"Collection.Generic.BackwardIterator": {
		"description": "Backward iterator",
		"functions": {
			"Get": {
				"descriptions": ["**Gets the value that's currently pointed to**\n\n\n\nreturn: H\n\n```method : public : Get() ~ H```"]
			},
			"More": {
				"descriptions": ["**Checks to see the pointer can be advanced Backward**\n\n\n\nreturn: Bool\n\n```method : public : More() ~ Bool```"]
			},
			"Next": {
				"descriptions": ["**Advances the pointer Backward**\n\n\n\nreturn: Nil\n\n```method : public : Next() ~ Nil```"]
			},
			"Remove": {
				"descriptions": ["**Removes the element at the pointer position**\n\n\n\nreturn: Nil\n\n```method : public : Remove() ~ Nil```"]
			}
		}
	},
	"Collection.Generic.Cache": {
		"description": "Object MRU/LRU cache",
		"functions": {
			"Empty": {
				"descriptions": ["**Clears the vector**\n\n\n\nreturn: Nil\n\n```method : public : Empty() ~ Nil```"]
			},
			"Find": {
				"descriptions": ["**Searches for a value in cache**\n\n\n\nkey - K\n\nreturn: S\n\n```method : public : Find(key:K) ~ S```"]
			},
			"GetKeyValues": {
				"descriptions": ["**Gets a collection of key/value pairs**\n\n\n\nreturn: Vector&lt;Pair&gt;\n\n```method : public : GetKeyValues() ~ Vector&lt;Pair&gt;```"]
			},
			"GetKeys": {
				"descriptions": ["**Get a collection of keys**\n\n\n\nreturn: Vector&lt;K&gt;\n\n```method : public : GetKeys() ~ Vector&lt;K&gt;```"]
			},
			"GetValues": {
				"descriptions": ["**Gets a collection of values**\n\n\n\nreturn: Vector&lt;S&gt;\n\n```method : public : GetValues() ~ Vector&lt;S&gt;```"]
			},
			"Has": {
				"descriptions": ["**Checks for a value in a cache**\n\n\n\nkey - K\n\nreturn: Bool\n\n```method : public : Has(key:K) ~ Bool```"]
			},
			"Insert": {
				"descriptions": ["**Inserts a value into the hash**\n\n\n\nkey - K\n\nvalue - S\n\nreturn: Bool\n\n```method : public : Insert(key:K, value:S) ~ Bool```"]
			},
			"IsEmpty": {
				"descriptions": ["**Checks to see if the vector is empty**\n\n\n\nreturn: Bool\n\n```method : public : IsEmpty() ~ Bool```"]
			},
			"New": {
				"descriptions": ["**Default constructor**\n\n\n\ntype - Cache-&gt;Type\n\nmax - Int\n\n```New(type:Cache-&gt;Type, max:Int)```"]
			},
			"Remove": {
				"descriptions": ["**Removes a value from the cache**\n\n\n\nkey - K\n\nreturn: Bool\n\n```method : public : Remove(key:K) ~ Bool```"]
			},
			"Size": {
				"descriptions": ["**Size of cache**\n\n\n\nreturn: Int\n\n```method : public : Size() ~ Int```"]
			}
		}
	},
	"Collection.Generic.CompareBackwardIterator": {
		"description": "Backward iterator of comparables",
		"functions": {
			"Get": {
				"descriptions": ["**Gets the value that's currently pointed to**\n\n\n\nreturn: H\n\n```method : public : Get() ~ H```"]
			},
			"More": {
				"descriptions": ["**Checks to see the pointer can be advanced Backward**\n\n\n\nreturn: Bool\n\n```method : public : More() ~ Bool```"]
			},
			"Next": {
				"descriptions": ["**Advances the pointer Backward**\n\n\n\nreturn: Nil\n\n```method : public : Next() ~ Nil```"]
			},
			"Remove": {
				"descriptions": ["**Removes the element at the pointer position**\n\n\n\nreturn: Nil\n\n```method : public : Remove() ~ Nil```"]
			}
		}
	},
	"Collection.Generic.CompareForwardIterator": {
		"description": "Forward iterator of comparables",
		"functions": {
			"Get": {
				"descriptions": ["**Gets the value that's currently pointed to**\n\n\n\nreturn: H\n\n```method : public : Get() ~ H```"]
			},
			"More": {
				"descriptions": ["**Checks to see the pointer can be advanced**\n\n\n\nreturn: Bool\n\n```method : public : More() ~ Bool```"]
			},
			"Next": {
				"descriptions": ["**Advances the pointer**\n\n\n\nreturn: Nil\n\n```method : public : Next() ~ Nil```"]
			},
			"Remove": {
				"descriptions": ["**Removes the element at the pointer position**\n\n\n\nreturn: Nil\n\n```method : public : Remove() ~ Nil```"]
			}
		}
	},
	"Collection.Generic.CompareList": {
		"description": "List of comparable generics",
		"functions": {
			"AddBack": {
				"descriptions": ["**Adds a value to the end**\n\n\n\nvalue - H\n\nreturn: Nil\n\n```method : public : native : AddBack(value:H) ~ Nil```"]
			},
			"AddFront": {
				"descriptions": ["**Adds a value to the front**\n\n\n\nvalue - H\n\nreturn: Nil\n\n```method : public : native : AddFront(value:H) ~ Nil```"]
			},
			"Back": {
				"descriptions": ["**Returns the last element in the list**\n\n\n\nreturn: H\n\n```method : public : Back() ~ H```"]
			},
			"BackwardIterator": {
				"descriptions": ["**Instance of a backward iterator**\n\n\n\nreturn: CompareBackwardIterator&lt;H&gt;\n\n```method : public : BackwardIterator() ~ CompareBackwardIterator&lt;H&gt;```"]
			},
			"Empty": {
				"descriptions": ["**Clears the list**\n\n\n\nreturn: Nil\n\n```method : public : Empty() ~ Nil```"]
			},
			"Filter": {
				"descriptions": ["**Uses the given function to filter out values**\n\n\n\nf - (H)~Bool\n\nreturn: CompareList&lt;H&gt;\n\n```method : public : Filter(f:(H)~Bool) ~ CompareList&lt;H&gt;```"]
			},
			"Find": {
				"descriptions": ["**Finds a value in the list and sets the pointer**\n\n\n\nvalue - H\n\nreturn: H\n\n```method : public : Find(value:H) ~ H```"]
			},
			"Forward": {
				"descriptions": ["**Moves the pointer to the end of the list**\n\n\n\nreturn: Nil\n\n```method : public : Forward() ~ Nil```"]
			},
			"ForwardIterator": {
				"descriptions": ["**Instance of a forward iterator**\n\n\n\nreturn: CompareForwardIterator&lt;H&gt;\n\n```method : public : ForwardIterator() ~ CompareForwardIterator&lt;H&gt;```"]
			},
			"Front": {
				"descriptions": ["**Returns the first element in the list**\n\n\n\nreturn: H\n\n```method : public : Front() ~ H```"]
			},
			"Get": {
				"descriptions": ["**Gets the value that's currently pointed to**\n\n\n\nreturn: H\n\n```method : public : Get() ~ H```"]
			},
			"Has": {
				"descriptions": ["**Searches for a value**\n\n\n\nvalue - H\n\nreturn: Bool\n\n```method : public : Has(value:H) ~ Bool```"]
			},
			"Insert": {
				"descriptions": ["**Inserts a value into the list based upon the pointer location**\n\n\n\nvalue - H\n\nreturn: Bool\n\n```method : public : native : Insert(value:H) ~ Bool```"]
			},
			"IsBack": {
				"descriptions": ["**Checks to see if the pointer is at the end of the list**\n\n\n\nreturn: Bool\n\n```method : public : IsBack() ~ Bool```"]
			},
			"IsEmpty": {
				"descriptions": ["**Checks to see if the list is empty**\n\n\n\nreturn: Bool\n\n```method : public : IsEmpty() ~ Bool```"]
			},
			"IsFront": {
				"descriptions": ["**Checks to see if the pointer is at the front of the list**\n\n\n\nreturn: Bool\n\n```method : public : IsFront() ~ Bool```"]
			},
			"Map": {
				"descriptions": ["**Maps the given function to each value in the list**\n\n\n\nf - (H)~H\n\nreturn: CompareList&lt;H&gt;\n\n```method : public : Map(f:(H)~H) ~ CompareList&lt;H&gt;```"]
			},
			"More": {
				"descriptions": ["**Checks to see the pointer can be advanced**\n\n\n\nreturn: Bool\n\n```method : public : More() ~ Bool```"]
			},
			"New": {
				"descriptions": ["**Default constructor**\n\n\n\n```New()```"]
			},
			"Next": {
				"descriptions": ["**Advances the pointer**\n\n\n\nreturn: Nil\n\n```method : public : Next() ~ Nil```"]
			},
			"Previous": {
				"descriptions": ["**Retreats the pointer**\n\n\n\nreturn: Nil\n\n```method : public : Previous() ~ Nil```"]
			},
			"Remove": {
				"descriptions": ["**Removes the element at the pointer position**\n\n\n\nreturn: Nil\n\n```method : public : native : Remove() ~ Nil```", "**Removes the element at the pointer position**\n\n\n\nnode - CompareListNode&lt;H&gt;\n\nreturn: Nil\n\n```method : public : native : Remove(node:CompareListNode&lt;H&gt;) ~ Nil```"]
			},
			"RemoveBack": {
				"descriptions": ["**Removes the last value from the list**\n\n\n\nreturn: Nil\n\n```method : public : RemoveBack() ~ Nil```"]
			},
			"RemoveFront": {
				"descriptions": ["**Removes the first value from the list**\n\n\n\nreturn: Nil\n\n```method : public : RemoveFront() ~ Nil```"]
			},
			"Rest": {
				"descriptions": ["**List of all but first element**\n\n\n\nreturn: CompareList&lt;H&gt;\n\n```method : public : Rest() ~ CompareList&lt;H&gt;```"]
			},
			"Rewind": {
				"descriptions": ["**Moves the pointer to the start of the list**\n\n\n\nreturn: Nil\n\n```method : public : Rewind() ~ Nil```"]
			},
			"Size": {
				"descriptions": ["**Size of list**\n\n\n\nreturn: Int\n\n```method : public : Size() ~ Int```"]
			}
		}
	},
	"Collection.Generic.CompareVector": {
		"description": "Growable array of comparable generics",
		"functions": {
			"AddBack": {
				"descriptions": ["**Adds a vector of values to the end of the vector**\n\n\n\nvalues - Vector&lt;H&gt;\n\nreturn: Nil\n\n```method : public : AddBack(values:Vector&lt;H&gt;) ~ Nil```", "**Adds a value to the end**\n\n\n\nvalue - H\n\nreturn: Nil\n\n```method : public : AddBack(value:H) ~ Nil```"]
			},
			"BinarySearch": {
				"descriptions": ["**Performs a binary search O(log n)**\n\n\n\nvalue - H\n\nreturn: Int\n\n```method : public : native : BinarySearch(value:H) ~ Int```"]
			},
			"Compress": {
				"descriptions": ["**Compresses the Vector freeing unused memory**\n\n\n\nreturn: Nil\n\n```method : public : Compress() ~ Nil```"]
			},
			"Each": {
				"descriptions": ["**Function called for each element**\n\n\n\nf - (H)~Nil\n\nreturn: CompareVector&lt;H&gt;\n\n```method : public : Each(f:(H)~Nil) ~ CompareVector&lt;H&gt;```"]
			},
			"Empty": {
				"descriptions": ["**Clears the vector**\n\n\n\nreturn: Nil\n\n```method : public : Empty() ~ Nil```"]
			},
			"Filter": {
				"descriptions": ["**Uses the given function to filter out values**\n\n\n\nf - (H)~Bool\n\nreturn: CompareVector&lt;H&gt;\n\n```method : public : Filter(f:(H)~Bool) ~ CompareVector&lt;H&gt;```"]
			},
			"Find": {
				"descriptions": ["**Finds a given value in the vector via linear search**\n\n\n\nvalue - H\n\nreturn: Int\n\n```method : public : Find(value:H) ~ Int```"]
			},
			"Get": {
				"descriptions": ["**Gets an indexed value**\n\n\n\nindex - Int\n\nreturn: H\n\n```method : public : Get(index:Int) ~ H```"]
			},
			"Has": {
				"descriptions": ["**Check of the given value is in the vector**\n\n\n\nvalue - H\n\nreturn: Bool\n\n```method : public : Has(value:H) ~ Bool```"]
			},
			"IsEmpty": {
				"descriptions": ["**Checks to see if the vector is empty**\n\n\n\nreturn: Bool\n\n```method : public : IsEmpty() ~ Bool```"]
			},
			"Limit": {
				"descriptions": ["**Returns a limited list**\n\n\n\nl - Int\n\nreturn: CompareVector&lt;H&gt;\n\n```method : public : Limit(l:Int) ~ CompareVector&lt;H&gt;```"]
			},
			"Map": {
				"descriptions": ["**Maps the given function to each value in the vector**\n\n\n\nf - (H)~H\n\nreturn: CompareVector&lt;H&gt;\n\n```method : public : Map(f:(H)~H) ~ CompareVector&lt;H&gt;```"]
			},
			"New": {
				"descriptions": ["**Default constructor**\n\n\n\n```New()```", "**Copy constructor**\n\n\n\nvalues - H[]\n\n```New(values:H[])```", "**Copy constructor**\n\n\n\nvalues - Vector&lt;H&gt;\n\n```New(values:Vector&lt;H&gt;)```"]
			},
			"Remove": {
				"descriptions": ["**Removes an indexed value**\n\n\n\ni - Int\n\nreturn: H\n\n```method : public : Remove(i:Int) ~ H```"]
			},
			"RemoveBack": {
				"descriptions": ["**Removes the last value**\n\n\n\nreturn: H\n\n```method : public : RemoveBack() ~ H```"]
			},
			"Set": {
				"descriptions": ["**Sets an indexed value**\n\n\n\nvalue - H\n\nindex - Int\n\nreturn: Bool\n\n```method : public : Set(value:H, index:Int) ~ Bool```"]
			},
			"Size": {
				"descriptions": ["**Size of vector**\n\n\n\nreturn: Int\n\n```method : public : Size() ~ Int```"]
			},
			"Sort": {
				"descriptions": ["**Sorts the values in the vector**\n\n\n\nreturn: Nil\n\n```method : public : native : Sort() ~ Nil```"]
			},
			"ToArray": {
				"descriptions": ["**Converts the vector into an object array**\n\n\n\nreturn: H[]\n\n```method : public : ToArray() ~ H[]```"]
			}
		}
	},
	"Collection.Generic.ForwardIterator": {
		"description": "Forward iterator",
		"functions": {
			"Get": {
				"descriptions": ["**Gets the value that's currently pointed to**\n\n\n\nreturn: H\n\n```method : public : Get() ~ H```"]
			},
			"More": {
				"descriptions": ["**Checks to see the pointer can be advanced**\n\n\n\nreturn: Bool\n\n```method : public : More() ~ Bool```"]
			},
			"Next": {
				"descriptions": ["**Advances the pointer**\n\n\n\nreturn: Nil\n\n```method : public : Next() ~ Nil```"]
			},
			"Remove": {
				"descriptions": ["**Removes the element at the pointer position**\n\n\n\nreturn: Nil\n\n```method : public : Remove() ~ Nil```"]
			}
		}
	},
	"Collection.Generic.Hash": {
		"description": "Hash table of generics",
		"functions": {
			"Capacity": {
				"descriptions": ["**Gets the hash table capacity**\n\n\n\nreturn: Hash-&gt;Capacity\n\n```method : public : Capacity() ~ Hash-&gt;Capacity```"]
			},
			"Empty": {
				"descriptions": ["**Clears the map**\n\n\n\nreturn: Nil\n\n```method : public : Empty() ~ Nil```"]
			},
			"Find": {
				"descriptions": ["**Searches for a value in a hash**\n\n\n\nkey - K\n\nreturn: V\n\n```method : public : native : Find(key:K) ~ V```"]
			},
			"GetKeyValues": {
				"descriptions": ["**Gets a collection of key/value pairs**\n\n\n\nreturn: Vector&lt;Pair&gt;\n\n```method : public : GetKeyValues() ~ Vector&lt;Pair&gt;```"]
			},
			"GetKeys": {
				"descriptions": ["**Get a collection of keys**\n\n\n\nreturn: Vector&lt;K&gt;\n\n```method : public : native : GetKeys() ~ Vector&lt;K&gt;```"]
			},
			"GetValues": {
				"descriptions": ["**Gets a collection of values**\n\n\n\nreturn: Vector&lt;V&gt;\n\n```method : public : native : GetValues() ~ Vector&lt;V&gt;```"]
			},
			"Has": {
				"descriptions": ["**Checks for a value in a hash**\n\n\n\nkey - K\n\nreturn: Bool\n\n```method : public : Has(key:K) ~ Bool```"]
			},
			"Insert": {
				"descriptions": ["**Inserts a value into the hash**\n\n\n\nkey - K\n\nvalue - V\n\nreturn: Nil\n\n```method : public : Insert(key:K, value:V) ~ Nil```"]
			},
			"New": {
				"descriptions": ["**Default constructor**\n\n\n\n```New()```", "**Default constructor**\n\n\n\ncapacity - Hash-&gt;Capacity\n\n```New(capacity:Hash-&gt;Capacity)```"]
			},
			"Remove": {
				"descriptions": ["**Removes a value from the hash**\n\n\n\nkey - K\n\nreturn: Bool\n\n```method : public : native : Remove(key:K) ~ Bool```"]
			},
			"Resize": {
				"descriptions": ["**Resizes the hash table**\n\n\n\ncapacity - Hash-&gt;Capacity\n\nauto_resize - Bool\n\nreturn: Nil\n\n```method : public : native : Resize(capacity:Hash-&gt;Capacity, auto_resize:Bool) ~ Nil```"]
			},
			"Size": {
				"descriptions": ["**Size of map**\n\n\n\nreturn: Int\n\n```method : public : Size() ~ Int```"]
			}
		}
	},
	"Collection.Generic.List": {
		"description": "List of generics",
		"functions": {
			"AddBack": {
				"descriptions": ["**Adds a value to the end**\n\n\n\nvalue - H\n\nreturn: Nil\n\n```method : public : native : AddBack(value:H) ~ Nil```"]
			},
			"AddFront": {
				"descriptions": ["**Adds a value to the front**\n\n\n\nvalue - H\n\nreturn: Nil\n\n```method : public : native : AddFront(value:H) ~ Nil```"]
			},
			"Back": {
				"descriptions": ["**Returns the last element in the list**\n\n\n\nreturn: H\n\n```method : public : Back() ~ H```"]
			},
			"BackwardIterator": {
				"descriptions": ["**Instance of a backward iterator**\n\n\n\nreturn: BackwardIterator&lt;H&gt;\n\n```method : public : BackwardIterator() ~ BackwardIterator&lt;H&gt;```"]
			},
			"Each": {
				"descriptions": ["**Function called for each element**\n\n\n\nf - (H)~Nil\n\nreturn: List&lt;H&gt;\n\n```method : public : Each(f:(H)~Nil) ~ List&lt;H&gt;```"]
			},
			"Empty": {
				"descriptions": ["**Clears the list**\n\n\n\nreturn: Nil\n\n```method : public : Empty() ~ Nil```"]
			},
			"Filter": {
				"descriptions": ["**Uses the given function to filter out values**\n\n\n\nf - (H)~Bool\n\nreturn: List&lt;H&gt;\n\n```method : public : Filter(f:(H)~Bool) ~ List&lt;H&gt;```"]
			},
			"Forward": {
				"descriptions": ["**Moves the pointer to the end of the list**\n\n\n\nreturn: Nil\n\n```method : public : Forward() ~ Nil```"]
			},
			"ForwardIterator": {
				"descriptions": ["**Instance of a forward iterator**\n\n\n\nreturn: ForwardIterator&lt;H&gt;\n\n```method : public : ForwardIterator() ~ ForwardIterator&lt;H&gt;```"]
			},
			"Front": {
				"descriptions": ["**Returns the first element in the list**\n\n\n\nreturn: H\n\n```method : public : Front() ~ H```"]
			},
			"Get": {
				"descriptions": ["**Gets the value that's currently pointed to**\n\n\n\nreturn: H\n\n```method : public : Get() ~ H```"]
			},
			"Insert": {
				"descriptions": ["**Inserts a value into the list based upon the pointer location**\n\n\n\nvalue - H\n\nreturn: Bool\n\n```method : public : native : Insert(value:H) ~ Bool```"]
			},
			"IsBack": {
				"descriptions": ["**Checks to see if the pointer is at the end of the list**\n\n\n\nreturn: Bool\n\n```method : public : IsBack() ~ Bool```"]
			},
			"IsEmpty": {
				"descriptions": ["**Checks to see if the list is empty**\n\n\n\nreturn: Bool\n\n```method : public : IsEmpty() ~ Bool```"]
			},
			"IsFront": {
				"descriptions": ["**Checks to see if the pointer is at the front of the list**\n\n\n\nreturn: Bool\n\n```method : public : IsFront() ~ Bool```"]
			},
			"Limit": {
				"descriptions": ["**Returns a limited list**\n\n\n\nl - Int\n\nreturn: List&lt;H&gt;\n\n```method : public : Limit(l:Int) ~ List&lt;H&gt;```"]
			},
			"Map": {
				"descriptions": ["**Maps the given function to each value in the list**\n\n\n\nf - (H)~H\n\nreturn: List&lt;H&gt;\n\n```method : public : Map(f:(H)~H) ~ List&lt;H&gt;```"]
			},
			"More": {
				"descriptions": ["**Checks to see the pointer can be advanced**\n\n\n\nreturn: Bool\n\n```method : public : More() ~ Bool```"]
			},
			"New": {
				"descriptions": ["**Default constructor**\n\n\n\n```New()```"]
			},
			"Next": {
				"descriptions": ["**Advances the pointer**\n\n\n\nreturn: Nil\n\n```method : public : Next() ~ Nil```"]
			},
			"Previous": {
				"descriptions": ["**Retreats the pointer**\n\n\n\nreturn: Nil\n\n```method : public : Previous() ~ Nil```"]
			},
			"Remove": {
				"descriptions": ["**Removes the element at the pointer position**\n\n\n\nreturn: Nil\n\n```method : public : native : Remove() ~ Nil```"]
			},
			"RemoveBack": {
				"descriptions": ["**Removes the last value from the list**\n\n\n\nreturn: Nil\n\n```method : public : RemoveBack() ~ Nil```"]
			},
			"RemoveFront": {
				"descriptions": ["**Removes the first value from the list**\n\n\n\nreturn: Nil\n\n```method : public : RemoveFront() ~ Nil```"]
			},
			"Rest": {
				"descriptions": ["**List of all but first element**\n\n\n\nreturn: List&lt;H&gt;\n\n```method : public : Rest() ~ List&lt;H&gt;```"]
			},
			"Rewind": {
				"descriptions": ["**Moves the pointer to the start of the list**\n\n\n\nreturn: Nil\n\n```method : public : Rewind() ~ Nil```"]
			},
			"Size": {
				"descriptions": ["**Size of list**\n\n\n\nreturn: Int\n\n```method : public : Size() ~ Int```"]
			}
		}
	},
	"Collection.Generic.Map": {
		"description": "Balanced tree of generics",
		"functions": {
			"Each": {
				"descriptions": ["**Function called for each element**\n\n\n\nf - (K,V)~Nil\n\nreturn: Map&lt;K,V&gt;\n\n```method : public : Each(f:(K,V)~Nil) ~ Map&lt;K,V&gt;```"]
			},
			"Empty": {
				"descriptions": ["**Clears the map**\n\n\n\nreturn: Nil\n\n```method : public : Empty() ~ Nil```"]
			},
			"Filter": {
				"descriptions": ["**Uses the given function to filter out values**\n\n\n\nf - (K)~Bool\n\nreturn: Map&lt;K,V&gt;\n\n```method : public : Filter(f:(K)~Bool) ~ Map&lt;K,V&gt;```"]
			},
			"Find": {
				"descriptions": ["**Searches for a value in a map**\n\n\n\nkey - K\n\nreturn: V\n\n```method : public : Find(key:K) ~ V```"]
			},
			"GetKeyValues": {
				"descriptions": ["**Get a collection of keys**\n\n\n\nreturn: Collection.Generic.Vector&lt;Pair&gt;\n\n```method : public : GetKeyValues() ~ Collection.Generic.Vector&lt;Pair&gt;```"]
			},
			"GetKeys": {
				"descriptions": ["**Get a collection of keys**\n\n\n\nreturn: Collection.Generic.Vector&lt;K&gt;\n\n```method : public : GetKeys() ~ Collection.Generic.Vector&lt;K&gt;```"]
			},
			"GetValues": {
				"descriptions": ["**Gets a collection of values**\n\n\n\nreturn: Collection.Generic.Vector&lt;V&gt;\n\n```method : public : GetValues() ~ Collection.Generic.Vector&lt;V&gt;```"]
			},
			"Has": {
				"descriptions": ["**Checks for a value in a map**\n\n\n\nkey - K\n\nreturn: Bool\n\n```method : public : Has(key:K) ~ Bool```"]
			},
			"Insert": {
				"descriptions": ["**Inserts a value into the map**\n\n\n\nkey - K\n\nvalue - V\n\nreturn: Nil\n\n```method : public : Insert(key:K, value:V) ~ Nil```"]
			},
			"IsEmpty": {
				"descriptions": ["**Checks to see if the queue is empty**\n\n\n\nreturn: Bool\n\n```method : public : IsEmpty() ~ Bool```"]
			},
			"New": {
				"descriptions": ["**Default constructor**\n\n\n\n```New()```"]
			},
			"Remove": {
				"descriptions": ["**Removes a value from the map**\n\n\n\nkey - K\n\nreturn: Bool\n\n```method : public : Remove(key:K) ~ Bool```"]
			},
			"Size": {
				"descriptions": ["**Size of queue**\n\n\n\nreturn: Int\n\n```method : public : Size() ~ Int```"]
			},
			"Zip": {
				"descriptions": ["**Creates a map from a vector of keys and values**\n\n\n\nkeys - CompareVector&lt;K&gt;\n\nvalues - Vector&lt;V&gt;\n\nreturn: Map&lt;K,V&gt;\n\n```function : public : Zip(keys:CompareVector&lt;K&gt;, values:Vector&lt;V&gt;) ~ Map&lt;K,V&gt;```"]
			}
		}
	},
	"Collection.Generic.MultiMap": {
		"description": "Binary tree that holds multiple values with the same key",
		"functions": {
			"Each": {
				"descriptions": ["**Function called for each element**\n\n\n\nf - (K,V)~Nil\n\nreturn: MultiMap&lt;K,V&gt;\n\n```method : public : Each(f:(K,V)~Nil) ~ MultiMap&lt;K,V&gt;```"]
			},
			"Empty": {
				"descriptions": ["**Clears the set**\n\n\n\nreturn: Nil\n\n```method : public : Empty() ~ Nil```"]
			},
			"Filter": {
				"descriptions": ["**Uses the given function to filter out values**\n\n\n\nf - (K)~Bool\n\nreturn: MultiMap&lt;K,V&gt;\n\n```method : public : Filter(f:(K)~Bool) ~ MultiMap&lt;K,V&gt;```"]
			},
			"Find": {
				"descriptions": ["**Checks for a value in a map**\n\n\n\nkey - K\n\nreturn: Vector&lt;V&gt;\n\n```method : public : Find(key:K) ~ Vector&lt;V&gt;```"]
			},
			"GetKeys": {
				"descriptions": ["**Get a collection of keys**\n\n\n\nreturn: Vector&lt;K&gt;\n\n```method : public : GetKeys() ~ Vector&lt;K&gt;```"]
			},
			"GetValues": {
				"descriptions": ["**Gets a collection of values**\n\n\n\nreturn: Vector&lt;V&gt;\n\n```method : public : GetValues() ~ Vector&lt;V&gt;```"]
			},
			"Has": {
				"descriptions": ["**Checks for a value in a map**\n\n\n\nkey - K\n\nreturn: Bool\n\n```method : public : Has(key:K) ~ Bool```"]
			},
			"Insert": {
				"descriptions": ["**Inserts a value into the map**\n\n\n\nkey - K\n\nvalue - V\n\nreturn: Nil\n\n```method : public : Insert(key:K, value:V) ~ Nil```"]
			},
			"IsEmpty": {
				"descriptions": ["**Checks to see if the queue is empty**\n\n\n\nreturn: Bool\n\n```method : public : IsEmpty() ~ Bool```"]
			},
			"New": {
				"descriptions": ["**Default constructor**\n\n\n\n```New()```"]
			},
			"Remove": {
				"descriptions": ["**Removes a set of values from the map**\n\n\n\nkey - K\n\nreturn: Bool\n\n```method : public : Remove(key:K) ~ Bool```"]
			},
			"Size": {
				"descriptions": ["**Size of unique keys**\n\n\n\nreturn: Int\n\n```method : public : Size() ~ Int```"]
			},
			"TotalSize": {
				"descriptions": ["**Size of values**\n\n\n\nreturn: Int\n\n```method : public : TotalSize() ~ Int```"]
			},
			"Zip": {
				"descriptions": ["**Creates a map from a vector of keys and values**\n\n\n\nkeys - CompareVector&lt;K&gt;\n\nvalues - Vector&lt;V&gt;\n\nreturn: MultiMap&lt;K,V&gt;\n\n```function : public : Zip(keys:CompareVector&lt;K&gt;, values:Vector&lt;V&gt;) ~ MultiMap&lt;K,V&gt;```"]
			}
		}
	},
	"Collection.Generic.Pair": {
		"description": "Generic pair",
		"functions": {
			"Compare": {
				"descriptions": ["**Compares two objects based upon first value**\n\n\n\nfirst - System.Compare\n\nreturn: Int\n\n```method : public : Compare(first:System.Compare) ~ Int```"]
			},
			"GetFirst": {
				"descriptions": ["**Gets the first value**\n\n\n\nreturn: F\n\n```method : public : GetFirst() ~ F```"]
			},
			"GetSecond": {
				"descriptions": ["**Gets the second value**\n\n\n\nreturn: S\n\n```method : public : GetSecond() ~ S```"]
			},
			"HashID": {
				"descriptions": ["**Returns the class default hash ID**\n\n\n\nreturn: Int\n\n```method : public : HashID() ~ Int```"]
			},
			"New": {
				"descriptions": ["**Default constructor**\n\n\n\nfirst - F\n\nsecond - S\n\n```New(first:F, second:S)```"]
			},
			"SetFirst": {
				"descriptions": ["**Sets the first value**\n\n\n\nfirst - F\n\nreturn: Nil\n\n```method : public : SetFirst(first:F) ~ Nil```"]
			},
			"SetSecond": {
				"descriptions": ["**Sets the second value**\n\n\n\nsecond - S\n\nreturn: Nil\n\n```method : public : SetSecond(second:S) ~ Nil```"]
			}
		}
	},
	"Collection.Generic.Queue": {
		"description": "Queue of generics",
		"functions": {
			"Add": {
				"descriptions": ["**Adds a value to the back of the queue**\n\n\n\nvalue - H\n\nreturn: Nil\n\n```method : public : Add(value:H) ~ Nil```"]
			},
			"Empty": {
				"descriptions": ["**Clears the queue**\n\n\n\nreturn: Nil\n\n```method : public : Empty() ~ Nil```"]
			},
			"Head": {
				"descriptions": ["**Get the value from the head of the queue**\n\n\n\nreturn: H\n\n```method : public : Head() ~ H```"]
			},
			"IsEmpty": {
				"descriptions": ["**Checks to see if the queue is empty**\n\n\n\nreturn: Bool\n\n```method : public : IsEmpty() ~ Bool```"]
			},
			"New": {
				"descriptions": ["**Default constructor**\n\n\n\n```New()```"]
			},
			"Remove": {
				"descriptions": ["**Removes a value from the front of the queue**\n\n\n\nreturn: H\n\n```method : public : Remove() ~ H```"]
			},
			"Size": {
				"descriptions": ["**Size of queue**\n\n\n\nreturn: Int\n\n```method : public : Size() ~ Int```"]
			}
		}
	},
	"Collection.Generic.Set": {
		"description": "Set of objects",
		"functions": {
			"Empty": {
				"descriptions": ["**Clears the set**\n\n\n\nreturn: Nil\n\n```method : public : Empty() ~ Nil```"]
			},
			"GetKeys": {
				"descriptions": ["**Get a collection of keys**\n\n\n\nreturn: Vector&lt;K&gt;\n\n```method : public : GetKeys() ~ Vector&lt;K&gt;```"]
			},
			"Has": {
				"descriptions": ["**Checks for key in set**\n\n\n\nkey - K\n\nreturn: Bool\n\n```method : public : Has(key:K) ~ Bool```"]
			},
			"Insert": {
				"descriptions": ["**Inserts a key into the set**\n\n\n\nkey - K\n\nreturn: Nil\n\n```method : public : Insert(key:K) ~ Nil```"]
			},
			"IsEmpty": {
				"descriptions": ["**Checks to see if the map is empty**\n\n\n\nreturn: Bool\n\n```method : public : IsEmpty() ~ Bool```"]
			},
			"New": {
				"descriptions": ["**Default constructor**\n\n\n\n```New()```"]
			},
			"Remove": {
				"descriptions": ["**Removes a key from the set**\n\n\n\nkey - K\n\nreturn: Bool\n\n```method : public : Remove(key:K) ~ Bool```"]
			},
			"Size": {
				"descriptions": ["**Size of map**\n\n\n\nreturn: Int\n\n```method : public : Size() ~ Int```"]
			}
		}
	},
	"Collection.Generic.Stack": {
		"description": "Growable stack of generics",
		"functions": {
			"Empty": {
				"descriptions": ["**Clears the vector**\n\n\n\nreturn: Nil\n\n```method : public : Empty() ~ Nil```"]
			},
			"IsEmpty": {
				"descriptions": ["**Checks to see if the vector is empty**\n\n\n\nreturn: Bool\n\n```method : public : IsEmpty() ~ Bool```"]
			},
			"New": {
				"descriptions": ["**Default constructor**\n\n\n\n```New()```"]
			},
			"Pop": {
				"descriptions": ["**Pushes a value from the stack**\n\n\n\nreturn: H\n\n```method : public : Pop() ~ H```"]
			},
			"Push": {
				"descriptions": ["**Pushes a value onto the stack**\n\n\n\nvalue - H\n\nreturn: Nil\n\n```method : public : Push(value:H) ~ Nil```"]
			},
			"Size": {
				"descriptions": ["**Size of stack**\n\n\n\nreturn: Int\n\n```method : public : Size() ~ Int```"]
			},
			"Top": {
				"descriptions": ["**Check the top of the stack**\n\n\n\nreturn: H\n\n```method : public : Top() ~ H```"]
			}
		}
	},
	"Collection.Generic.Vector": {
		"description": "Growable array of generics",
		"functions": {
			"AddBack": {
				"descriptions": ["**Adds a vector of values to the end of the vector**\n\n\n\nvalues - Vector&lt;H&gt;\n\nreturn: Nil\n\n```method : public : AddBack(values:Vector&lt;H&gt;) ~ Nil```", "**Adds a value to the end**\n\n\n\nvalue - H\n\nreturn: Nil\n\n```method : public : AddBack(value:H) ~ Nil```"]
			},
			"Compress": {
				"descriptions": ["**Compresses the Vector freeing unused memory**\n\n\n\nreturn: Nil\n\n```method : public : Compress() ~ Nil```"]
			},
			"Each": {
				"descriptions": ["**Function called for each element**\n\n\n\nf - (H)~Nil\n\nreturn: Vector&lt;H&gt;\n\n```method : public : Each(f:(H)~Nil) ~ Vector&lt;H&gt;```"]
			},
			"Empty": {
				"descriptions": ["**Clears the vector**\n\n\n\nreturn: Nil\n\n```method : public : Empty() ~ Nil```"]
			},
			"Get": {
				"descriptions": ["**Gets an indexed value**\n\n\n\nindex - Int\n\nreturn: H\n\n```method : public : Get(index:Int) ~ H```"]
			},
			"IsEmpty": {
				"descriptions": ["**Checks to see if the vector is empty**\n\n\n\nreturn: Bool\n\n```method : public : IsEmpty() ~ Bool```"]
			},
			"Limit": {
				"descriptions": ["**Returns a limited list**\n\n\n\nl - Int\n\nreturn: Vector&lt;H&gt;\n\n```method : public : Limit(l:Int) ~ Vector&lt;H&gt;```"]
			},
			"Map": {
				"descriptions": ["**Maps the given function to each value in the vector**\n\n\n\nf - (H)~H\n\nreturn: Vector&lt;H&gt;\n\n```method : public : Map(f:(H)~H) ~ Vector&lt;H&gt;```"]
			},
			"New": {
				"descriptions": ["**Default constructor**\n\n\n\n```New()```", "**Copy constructor**\n\n\n\nvalues - H[]\n\n```New(values:H[])```", "**Copy constructor**\n\n\n\nvalues - Vector&lt;H&gt;\n\n```New(values:Vector&lt;H&gt;)```"]
			},
			"Remove": {
				"descriptions": ["**Removes an indexed value**\n\n\n\ni - Int\n\nreturn: H\n\n```method : public : Remove(i:Int) ~ H```"]
			},
			"RemoveBack": {
				"descriptions": ["**Removes the last value**\n\n\n\nreturn: H\n\n```method : public : RemoveBack() ~ H```"]
			},
			"Set": {
				"descriptions": ["**Sets an indexed value**\n\n\n\nvalue - H\n\nindex - Int\n\nreturn: Bool\n\n```method : public : Set(value:H, index:Int) ~ Bool```"]
			},
			"Size": {
				"descriptions": ["**Size of vector**\n\n\n\nreturn: Int\n\n```method : public : Size() ~ Int```"]
			},
			"Swap": {
				"descriptions": ["**Swap two values in the vector**\n\n\n\na - Int\n\nb - Int\n\nreturn: Bool\n\n```method : public : Swap(a:Int, b:Int) ~ Bool```"]
			},
			"ToArray": {
				"descriptions": ["**Converts the vector into an object array**\n\n\n\nreturn: H[]\n\n```method : public : ToArray() ~ H[]```"]
			}
		}
	},
	"Data.CSV.CsvColumn": {
		"description": "CSV column",
		"functions": {
			"Average": {
				"descriptions": ["**Calculates the column average**\n\n\n\nreturn: Float\n\n```method : public : Average() ~ Float```", "**Calculates the column average**\n\n\n\nend - Int\n\nreturn: Float\n\n```method : public : Average(end:Int) ~ Float```", "**Calculates the column average**\n\n\n\nstart - Int\n\nend - Int\n\nreturn: Float\n\n```method : public : Average(start:Int, end:Int) ~ Float```"]
			},
			"Get": {
				"descriptions": ["**Gets the indexed row value**\n\n\n\nindex - Int\n\nreturn: String\n\n```method : public : Get(index:Int) ~ String```"]
			},
			"Median": {
				"descriptions": ["**Calculates the column median**\n\n\n\nreturn: Float\n\n```method : public : Median() ~ Float```"]
			},
			"New": {
				"descriptions": ["**Constructor**\n\n\n\nrows - Vector&lt;String&gt;\n\n```New(rows:Vector&lt;String&gt;)```"]
			},
			"Size": {
				"descriptions": ["**Gets the row size**\n\n\n\nreturn: Int\n\n```method : public : Size() ~ Int```"]
			},
			"Sum": {
				"descriptions": ["**Calculates the column sum**\n\n\n\nreturn: Float\n\n```method : public : Sum() ~ Float```", "**Calculates the row sum**\n\n\n\nend - Int\n\nreturn: Float\n\n```method : public : Sum(end:Int) ~ Float```", "**Calculates the row sum**\n\n\n\nstart - Int\n\nend - Int\n\nreturn: Float\n\n```method : public : Sum(start:Int, end:Int) ~ Float```"]
			}
		}
	},
	"Data.CSV.CsvRow": {
		"description": "CSV row",
		"functions": {
			"Append": {
				"descriptions": ["**Appends value to the end of the row**\n\n\n\nvalue - String\n\nreturn: Nil\n\n```method : public : Append(value:String) ~ Nil```"]
			},
			"Average": {
				"descriptions": ["**Calculates the row average**\n\n\n\nreturn: Float\n\n```method : public : Average() ~ Float```", "**Calculates the row average**\n\n\n\nend - Int\n\nreturn: Float\n\n```method : public : Average(end:Int) ~ Float```", "**Calculates the row average**\n\n\n\nstart - Int\n\nend - Int\n\nreturn: Float\n\n```method : public : Average(start:Int, end:Int) ~ Float```"]
			},
			"Get": {
				"descriptions": ["**Gets the indexed row value**\n\n\n\nindex - Int\n\nreturn: String\n\n```method : public : Get(index:Int) ~ String```", "**Gets the indexed row value**\n\n\n\nname - String\n\nreturn: String\n\n```method : public : Get(name:String) ~ String```"]
			},
			"Id": {
				"descriptions": ["**Gets the row ID**\n\n\n\nreturn: Int\n\n```method : public : Id() ~ Int```"]
			},
			"Median": {
				"descriptions": ["**Calculates the row median**\n\n\n\nreturn: Float\n\n```method : public : Median() ~ Float```"]
			},
			"New": {
				"descriptions": ["**Constructor**\n\n\n\ntable - CsvTable\n\nid - Int\n\nread_only - Bool\n\ncolumns - CompareVector&lt;String&gt;\n\n```New(table:CsvTable, id:Int, read_only:Bool, columns:CompareVector&lt;String&gt;)```"]
			},
			"Set": {
				"descriptions": ["**Sets the indexed row value**\n\n\n\nindex - Int\n\nvalue - String\n\nreturn: Bool\n\n```method : public : Set(index:Int, value:String) ~ Bool```", "**Sets the named row value**\n\n\n\nname - String\n\nvalue - String\n\nreturn: Bool\n\n```method : public : Set(name:String, value:String) ~ Bool```"]
			},
			"Size": {
				"descriptions": ["**Gets the row size**\n\n\n\nreturn: Int\n\n```method : public : Size() ~ Int```"]
			},
			"Sum": {
				"descriptions": ["**Calculates the row sum**\n\n\n\nreturn: Float\n\n```method : public : Sum() ~ Float```", "**Calculates the row sum**\n\n\n\nend - Int\n\nreturn: Float\n\n```method : public : Sum(end:Int) ~ Float```", "**Calculates the row sum**\n\n\n\nstart - Int\n\nend - Int\n\nreturn: Float\n\n```method : public : Sum(start:Int, end:Int) ~ Float```"]
			},
			"ToString": {
				"descriptions": ["**Formats the row into a string**\n\n\n\nreturn: String\n\n```method : public : ToString() ~ String```"]
			}
		}
	},
	"Data.CSV.CsvTable": {
		"description": "CSV table",
		"functions": {
			"AppendColumn": {
				"descriptions": ["**Appends a column to the end of the table**\n\n\n\nname - String\n\nreturn: Bool\n\n```method : public : AppendColumn(name:String) ~ Bool```"]
			},
			"ColumnValues": {
				"descriptions": ["**Get values for a given row**\n\n\n\nindex - Int\n\nreturn: CsvColumn\n\n```method : public : ColumnValues(index:Int) ~ CsvColumn```", "**Get values for a given row**\n\n\n\nname - String\n\nreturn: CsvColumn\n\n```method : public : ColumnValues(name:String) ~ CsvColumn```"]
			},
			"Contains": {
				"descriptions": ["**Searches a given column for a string that contains a given**\n\n\n\nname - String\n\nvalue - String\n\nreturn: Bool\n\n```method : public : Contains(name:String, value:String) ~ Bool```", "**Searches a given column for a string that contains a given**\n\n\n\nindex - Int\n\nvalue - String\n\nreturn: Bool\n\n```method : public : Contains(index:Int, value:String) ~ Bool```"]
			},
			"Count": {
				"descriptions": ["**Counts a column for matching values**\n\n\n\nname - String\n\nvalue - String\n\nreturn: Int\n\n```method : public : Count(name:String, value:String) ~ Int```", "**Counts a column for matching values**\n\n\n\nindex - Int\n\nvalue - String\n\nreturn: Int\n\n```method : public : Count(index:Int, value:String) ~ Int```"]
			},
			"Delete": {
				"descriptions": ["**Removes a row from the table**\n\n\n\nid - Int\n\nreturn: Bool\n\n```method : public : Delete(id:Int) ~ Bool```"]
			},
			"Get": {
				"descriptions": ["**Gets an indexed row**\n\n\n\nindex - Int\n\nreturn: CsvRow\n\n```method : public : Get(index:Int) ~ CsvRow```"]
			},
			"GetHeaders": {
				"descriptions": ["**Gets header names**\n\n\n\nreturn: CsvRow\n\n```method : public : GetHeaders() ~ CsvRow```"]
			},
			"GetRowId": {
				"descriptions": ["**Gets row name**\n\n\n\nname - String\n\nreturn: Int\n\n```method : public : GetRowId(name:String) ~ Int```"]
			},
			"IsParsed": {
				"descriptions": ["**Returns rather the file has been successfully parsed**\n\n\n\nreturn: Bool\n\n```method : public : IsParsed() ~ Bool```"]
			},
			"New": {
				"descriptions": ["**Constructor**\n\n\n\ndata - String\n\n```New(data:String)```", "**Constructor**\n\n\n\ndata - String\n\nending - String\n\n```New(data:String, ending:String)```"]
			},
			"RowSize": {
				"descriptions": ["**Gets the size of rows**\n\n\n\nreturn: Int\n\n```method : public : RowSize() ~ Int```"]
			},
			"Search": {
				"descriptions": ["**Searches a given column for matching values**\n\n\n\nname - String\n\nvalue - String\n\nreturn: CsvTable\n\n```method : public : Search(name:String, value:String) ~ CsvTable```", "**Searches a given column for matching values**\n\n\n\nindex - Int\n\nvalue - String\n\nreturn: CsvTable\n\n```method : public : Search(index:Int, value:String) ~ CsvTable```"]
			},
			"Size": {
				"descriptions": ["**Gets the number of rows**\n\n\n\nreturn: Int\n\n```method : public : Size() ~ Int```"]
			},
			"ToString": {
				"descriptions": ["**Formats the table into a string**\n\n\n\nreturn: String\n\n```method : public : ToString() ~ String```"]
			},
			"UniqueColumnValues": {
				"descriptions": ["**Get unique values for a given row**\n\n\n\nname - String\n\nreturn: CsvColumn\n\n```method : public : UniqueColumnValues(name:String) ~ CsvColumn```", "**Get unique values for a given row**\n\n\n\nindex - Int\n\nreturn: CsvColumn\n\n```method : public : UniqueColumnValues(index:Int) ~ CsvColumn```"]
			}
		}
	},
	"Data.JSON.JsonBuilder": {
		"description": "Table driven JSON builder",
		"functions": {
			"Add": {
				"descriptions": ["**Adds a value**\n\n\n\nvalue - String\n\nreturn: JsonBuilder\n\n```method : public : Add(value:String) ~ JsonBuilder```", "**Adds a value**\n\n\n\nvalue - Int\n\nreturn: JsonBuilder\n\n```method : public : Add(value:Int) ~ JsonBuilder```", "**Adds a value**\n\n\n\nvalue - Float\n\nreturn: JsonBuilder\n\n```method : public : Add(value:Float) ~ JsonBuilder```", "**Adds a value**\n\n\n\nvalue - Bool\n\nreturn: JsonBuilder\n\n```method : public : Add(value:Bool) ~ JsonBuilder```", "**Adds a value**\n\n\n\nvalue - JsonElement\n\nreturn: JsonBuilder\n\n```method : public : Add(value:JsonElement) ~ JsonBuilder```"]
			},
			"Insert": {
				"descriptions": ["**Insert an element**\n\n\n\nname - String\n\nvalue - Int\n\nreturn: JsonBuilder\n\n```method : public : Insert(name:String, value:Int) ~ JsonBuilder```", "**Insert an element**\n\n\n\nname - String\n\nvalue - Float\n\nreturn: JsonBuilder\n\n```method : public : Insert(name:String, value:Float) ~ JsonBuilder```", "**Insert an element**\n\n\n\nname - String\n\nvalue - String\n\nreturn: JsonBuilder\n\n```method : public : Insert(name:String, value:String) ~ JsonBuilder```", "**Insert an element**\n\n\n\nname - String\n\nvalue - Bool\n\nreturn: JsonBuilder\n\n```method : public : Insert(name:String, value:Bool) ~ JsonBuilder```", "**Insert an element**\n\n\n\nname - String\n\nvalue - JsonElement\n\nreturn: JsonBuilder\n\n```method : public : Insert(name:String, value:JsonElement) ~ JsonBuilder```"]
			},
			"New": {
				"descriptions": ["**Constructor**\n\n\n\n```New()```"]
			},
			"Pop": {
				"descriptions": ["**Pops a value**\n\n\n\nreturn: JsonElement\n\n```method : public : Pop() ~ JsonElement```"]
			},
			"PopAll": {
				"descriptions": ["**Pop all values**\n\n\n\nreturn: JsonElement\n\n```method : public : PopAll() ~ JsonElement```"]
			},
			"PushArray": {
				"descriptions": ["**Pushes an array element on the stack**\n\n\n\nreturn: JsonBuilder\n\n```method : public : PushArray() ~ JsonBuilder```"]
			},
			"PushObject": {
				"descriptions": ["**Pushes an object element on the stack**\n\n\n\nreturn: JsonBuilder\n\n```method : public : PushObject() ~ JsonBuilder```", "**Pushes an object element on the stack**\n\n\n\nname - String\n\nreturn: JsonBuilder\n\n```method : public : PushObject(name:String) ~ JsonBuilder```"]
			},
			"Size": {
				"descriptions": ["**Size of element stack**\n\n\n\nreturn: Int\n\n```method : public : Size() ~ Int```"]
			}
		}
	},
	"Data.JSON.JsonElement": {
		"description": "JSON value element",
		"functions": {
			"Add": {
				"descriptions": ["**Adds an element**\n\n\n\nelem - JsonElement\n\nreturn: Bool\n\n```method : public : Add(elem:JsonElement) ~ Bool```", "**Adds a value**\n\n\n\nvalue - String\n\nreturn: Bool\n\n```method : public : Add(value:String) ~ Bool```", "**Adds a value**\n\n\n\nvalue - Int\n\nreturn: Bool\n\n```method : public : Add(value:Int) ~ Bool```", "**Adds a value**\n\n\n\nvalue - Float\n\nreturn: Bool\n\n```method : public : Add(value:Float) ~ Bool```", "**Adds a value**\n\n\n\nvalue - Bool\n\nreturn: Bool\n\n```method : public : Add(value:Bool) ~ Bool```"]
			},
			"AddChild": {
				"descriptions": ["**Adds a class child node**\n\n\n\nname - String\n\nreturn: JsonElement\n\n```method : public : AddChild(name:String) ~ JsonElement```"]
			},
			"Decode": {
				"descriptions": ["**General decoding for Json strings**\n\n\n\nstr - String\n\nreturn: String\n\n```function : public : native : Decode(str:String) ~ String```"]
			},
			"Encode": {
				"descriptions": ["**General encoding for JSON strings**\n\n\n\nstr - String\n\nreturn: String\n\n```function : public : native : Encode(str:String) ~ String```"]
			},
			"FindElements": {
				"descriptions": ["**Queries the object graph. Object attributes referenced by '/' while array elements are referenced by '[index]'. Example "cars/[last]/make".**\n\n\n\npath - String\n\nreturn: JsonElement\n\n```method : public : FindElements(path:String) ~ JsonElement```"]
			},
			"Get": {
				"descriptions": ["**Gets an indexed value from an array type**\n\n\n\nindex - Int\n\nreturn: JsonElement\n\n```method : public : Get(index:Int) ~ JsonElement```", "**Gets a named value from an object type**\n\n\n\nname - String\n\nreturn: JsonElement\n\n```method : public : Get(name:String) ~ JsonElement```"]
			},
			"GetNames": {
				"descriptions": ["**Gets the names of object attributes**\n\n\n\nreturn: Vector&lt;String&gt;\n\n```method : public : GetNames() ~ Vector&lt;String&gt;```"]
			},
			"GetType": {
				"descriptions": ["**Gets the type**\n\n\n\nreturn: JsonElement-&gt;JsonType\n\n```method : public : GetType() ~ JsonElement-&gt;JsonType```"]
			},
			"GetValue": {
				"descriptions": ["**Gets the value**\n\n\n\nreturn: String\n\n```method : public : GetValue() ~ String```"]
			},
			"Has": {
				"descriptions": ["**Check to see if the indexed value exists**\n\n\n\nindex - Int\n\nreturn: Bool\n\n```method : public : Has(index:Int) ~ Bool```", "**Check to see if the indexed value exists**\n\n\n\nname - String\n\nreturn: Bool\n\n```method : public : Has(name:String) ~ Bool```"]
			},
			"Insert": {
				"descriptions": ["**Insert an element**\n\n\n\nname - String\n\nelem - JsonElement\n\nreturn: Bool\n\n```method : public : Insert(name:String, elem:JsonElement) ~ Bool```", "**Inserts a value**\n\n\n\nname - String\n\nvalue - String\n\nreturn: Bool\n\n```method : public : Insert(name:String, value:String) ~ Bool```", "**Inserts a value**\n\n\n\nname - String\n\nvalue - Int\n\nreturn: Bool\n\n```method : public : Insert(name:String, value:Int) ~ Bool```", "**Inserts a value**\n\n\n\nname - String\n\nvalue - Float\n\nreturn: Bool\n\n```method : public : Insert(name:String, value:Float) ~ Bool```", "**Inserts a value**\n\n\n\nname - String\n\nvalue - Bool\n\nreturn: Bool\n\n```method : public : Insert(name:String, value:Bool) ~ Bool```"]
			},
			"MatchType": {
				"descriptions": ["**Checks a node's type**\n\n\n\nelem - JsonElement\n\ntype - JsonElement-&gt;JsonType\n\nreturn: Bool\n\n```function : public : MatchType(elem:JsonElement, type:JsonElement-&gt;JsonType) ~ Bool```"]
			},
			"MatchValue": {
				"descriptions": ["**Checks a node's type**\n\n\n\nelem - JsonElement\n\nvalue - String\n\nreturn: Bool\n\n```function : public : MatchValue(elem:JsonElement, value:String) ~ Bool```"]
			},
			"New": {
				"descriptions": ["**Constructor**\n\n\n\ntype - JsonElement-&gt;JsonType\n\n```New(type:JsonElement-&gt;JsonType)```", "**Constructor**\n\n\n\ntype - JsonElement-&gt;JsonType\n\nvalue - String\n\n```New(type:JsonElement-&gt;JsonType, value:String)```", "**Constructor**\n\n\n\nvalue - String\n\n```New(value:String)```", "**Constructor**\n\n\n\nvalue - Int\n\n```New(value:Int)```", "**Constructor**\n\n\n\nvalue - Float\n\n```New(value:Float)```", "**Constructor**\n\n\n\narray_elems - Vector&lt;JsonElement&gt;\n\n```New(array_elems:Vector&lt;JsonElement&gt;)```", "**Constructor**\n\n\n\nmap_elems - Map&lt;String,JsonElement&gt;\n\n```New(map_elems:Map&lt;String,JsonElement&gt;)```"]
			},
			"Size": {
				"descriptions": ["**Gets the size of an array or object value**\n\n\n\nreturn: Int\n\n```method : public : Size() ~ Int```"]
			},
			"ToString": {
				"descriptions": ["**Format the element into a JSON string**\n\n\n\nreturn: String\n\n```method : public : ToString() ~ String```"]
			}
		}
	},
	"Data.JSON.JsonParser": {
		"description": "Support for Json parsing",
		"functions": {
			"GetError": {
				"descriptions": ["**Get the current parsing error**\n\n\n\nreturn: String\n\n```method : public : GetError() ~ String```"]
			},
			"GetRoot": {
				"descriptions": ["**Get document root**\n\n\n\nreturn: JsonElement\n\n```method : public : GetRoot() ~ JsonElement```"]
			},
			"New": {
				"descriptions": ["**Creates a new parser**\n\n\n\ninput - String\n\n```New(input:String)```"]
			},
			"Parse": {
				"descriptions": ["**Parses a Json string**\n\n\n\nreturn: Bool\n\n```method : public : Parse() ~ Bool```"]
			},
			"TextToElement": {
				"descriptions": ["**Parses a Json text**\n\n\n\ntext - String\n\nreturn: JsonElement\n\n```function : public : TextToElement(text:String) ~ JsonElement```"]
			}
		}
	},
	"Data.XML.XmlAttribute": {
		"description": "Represents an XML attribute",
		"functions": {
			"GetName": {
				"descriptions": ["**Gets the name of the attribute**\n\n\n\nreturn: String\n\n```method : public : GetName() ~ String```"]
			},
			"GetNamespace": {
				"descriptions": ["**Gets the attribute namespace**\n\n\n\nreturn: String\n\n```method : public : GetNamespace() ~ String```"]
			},
			"GetValue": {
				"descriptions": ["**Gets the attribute value**\n\n\n\nreturn: String\n\n```method : public : GetValue() ~ String```"]
			},
			"New": {
				"descriptions": ["**Constructor**\n\n\n\nname - String\n\nvalue - String\n\n```New(name:String, value:String)```"]
			},
			"SetName": {
				"descriptions": ["**Sets the attribute name**\n\n\n\nname - String\n\nreturn: Nil\n\n```method : public : SetName(name:String) ~ Nil```"]
			},
			"SetNamespace": {
				"descriptions": ["**Sets the attribute namespace**\n\n\n\nnamespace - String\n\nreturn: Nil\n\n```method : public : SetNamespace(namespace:String) ~ Nil```"]
			},
			"SetValue": {
				"descriptions": ["**Sets the attribute value**\n\n\n\nvalue - String\n\nreturn: Nil\n\n```method : public : SetValue(value:String) ~ Nil```"]
			}
		}
	},
	"Data.XML.XmlBuilder": {
		"description": "Used to programmatically build XML documents",
		"functions": {
			"GetEncoding": {
				"descriptions": ["**Gets the XML encoding**\n\n\n\nreturn: String\n\n```method : public : GetEncoding() ~ String```"]
			},
			"GetRoot": {
				"descriptions": ["**Returns the root node of the XML document**\n\n\n\nreturn: XmlElement\n\n```method : public : GetRoot() ~ XmlElement```"]
			},
			"GetVersion": {
				"descriptions": ["**Gets the XML version**\n\n\n\nreturn: String\n\n```method : public : GetVersion() ~ String```"]
			},
			"New": {
				"descriptions": ["**Default constructor**\n\n\n\nname - String\n\n```New(name:String)```", "**Default constructor**\n\n\n\nname - String\n\nversion - String\n\n```New(name:String, version:String)```", "**Default constructor**\n\n\n\nname - String\n\nversion - String\n\nencoding - String\n\n```New(name:String, version:String, encoding:String)```"]
			},
			"SetEncoding": {
				"descriptions": ["**Sets the XML encoding**\n\n\n\nencoding - String\n\nreturn: Nil\n\n```method : public : SetEncoding(encoding:String) ~ Nil```"]
			},
			"SetVersion": {
				"descriptions": ["**Sets the XML version**\n\n\n\nversion - String\n\nreturn: Nil\n\n```method : public : SetVersion(version:String) ~ Nil```"]
			},
			"ToString": {
				"descriptions": ["**Produces an XML string representation of the document**\n\n\n\nreturn: String\n\n```method : public : ToString() ~ String```"]
			}
		}
	},
	"Data.XML.XmlElement": {
		"description": "Represents an XML element",
		"functions": {
			"AddAttribute": {
				"descriptions": ["**Adds an element attribute**\n\n\n\nattrib - XmlAttribute\n\nreturn: Nil\n\n```method : public : AddAttribute(attrib:XmlAttribute) ~ Nil```"]
			},
			"AddChild": {
				"descriptions": ["**Adds an XML subelement tag**\n\n\n\ntag - XmlElement\n\nreturn: Nil\n\n```method : public : AddChild(tag:XmlElement) ~ Nil```"]
			},
			"DecodeString": {
				"descriptions": ["**Decodes an XML string**\n\n\n\nin - String\n\nreturn: String\n\n```function : public : DecodeString(in:String) ~ String```"]
			},
			"EncodeString": {
				"descriptions": ["**Encodes an XML string**\n\n\n\nin - String\n\nreturn: String\n\n```function : public : EncodeString(in:String) ~ String```"]
			},
			"FindElements": {
				"descriptions": ["**Finds matching XML elements using xpath like syntax. Supports 'first()', 'last()' and '[cdata]' functions.**\n\n\n\npath - String\n\nreturn: Vector&lt;XmlElement&gt;\n\n```method : public : FindElements(path:String) ~ Vector&lt;XmlElement&gt;```"]
			},
			"GetAttribute": {
				"descriptions": ["**Gets an element attribute**\n\n\n\nkey - String\n\nreturn: XmlAttribute\n\n```method : public : GetAttribute(key:String) ~ XmlAttribute```"]
			},
			"GetChild": {
				"descriptions": ["**Gets a child element**\n\n\n\ni - Int\n\nreturn: XmlElement\n\n```method : public : GetChild(i:Int) ~ XmlElement```"]
			},
			"GetChildCount": {
				"descriptions": ["**Get the number of child elements**\n\n\n\nreturn: Int\n\n```method : public : GetChildCount() ~ Int```"]
			},
			"GetChildren": {
				"descriptions": ["**Get all child elements that matchs the given filter**\n\n\n\nname - String\n\nreturn: Vector&lt;XmlElement&gt;\n\n```method : public : native : GetChildren(name:String) ~ Vector&lt;XmlElement&gt;```", "**Get all child elements that matchs the given filter**\n\n\n\nname - String\n\nattrib - String\n\nreturn: Vector&lt;XmlElement&gt;\n\n```method : public : native : GetChildren(name:String, attrib:String) ~ Vector&lt;XmlElement&gt;```", "**Get all child elements that matchs the given filter**\n\n\n\nname - String\n\nmax - Int\n\nreturn: Vector&lt;XmlElement&gt;\n\n```method : public : native : GetChildren(name:String, max:Int) ~ Vector&lt;XmlElement&gt;```", "**Get all children**\n\n\n\nreturn: Vector&lt;XmlElement&gt;\n\n```method : public : GetChildren() ~ Vector&lt;XmlElement&gt;```"]
			},
			"GetContent": {
				"descriptions": ["**Gets the element content**\n\n\n\nreturn: String\n\n```method : public : GetContent() ~ String```"]
			},
			"GetFirstChild": {
				"descriptions": ["**Get the first element that matchs the given filter**\n\n\n\nname - String\n\nreturn: XmlElement\n\n```method : public : native : GetFirstChild(name:String) ~ XmlElement```"]
			},
			"GetLastChild": {
				"descriptions": ["**Get the last element that matchs the given filter**\n\n\n\nname - String\n\nreturn: XmlElement\n\n```method : public : native : GetLastChild(name:String) ~ XmlElement```"]
			},
			"GetName": {
				"descriptions": ["**Gets the element name**\n\n\n\nreturn: String\n\n```method : public : GetName() ~ String```"]
			},
			"GetNamespace": {
				"descriptions": ["**Gets the element namespace**\n\n\n\nreturn: String\n\n```method : public : GetNamespace() ~ String```"]
			},
			"GetParent": {
				"descriptions": ["**Gets a child's parent element**\n\n\n\nreturn: XmlElement\n\n```method : public : GetParent() ~ XmlElement```"]
			},
			"GetType": {
				"descriptions": ["**Gets the element type**\n\n\n\nreturn: XmlElement-&gt;Type\n\n```method : public : GetType() ~ XmlElement-&gt;Type```"]
			},
			"New": {
				"descriptions": ["**Constructor**\n\n\n\ntype - XmlElement-&gt;Type\n\nname - String\n\n```New(type:XmlElement-&gt;Type, name:String)```", "**Constructor**\n\n\n\ntype - XmlElement-&gt;Type\n\nname - String\n\ncontent - String\n\n```New(type:XmlElement-&gt;Type, name:String, content:String)```", "**Constructor**\n\n\n\ntype - XmlElement-&gt;Type\n\nname - String\n\nattribs - Hash&lt;String,XmlAttribute&gt;\n\ncontent - String\n\n```New(type:XmlElement-&gt;Type, name:String, attribs:Hash&lt;String,XmlAttribute&gt;, content:String)```"]
			},
			"SetContent": {
				"descriptions": ["**Sets the element content**\n\n\n\ncontent - String\n\nreturn: Nil\n\n```method : public : SetContent(content:String) ~ Nil```"]
			},
			"SetName": {
				"descriptions": ["**Sets the element name**\n\n\n\nname - String\n\nreturn: Nil\n\n```method : public : SetName(name:String) ~ Nil```"]
			},
			"SetNamespace": {
				"descriptions": ["**Sets the element namespace**\n\n\n\nnamespace - String\n\nreturn: Nil\n\n```method : public : SetNamespace(namespace:String) ~ Nil```"]
			},
			"SetParent": {
				"descriptions": ["**Set a child's parent element**\n\n\n\nparent - XmlElement\n\nreturn: Nil\n\n```method : public : SetParent(parent:XmlElement) ~ Nil```"]
			},
			"SetType": {
				"descriptions": ["**Sets the element type**\n\n\n\ntype - XmlElement-&gt;Type\n\nreturn: Nil\n\n```method : public : SetType(type:XmlElement-&gt;Type) ~ Nil```"]
			},
			"ToString": {
				"descriptions": ["**Creates a string representation of the element**\n\n\n\nreturn: String\n\n```method : public : ToString() ~ String```"]
			}
		}
	},
	"Data.XML.XmlParser": {
		"description": "Parses an XML document",
		"functions": {
			"FindElements": {
				"descriptions": ["**Finds matching XML elements using xpath like syntax. Supports 'first()', 'last()' and '[cdata]' functions.**\n\n\n\npath - String\n\nreturn: Vector&lt;XmlElement&gt;\n\n```method : public : FindElements(path:String) ~ Vector&lt;XmlElement&gt;```"]
			},
			"GetEncoding": {
				"descriptions": ["**Gets the XML encoding**\n\n\n\nreturn: String\n\n```method : public : GetEncoding() ~ String```"]
			},
			"GetError": {
				"descriptions": ["**Get the current parsing error**\n\n\n\nreturn: String\n\n```method : public : GetError() ~ String```"]
			},
			"GetRoot": {
				"descriptions": ["**Gets the root XML element**\n\n\n\nreturn: XmlElement\n\n```method : public : GetRoot() ~ XmlElement```"]
			},
			"GetVersion": {
				"descriptions": ["**Gets XML version**\n\n\n\nreturn: String\n\n```method : public : GetVersion() ~ String```"]
			},
			"New": {
				"descriptions": ["**Default constructor**\n\n\n\nstring - String\n\n```New(string:String)```", "**Default constructor**\n\n\n\nbuffer - Char[]\n\n```New(buffer:Char[])```"]
			},
			"Parse": {
				"descriptions": ["**Parses the XML document**\n\n\n\nreturn: Bool\n\n```method : public : Parse() ~ Bool```"]
			},
			"TextToElement": {
				"descriptions": ["**Parses a Json text**\n\n\n\ntext - String\n\nreturn: XmlElement\n\n```function : public : TextToElement(text:String) ~ XmlElement```"]
			},
			"ToString": {
				"descriptions": ["**Produces an XML string representation of the document**\n\n\n\nreturn: String\n\n```method : public : ToString() ~ String```"]
			}
		}
	},
	"Database.ODBC.Connection": {
		"description": "ODBC database connection",
		"functions": {
			"Close": {
				"descriptions": ["**Closes a connection**\n\n\n\nreturn: Nil\n\n```method : public : Close() ~ Nil```"]
			},
			"CreateParameterStatement": {
				"descriptions": ["**Create a parametrized SQL statement**\n\n\n\nsql - String\n\nreturn: ParameterStatement\n\n```method : public : CreateParameterStatement(sql:String) ~ ParameterStatement```"]
			},
			"IsOpen": {
				"descriptions": ["**Check rather a connect is open**\n\n\n\nreturn: Bool\n\n```method : public : IsOpen() ~ Bool```"]
			},
			"New": {
				"descriptions": ["**Constructor**\n\n\n\nds - String\n\nusername - String\n\npassword - String\n\n```New(ds:String, username:String, password:String)```"]
			},
			"Select": {
				"descriptions": ["**Executes a SQL select statement**\n\n\n\nsql - String\n\nreturn: ResultSet\n\n```method : public : Select(sql:String) ~ ResultSet```"]
			},
			"Update": {
				"descriptions": ["**Executes a SQL update statement**\n\n\n\nsql - String\n\nreturn: Int\n\n```method : public : Update(sql:String) ~ Int```"]
			}
		}
	},
	"Database.ODBC.Date": {
		"description": "ODBC date",
		"functions": {
			"GetDay": {
				"descriptions": ["**Gets the day**\n\n\n\nreturn: Int\n\n```method : public : GetDay() ~ Int```"]
			},
			"GetMonth": {
				"descriptions": ["**Gets the month**\n\n\n\nreturn: Int\n\n```method : public : GetMonth() ~ Int```"]
			},
			"GetYear": {
				"descriptions": ["**Gets the year**\n\n\n\nreturn: Int\n\n```method : public : GetYear() ~ Int```"]
			},
			"New": {
				"descriptions": ["**Default constructor**\n\n\n\n```New()```", "**Copy constructor for System.Time.Date**\n\n\n\ndate - System.Time.Date\n\n```New(date:System.Time.Date)```"]
			},
			"SetDay": {
				"descriptions": ["**Sets the day**\n\n\n\nday - Int\n\nreturn: Nil\n\n```method : public : SetDay(day:Int) ~ Nil```"]
			},
			"SetMonth": {
				"descriptions": ["**Sets the month**\n\n\n\nmonth - Int\n\nreturn: Nil\n\n```method : public : SetMonth(month:Int) ~ Nil```"]
			},
			"SetYear": {
				"descriptions": ["**Sets the year**\n\n\n\nyear - Int\n\nreturn: Nil\n\n```method : public : SetYear(year:Int) ~ Nil```"]
			},
			"ToDate": {
				"descriptions": ["**Converts a ODBC date into a system date**\n\n\n\nreturn: System.Time.Date\n\n```method : public : ToDate() ~ System.Time.Date```"]
			},
			"ToString": {
				"descriptions": ["**Creates a string representation of the date**\n\n\n\nreturn: String\n\n```method : public : ToString() ~ String```"]
			}
		}
	},
	"Database.ODBC.ParameterStatement": {
		"description": "ODBC parametrized statement that supports SQL variables",
		"functions": {
			"Close": {
				"descriptions": ["**Closes the statement**\n\n\n\nreturn: Nil\n\n```method : public : Close() ~ Nil```"]
			},
			"Select": {
				"descriptions": ["**Executes a SQL select statement**\n\n\n\nreturn: ResultSet\n\n```method : public : Select() ~ ResultSet```"]
			},
			"SetBit": {
				"descriptions": ["**Sets a bit type to NULL**\n\n\n\npos - Int\n\nreturn: Bool\n\n```method : public : SetBit(pos:Int) ~ Bool```", "**Sets a bit type**\n\n\n\npos - Int\n\nvalue - Bool\n\nreturn: Bool\n\n```method : public : SetBit(pos:Int, value:Bool) ~ Bool```"]
			},
			"SetBlob": {
				"descriptions": ["**Sets a blob type to NULL**\n\n\n\npos - Int\n\nreturn: Bool\n\n```method : public : SetBlob(pos:Int) ~ Bool```", "**Sets a blob type**\n\n\n\npos - Int\n\nbuffer - Byte[]\n\nreturn: Bool\n\n```method : public : SetBlob(pos:Int, buffer:Byte[]) ~ Bool```"]
			},
			"SetBytes": {
				"descriptions": ["**Sets a stream of bytes**\n\n\n\npos - Int\n\nbuffer - Byte[]\n\nlength - Int\n\nreturn: Bool\n\n```method : public : SetBytes(pos:Int, buffer:Byte[], length:Int) ~ Bool```"]
			},
			"SetDate": {
				"descriptions": ["**Sets a date type to NULL**\n\n\n\npos - Int\n\nreturn: Bool\n\n```method : public : SetDate(pos:Int) ~ Bool```", "**Sets a date type**\n\n\n\npos - Int\n\nvalue - Date\n\nreturn: Bool\n\n```method : public : SetDate(pos:Int, value:Date) ~ Bool```"]
			},
			"SetDouble": {
				"descriptions": ["**Sets a double type to NULL**\n\n\n\npos - Int\n\nreturn: Bool\n\n```method : public : SetDouble(pos:Int) ~ Bool```", "**Sets a double type**\n\n\n\npos - Int\n\nvalue - Float\n\nreturn: Bool\n\n```method : public : SetDouble(pos:Int, value:Float) ~ Bool```"]
			},
			"SetInt": {
				"descriptions": ["**Sets a integer type to NULL**\n\n\n\npos - Int\n\nreturn: Bool\n\n```method : public : SetInt(pos:Int) ~ Bool```", "**Sets a integer type**\n\n\n\npos - Int\n\nvalue - Int\n\nreturn: Bool\n\n```method : public : SetInt(pos:Int, value:Int) ~ Bool```"]
			},
			"SetReal": {
				"descriptions": ["**Sets a real type to NULL**\n\n\n\npos - Int\n\nreturn: Bool\n\n```method : public : SetReal(pos:Int) ~ Bool```", "**Sets a real type**\n\n\n\npos - Int\n\nvalue - Float\n\nreturn: Bool\n\n```method : public : SetReal(pos:Int, value:Float) ~ Bool```"]
			},
			"SetSmallInt": {
				"descriptions": ["**Sets a small integer type to NULL**\n\n\n\npos - Int\n\nreturn: Bool\n\n```method : public : SetSmallInt(pos:Int) ~ Bool```", "**Sets a small integer type**\n\n\n\npos - Int\n\nvalue - Int\n\nreturn: Bool\n\n```method : public : SetSmallInt(pos:Int, value:Int) ~ Bool```"]
			},
			"SetTimestamp": {
				"descriptions": ["**Sets a timestamp type to NULL**\n\n\n\npos - Int\n\nreturn: Bool\n\n```method : public : SetTimestamp(pos:Int) ~ Bool```", "**Sets a timestamp type**\n\n\n\npos - Int\n\nvalue - Timestamp\n\nreturn: Bool\n\n```method : public : SetTimestamp(pos:Int, value:Timestamp) ~ Bool```"]
			},
			"SetVarchar": {
				"descriptions": ["**Sets varchar type to NULL**\n\n\n\npos - Int\n\nreturn: Bool\n\n```method : public : SetVarchar(pos:Int) ~ Bool```", "**Sets varchar type**\n\n\n\npos - Int\n\nvalue - String\n\nreturn: Bool\n\n```method : public : SetVarchar(pos:Int, value:String) ~ Bool```"]
			},
			"Update": {
				"descriptions": ["**Executes a SQL update statement. Statement is closed after calling.**\n\n\n\nreturn: Int\n\n```method : public : Update() ~ Int```"]
			}
		}
	},
	"Database.ODBC.ResultSet": {
		"description": "ODBC result set",
		"functions": {
			"Close": {
				"descriptions": ["**Closes a result set**\n\n\n\nreturn: Nil\n\n```method : public : Close() ~ Nil```"]
			},
			"GetBit": {
				"descriptions": ["**Gets a bit value**\n\n\n\ncolumn - Int\n\nreturn: Bool\n\n```method : public : GetBit(column:Int) ~ Bool```", "**Gets a bit value**\n\n\n\ncolumn - String\n\nreturn: Bool\n\n```method : public : GetBit(column:String) ~ Bool```"]
			},
			"GetBlob": {
				"descriptions": ["**Gets a blob value**\n\n\n\ncolumn - Int\n\nbuffer - Byte[]\n\nreturn: Nil\n\n```method : public : GetBlob(column:Int, buffer:Byte[]) ~ Nil```", "**Gets a blob value**\n\n\n\ncolumn - String\n\nbuffer - Byte[]\n\nreturn: Nil\n\n```method : public : GetBlob(column:String, buffer:Byte[]) ~ Nil```"]
			},
			"GetDate": {
				"descriptions": ["**Gets a date value**\n\n\n\ncolumn - Int\n\nreturn: Database.ODBC.Date\n\n```method : public : GetDate(column:Int) ~ Database.ODBC.Date```", "**Gets a date value**\n\n\n\ncolumn - String\n\nreturn: Database.ODBC.Date\n\n```method : public : GetDate(column:String) ~ Database.ODBC.Date```"]
			},
			"GetDouble": {
				"descriptions": ["**Gets a double value**\n\n\n\ncolumn - Int\n\nreturn: Float\n\n```method : public : GetDouble(column:Int) ~ Float```", "**Gets a double value**\n\n\n\ncolumn - String\n\nreturn: Float\n\n```method : public : GetDouble(column:String) ~ Float```"]
			},
			"GetInt": {
				"descriptions": ["**Gets an integer value**\n\n\n\ncolumn - Int\n\nreturn: Int\n\n```method : public : GetInt(column:Int) ~ Int```", "**Gets an integer value**\n\n\n\ncolumn - String\n\nreturn: Int\n\n```method : public : GetInt(column:String) ~ Int```"]
			},
			"GetReal": {
				"descriptions": ["**Gets a real value**\n\n\n\ncolumn - Int\n\nreturn: Float\n\n```method : public : GetReal(column:Int) ~ Float```", "**Gets a real value**\n\n\n\ncolumn - String\n\nreturn: Float\n\n```method : public : GetReal(column:String) ~ Float```"]
			},
			"GetSmallInt": {
				"descriptions": ["**Gets a small integer value**\n\n\n\ncolumn - Int\n\nreturn: Int\n\n```method : public : GetSmallInt(column:Int) ~ Int```", "**Gets a small integer value**\n\n\n\ncolumn - String\n\nreturn: Int\n\n```method : public : GetSmallInt(column:String) ~ Int```"]
			},
			"GetTimestamp": {
				"descriptions": ["**Gets a timestamp value**\n\n\n\ncolumn - Int\n\nreturn: Timestamp\n\n```method : public : GetTimestamp(column:Int) ~ Timestamp```", "**Gets a timestamp value**\n\n\n\ncolumn - String\n\nreturn: Timestamp\n\n```method : public : GetTimestamp(column:String) ~ Timestamp```"]
			},
			"GetVarchar": {
				"descriptions": ["**Gets a varchar value**\n\n\n\ncolumn - Int\n\nreturn: String\n\n```method : public : GetVarchar(column:Int) ~ String```", "**Gets a varchar value**\n\n\n\ncolumn - String\n\nreturn: String\n\n```method : public : GetVarchar(column:String) ~ String```"]
			},
			"IsNull": {
				"descriptions": ["**Checks to see if the value fetched is NUL. This method should be called after a value is fetched using GetX(column).**\n\n\n\nreturn: Bool\n\n```method : public : IsNull() ~ Bool```"]
			},
			"Next": {
				"descriptions": ["**Moves the cursor to the next row in the result set**\n\n\n\nreturn: Bool\n\n```method : public : Next() ~ Bool```"]
			}
		}
	},
	"Database.ODBC.Timestamp": {
		"description": "ODBC Timestamp holder",
		"functions": {
			"GetDay": {
				"descriptions": ["**Gets the day**\n\n\n\nreturn: Int\n\n```method : public : GetDay() ~ Int```"]
			},
			"GetFraction": {
				"descriptions": ["**Gets the fraction of seconds**\n\n\n\nreturn: Int\n\n```method : public : GetFraction() ~ Int```"]
			},
			"GetHours": {
				"descriptions": ["**Gets the hours**\n\n\n\nreturn: Int\n\n```method : public : GetHours() ~ Int```"]
			},
			"GetMinutes": {
				"descriptions": ["**Gets the minutes**\n\n\n\nreturn: Int\n\n```method : public : GetMinutes() ~ Int```"]
			},
			"GetMonth": {
				"descriptions": ["**Gets the month**\n\n\n\nreturn: Int\n\n```method : public : GetMonth() ~ Int```"]
			},
			"GetSeconds": {
				"descriptions": ["**Gets the seconds**\n\n\n\nreturn: Int\n\n```method : public : GetSeconds() ~ Int```"]
			},
			"GetYear": {
				"descriptions": ["**Gets the year**\n\n\n\nreturn: Int\n\n```method : public : GetYear() ~ Int```"]
			},
			"New": {
				"descriptions": ["**Default constructor**\n\n\n\n```New()```", "**Copy constructor for System.Time.Date**\n\n\n\ndate - System.Time.Date\n\n```New(date:System.Time.Date)```"]
			},
			"SetDay": {
				"descriptions": ["**Sets the day**\n\n\n\nday - Int\n\nreturn: Nil\n\n```method : public : SetDay(day:Int) ~ Nil```"]
			},
			"SetHours": {
				"descriptions": ["**Sets the hours**\n\n\n\nhours - Int\n\nreturn: Nil\n\n```method : public : SetHours(hours:Int) ~ Nil```"]
			},
			"SetMinutes": {
				"descriptions": ["**Sets the minutes**\n\n\n\nminute - Int\n\nreturn: Nil\n\n```method : public : SetMinutes(minute:Int) ~ Nil```"]
			},
			"SetMonth": {
				"descriptions": ["**Sets the month**\n\n\n\nmonth - Int\n\nreturn: Nil\n\n```method : public : SetMonth(month:Int) ~ Nil```"]
			},
			"SetSeconds": {
				"descriptions": ["**Sets the seconds**\n\n\n\nsecond - Int\n\nreturn: Nil\n\n```method : public : SetSeconds(second:Int) ~ Nil```"]
			},
			"SetYear": {
				"descriptions": ["**Sets the year**\n\n\n\nyear - Int\n\nreturn: Nil\n\n```method : public : SetYear(year:Int) ~ Nil```"]
			},
			"ToDate": {
				"descriptions": ["**Converts a timestamp into a system date**\n\n\n\nreturn: System.Time.Date\n\n```method : public : ToDate() ~ System.Time.Date```"]
			},
			"ToString": {
				"descriptions": ["**Creates a string representation of the timestamp**\n\n\n\nreturn: String\n\n```method : public : ToString() ~ String```"]
			}
		}
	},
	"Encryption.Decrypt": {
		"description": "Decrypts data",
		"functions": {
			"AES256": {
				"descriptions": ["**Decrypts input using AES-256**\n\n\n\nkey - Byte[]\n\ninput - Byte[]\n\nreturn: Byte[]\n\n```function : public : AES256(key:Byte[], input:Byte[]) ~ Byte[]```"]
			},
			"Base64": {
				"descriptions": ["**Decrypts input using Base64**\n\n\n\nin - String\n\nreturn: String\n\n```function : public : native : Base64(in:String) ~ String```"]
			}
		}
	},
	"Encryption.Encrypt": {
		"description": "Encrypts data",
		"functions": {
			"AES256": {
				"descriptions": ["**Encrypt input using AES-256**\n\n\n\nkey - Byte[]\n\ninput - Byte[]\n\nreturn: Byte[]\n\n```function : public : AES256(key:Byte[], input:Byte[]) ~ Byte[]```"]
			},
			"Base64": {
				"descriptions": ["**Encode input using Base64**\n\n\n\nin - String\n\nreturn: String\n\n```function : public : native : Base64(in:String) ~ String```"]
			}
		}
	},
	"Encryption.Hash": {
		"description": "Support for one-way hashes",
		"functions": {
			"MD5": {
				"descriptions": ["**Hash input using MD5**\n\n\n\ninput - Byte[]\n\nreturn: Byte[]\n\n```function : public : MD5(input:Byte[]) ~ Byte[]```"]
			},
			"RIPEMD160": {
				"descriptions": ["**Hash input using RIPEMD digest**\n\n\n\ninput - Byte[]\n\nreturn: Byte[]\n\n```function : public : RIPEMD160(input:Byte[]) ~ Byte[]```"]
			},
			"SHA256": {
				"descriptions": ["**Hash input using SHA-256**\n\n\n\ninput - Byte[]\n\nreturn: Byte[]\n\n```function : public : SHA256(input:Byte[]) ~ Byte[]```"]
			}
		}
	},
	"Game.Framework.AnimatedImageSprite": {
		"description": "Animated sprite sheet",
		"functions": {
			"AddClip": {
				"descriptions": ["**Adds a clip**\n\n\n\nclip - Rect\n\nreturn: Nil\n\n```method : public : AddClip(clip:Rect) ~ Nil```"]
			},
			"AddClips": {
				"descriptions": ["**Adds clips**\n\n\n\nnum_x_clips - Int\n\nx_clip_size - Int\n\nnum_y_clips - Int\n\ny_clip_size - Int\n\nreturn: Nil\n\n```method : public : AddClips(num_x_clips:Int, x_clip_size:Int, num_y_clips:Int, y_clip_size:Int) ~ Nil```"]
			},
			"GetClipCount": {
				"descriptions": ["**Get number of clips used in the sprite sheet**\n\n\n\nreturn: Int\n\n```method : public : GetClipCount() ~ Int```"]
			},
			"Render": {
				"descriptions": ["**Renders sprite**\n\n\n\nx - Int\n\ny - Int\n\nindex - Int\n\nreturn: Nil\n\n```method : public : Render(x:Int, y:Int, index:Int) ~ Nil```", "**Renders sprite**\n\n\n\nindex - Int\n\nreturn: Nil\n\n```method : public : Render(index:Int) ~ Nil```"]
			}
		}
	},
	"Game.Framework.GameFramework": {
		"description": "Game framework",
		"functions": {
			"AddAnimatedImageSprite": {
				"descriptions": ["**Adds an image sprite to the framework**\n\n\n\nfile - String\n\nclips - Vector&lt;Rect&gt;\n\nreturn: AnimatedImageSprite\n\n```method : public : AddAnimatedImageSprite(file:String, clips:Vector&lt;Rect&gt;) ~ AnimatedImageSprite```", "**Adds an image sprite to the framework**\n\n\n\nfile - String\n\nreturn: AnimatedImageSprite\n\n```method : public : AddAnimatedImageSprite(file:String) ~ AnimatedImageSprite```"]
			},
			"AddFont": {
				"descriptions": ["**Adds a font**\n\n\n\nfile - String\n\nsize - Int\n\nreturn: Font\n\n```method : public : AddFont(file:String, size:Int) ~ Font```"]
			},
			"AddImageSprite": {
				"descriptions": ["**Adds an image sprite to the framework**\n\n\n\nfile - String\n\ncolorkey - Color\n\nrender_rect - Rect\n\nreturn: ImageSprite\n\n```method : public : AddImageSprite(file:String, colorkey:Color, render_rect:Rect) ~ ImageSprite```", "**Adds an image sprite to the framework**\n\n\n\nfile - String\n\ncolorkey - Color\n\nreturn: ImageSprite\n\n```method : public : AddImageSprite(file:String, colorkey:Color) ~ ImageSprite```", "**Adds an image sprite to the framework**\n\n\n\nfile - String\n\nreturn: ImageSprite\n\n```method : public : AddImageSprite(file:String) ~ ImageSprite```"]
			},
			"AddMixChunk": {
				"descriptions": ["**Adds a sound mix chunk**\n\n\n\nfile - String\n\nreturn: MixChunk\n\n```method : public : AddMixChunk(file:String) ~ MixChunk```"]
			},
			"AddRectangle": {
				"descriptions": ["**Adds a rectangle to the framework**\n\n\n\nw - Int\n\nh - Int\n\nreturn: Rectangle\n\n```method : public : AddRectangle(w:Int, h:Int) ~ Rectangle```"]
			},
			"AddTextSprite": {
				"descriptions": ["**Adds a text sprite to the framework**\n\n\n\nreturn: TextSprite\n\n```method : public : AddTextSprite() ~ TextSprite```"]
			},
			"AddTitledImageSprite": {
				"descriptions": ["**Adds an tiled image to the framework**\n\n\n\nfile - String\n\ncolorkey - Color\n\nreturn: TitledImageSprite\n\n```method : public : AddTitledImageSprite(file:String, colorkey:Color) ~ TitledImageSprite```"]
			},
			"BuildFromFile": {
				"descriptions": ["**Build assets from a Json file**\n\n\n\nfile - String\n\nreturn: Bool\n\n```method : public : BuildFromFile(file:String) ~ Bool```"]
			},
			"Clear": {
				"descriptions": ["**Clears the scene**\n\n\n\nreturn: Nil\n\n```method : public : Clear() ~ Nil```"]
			},
			"Debug": {
				"descriptions": ["**Prints debug message**\n\n\n\ndebug_msg - String\n\nreturn: Nil\n\n```function : public : Debug(debug_msg:String) ~ Nil```"]
			},
			"FrameEnd": {
				"descriptions": ["**Sets the end frame**\n\n\n\nreturn: Nil\n\n```method : public : FrameEnd() ~ Nil```"]
			},
			"FrameStart": {
				"descriptions": ["**Sets the start frame**\n\n\n\nreturn: Nil\n\n```method : public : FrameStart() ~ Nil```"]
			},
			"FreeFonts": {
				"descriptions": ["**Removes all font**\n\n\n\nreturn: Nil\n\n```method : public : FreeFonts() ~ Nil```"]
			},
			"FreeMixChunks": {
				"descriptions": ["**Removes all mix chunks**\n\n\n\nreturn: Nil\n\n```method : public : FreeMixChunks() ~ Nil```"]
			},
			"FreeMusic": {
				"descriptions": ["**Free music**\n\n\n\nreturn: Nil\n\n```method : public : FreeMusic() ~ Nil```"]
			},
			"FreeShapes": {
				"descriptions": ["**Removes all shapes**\n\n\n\nreturn: Nil\n\n```method : public : FreeShapes() ~ Nil```"]
			},
			"GetClearColor": {
				"descriptions": ["**Gets the clear color**\n\n\n\nreturn: Color\n\n```method : public : GetClearColor() ~ Color```"]
			},
			"GetColor": {
				"descriptions": ["**Get specified color**\n\n\n\nname - String\n\nreturn: Color\n\n```method : public : GetColor(name:String) ~ Color```"]
			},
			"GetEvent": {
				"descriptions": ["**Gets the framework event**\n\n\n\nreturn: Event\n\n```method : public : GetEvent() ~ Event```"]
			},
			"GetFont": {
				"descriptions": ["**Get specified font**\n\n\n\nname - String\n\nreturn: Font\n\n```method : public : GetFont(name:String) ~ Font```"]
			},
			"GetFps": {
				"descriptions": ["**Gets the frame per second**\n\n\n\nreturn: Int\n\n```method : public : GetFps() ~ Int```"]
			},
			"GetImageSprite": {
				"descriptions": ["**Get specified image sprite**\n\n\n\nname - String\n\nreturn: ImageSprite\n\n```method : public : GetImageSprite(name:String) ~ ImageSprite```"]
			},
			"GetMixChunk": {
				"descriptions": ["**Get mix chunk**\n\n\n\nname - String\n\nreturn: MixChunk\n\n```method : public : GetMixChunk(name:String) ~ MixChunk```"]
			},
			"GetRectangle": {
				"descriptions": ["**Get specified rectangle**\n\n\n\nname - String\n\nreturn: Rectangle\n\n```method : public : GetRectangle(name:String) ~ Rectangle```"]
			},
			"GetRenderer": {
				"descriptions": ["**Gets the framework renderer**\n\n\n\nreturn: Renderer\n\n```method : public : GetRenderer() ~ Renderer```"]
			},
			"GetTextSprite": {
				"descriptions": ["**Get specified text sprite**\n\n\n\nname - String\n\nreturn: TextSprite\n\n```method : public : GetTextSprite(name:String) ~ TextSprite```"]
			},
			"IsOk": {
				"descriptions": ["**Initialization status flag**\n\n\n\nreturn: Bool\n\n```method : public : IsOk() ~ Bool```"]
			},
			"New": {
				"descriptions": ["**Initializes game framework**\n\n\n\nscreen_width - Int\n\nscreen_height - Int\n\ntitle - String\n\nfps - Int\n\ninit_flags - Int\n\n```New(screen_width:Int, screen_height:Int, title:String, fps:Int, init_flags:Int)```", "**Initializes game framework**\n\n\n\nscreen_width - Int\n\nscreen_height - Int\n\ntitle - String\n\n```New(screen_width:Int, screen_height:Int, title:String)```"]
			},
			"Quit": {
				"descriptions": ["**Closes the framework**\n\n\n\nreturn: Nil\n\n```method : public : Quit() ~ Nil```"]
			},
			"RemoveFont": {
				"descriptions": ["**Remove chunk from framework**\n\n\n\nfont - Font\n\nreturn: Bool\n\n```method : public : RemoveFont(font:Font) ~ Bool```"]
			},
			"RemoveMixChunk": {
				"descriptions": ["**Remove chunk from framework**\n\n\n\nmix_chunk - MixChunk\n\nreturn: Bool\n\n```method : public : RemoveMixChunk(mix_chunk:MixChunk) ~ Bool```"]
			},
			"RemoveSprite": {
				"descriptions": ["**Remove shape from framework**\n\n\n\nshape - Shape\n\nreturn: Bool\n\n```method : public : RemoveSprite(shape:Shape) ~ Bool```"]
			},
			"SetClearColor": {
				"descriptions": ["**Sets the clear color**\n\n\n\ncolor - Color\n\nreturn: Nil\n\n```method : public : SetClearColor(color:Color) ~ Nil```"]
			},
			"SetFont": {
				"descriptions": ["**Sets the game font**\n\n\n\nfont - Font\n\nreturn: Nil\n\n```method : public : SetFont(font:Font) ~ Nil```"]
			},
			"SetMusicChunk": {
				"descriptions": ["**Adds music chunk**\n\n\n\nfile - String\n\nreturn: MixMusic\n\n```method : public : SetMusicChunk(file:String) ~ MixMusic```"]
			},
			"Show": {
				"descriptions": ["**Shows the scene**\n\n\n\nreturn: Nil\n\n```method : public : Show() ~ Nil```"]
			}
		}
	},
	"Game.Framework.ImageSprite": {
		"description": "Sprite image",
		"functions": {
			"GetAngle": {
				"descriptions": ["**Gets the image angle**\n\n\n\nreturn: Float\n\n```method : public : GetAngle() ~ Float```"]
			},
			"GetFlip": {
				"descriptions": ["**Gets image flip**\n\n\n\nreturn: RendererFlip\n\n```method : public : GetFlip() ~ RendererFlip```"]
			},
			"IsOk": {
				"descriptions": ["**Initialization status flag**\n\n\n\nreturn: Bool\n\n```method : public : IsOk() ~ Bool```"]
			},
			"LoadImage": {
				"descriptions": ["**Loads an image**\n\n\n\nfile - String\n\ncolorkey - Color\n\nreturn: Bool\n\n```method : public : LoadImage(file:String, colorkey:Color) ~ Bool```"]
			},
			"Render": {
				"descriptions": ["**Renders an image**\n\n\n\nx - Int\n\ny - Int\n\nreturn: Nil\n\n```method : public : Render(x:Int, y:Int) ~ Nil```", "**Renders an image based upon position instance**\n\n\n\nreturn: Nil\n\n```method : public : Render() ~ Nil```"]
			},
			"SetAngle": {
				"descriptions": ["**Sets the image angle**\n\n\n\nangle - Float\n\nreturn: Nil\n\n```method : public : SetAngle(angle:Float) ~ Nil```"]
			},
			"SetFlip": {
				"descriptions": ["**Sets flip of image**\n\n\n\nflip - RendererFlip\n\nreturn: Nil\n\n```method : public : SetFlip(flip:RendererFlip) ~ Nil```"]
			}
		}
	},
	"Game.Framework.Position": {
		"description": "Shape position",
		"functions": {
			"AddX": {
				"descriptions": ["**Increments the current x-position**\n\n\n\nx - Int\n\nreturn: Nil\n\n```method : public : AddX(x:Int) ~ Nil```"]
			},
			"AddY": {
				"descriptions": ["**Increments the current y-position**\n\n\n\ny - Int\n\nreturn: Nil\n\n```method : public : AddY(y:Int) ~ Nil```"]
			},
			"Contains": {
				"descriptions": ["**Determines if position a point**\n\n\n\np - Point\n\nreturn: Bool\n\n```method : public : Contains(p:Point) ~ Bool```", "**Determines if position a point**\n\n\n\nx - Int\n\ny - Int\n\nreturn: Bool\n\n```method : public : Contains(x:Int, y:Int) ~ Bool```"]
			},
			"Distance": {
				"descriptions": ["**Calculates the distance between two points**\n\n\n\nx - Int\n\ny - Int\n\nreturn: Int\n\n```method : public : Distance(x:Int, y:Int) ~ Int```", "**Calculates the distance between two points**\n\n\n\npos - Position\n\nreturn: Int\n\n```method : public : Distance(pos:Position) ~ Int```"]
			},
			"GetBottom": {
				"descriptions": ["**Gets bottom position**\n\n\n\nreturn: Int\n\n```method : public : GetBottom() ~ Int```"]
			},
			"GetCenterX": {
				"descriptions": ["**Gets the center x-position**\n\n\n\nreturn: Int\n\n```method : public : GetCenterX() ~ Int```"]
			},
			"GetCenterY": {
				"descriptions": ["**Gets the center y-position**\n\n\n\nreturn: Int\n\n```method : public : GetCenterY() ~ Int```"]
			},
			"GetLeft": {
				"descriptions": ["**Gets left position**\n\n\n\nreturn: Int\n\n```method : public : GetLeft() ~ Int```"]
			},
			"GetRect": {
				"descriptions": ["**Gets bounding size**\n\n\n\nreturn: Rect\n\n```method : public : GetRect() ~ Rect```"]
			},
			"GetRight": {
				"descriptions": ["**Gets right position**\n\n\n\nreturn: Int\n\n```method : public : GetRight() ~ Int```"]
			},
			"GetTop": {
				"descriptions": ["**Gets top position**\n\n\n\nreturn: Int\n\n```method : public : GetTop() ~ Int```"]
			},
			"IntersectsLine": {
				"descriptions": ["**Determines if position intersect line**\n\n\n\nx1 - Int\n\ny1 - Int\n\nx2 - Int\n\ny2 - Int\n\nreturn: Bool\n\n```method : public : IntersectsLine(x1:Int, y1:Int, x2:Int, y2:Int) ~ Bool```"]
			},
			"New": {
				"descriptions": ["**Creates a new rectangle with given size**\n\n\n\nrect - Rect\n\n```New(rect:Rect)```", "**Creates a new rectangle with given position and size**\n\n\n\nx - Int\n\ny - Int\n\nw - Int\n\nh - Int\n\n```New(x:Int, y:Int, w:Int, h:Int)```", "**Creates a new rectangle with given size**\n\n\n\nw - Int\n\nh - Int\n\n```New(w:Int, h:Int)```"]
			},
			"Overlaps": {
				"descriptions": ["**Determines if position overlaps rectangle**\n\n\n\npos - Position\n\nreturn: Bool\n\n```method : public : native : Overlaps(pos:Position) ~ Bool```"]
			},
			"Set": {
				"descriptions": ["**Set upper left position**\n\n\n\nx - Int\n\ny - Int\n\nreturn: Nil\n\n```method : public : Set(x:Int, y:Int) ~ Nil```"]
			},
			"SetBottom": {
				"descriptions": ["**Sets bottom position**\n\n\n\ny2 - Int\n\nreturn: Nil\n\n```method : public : SetBottom(y2:Int) ~ Nil```"]
			},
			"SetCenter": {
				"descriptions": ["**Set center position**\n\n\n\nx - Int\n\ny - Int\n\nreturn: Nil\n\n```method : public : SetCenter(x:Int, y:Int) ~ Nil```"]
			},
			"SetCenterX": {
				"descriptions": ["**Set center x-position**\n\n\n\nx - Int\n\nreturn: Nil\n\n```method : public : SetCenterX(x:Int) ~ Nil```"]
			},
			"SetCenterY": {
				"descriptions": ["**Set center y-position**\n\n\n\ny - Int\n\nreturn: Nil\n\n```method : public : SetCenterY(y:Int) ~ Nil```"]
			},
			"SetLeft": {
				"descriptions": ["**Sets left position**\n\n\n\nx - Int\n\nreturn: Nil\n\n```method : public : SetLeft(x:Int) ~ Nil```"]
			},
			"SetRight": {
				"descriptions": ["**Sets right position**\n\n\n\nx2 - Int\n\nreturn: Nil\n\n```method : public : SetRight(x2:Int) ~ Nil```"]
			},
			"SetTop": {
				"descriptions": ["**Sets top position**\n\n\n\ny - Int\n\nreturn: Nil\n\n```method : public : SetTop(y:Int) ~ Nil```"]
			}
		}
	},
	"Game.Framework.Rectangle": {
		"description": "Rectangle shape",
		"functions": {
			"AddX": {
				"descriptions": ["**Increments the current x-position**\n\n\n\nx - Int\n\nreturn: Nil\n\n```method : public : AddX(x:Int) ~ Nil```"]
			},
			"AddY": {
				"descriptions": ["**Increments the current y-position**\n\n\n\ny - Int\n\nreturn: Nil\n\n```method : public : AddY(y:Int) ~ Nil```"]
			},
			"GetBottom": {
				"descriptions": ["**Gets bottom position**\n\n\n\nreturn: Int\n\n```method : public : GetBottom() ~ Int```"]
			},
			"GetCenterX": {
				"descriptions": ["**Gets the center x-position**\n\n\n\nreturn: Int\n\n```method : public : GetCenterX() ~ Int```"]
			},
			"GetColor": {
				"descriptions": ["**Gets rectangle color**\n\n\n\nreturn: Color\n\n```method : public : GetColor() ~ Color```"]
			},
			"GetFill": {
				"descriptions": ["**Sets color fill**\n\n\n\nreturn: Bool\n\n```method : public : GetFill() ~ Bool```"]
			},
			"GetHeight": {
				"descriptions": ["**Gets sprite height**\n\n\n\nreturn: Int\n\n```method : public : GetHeight() ~ Int```"]
			},
			"GetLeft": {
				"descriptions": ["**Gets left position**\n\n\n\nreturn: Int\n\n```method : public : GetLeft() ~ Int```"]
			},
			"GetPosition": {
				"descriptions": ["**Gets sprite position**\n\n\n\nreturn: Position\n\n```method : public : GetPosition() ~ Position```"]
			},
			"GetRight": {
				"descriptions": ["**Gets right position**\n\n\n\nreturn: Int\n\n```method : public : GetRight() ~ Int```"]
			},
			"GetTop": {
				"descriptions": ["**Gets top position**\n\n\n\nreturn: Int\n\n```method : public : GetTop() ~ Int```"]
			},
			"GetWidth": {
				"descriptions": ["**Gets sprite width**\n\n\n\nreturn: Int\n\n```method : public : GetWidth() ~ Int```"]
			},
			"Render": {
				"descriptions": ["**Renders an image based upon position instance**\n\n\n\nreturn: Nil\n\n```method : public : Render() ~ Nil```", "**Renders an image**\n\n\n\nx - Int\n\ny - Int\n\nreturn: Nil\n\n```method : public : Render(x:Int, y:Int) ~ Nil```"]
			},
			"Set": {
				"descriptions": ["**Sets left upper position**\n\n\n\nx - Int\n\ny - Int\n\nreturn: Nil\n\n```method : public : Set(x:Int, y:Int) ~ Nil```", "**Sets position**\n\n\n\nv2 - Vector2\n\nreturn: Nil\n\n```method : public : Set(v2:Vector2) ~ Nil```"]
			},
			"SetBottom": {
				"descriptions": ["**Sets bottom position**\n\n\n\ny2 - Int\n\nreturn: Nil\n\n```method : public : SetBottom(y2:Int) ~ Nil```"]
			},
			"SetCenter": {
				"descriptions": ["**Sets center position**\n\n\n\nx - Int\n\ny - Int\n\nreturn: Nil\n\n```method : public : SetCenter(x:Int, y:Int) ~ Nil```"]
			},
			"SetCenterX": {
				"descriptions": ["**Sets center y-position**\n\n\n\nx - Int\n\nreturn: Nil\n\n```method : public : SetCenterX(x:Int) ~ Nil```"]
			},
			"SetCenterY": {
				"descriptions": ["**Sets center y-position**\n\n\n\ny - Int\n\nreturn: Nil\n\n```method : public : SetCenterY(y:Int) ~ Nil```"]
			},
			"SetColor": {
				"descriptions": ["**Sets rectangle color**\n\n\n\ncolor - Color\n\nreturn: Nil\n\n```method : public : SetColor(color:Color) ~ Nil```"]
			},
			"SetFill": {
				"descriptions": ["**Sets color fill**\n\n\n\nfill - Bool\n\nreturn: Nil\n\n```method : public : SetFill(fill:Bool) ~ Nil```"]
			},
			"SetLeft": {
				"descriptions": ["**Sets left position**\n\n\n\nx - Int\n\nreturn: Nil\n\n```method : public : SetLeft(x:Int) ~ Nil```"]
			},
			"SetPostion": {
				"descriptions": ["**Sets the current x-position**\n\n\n\nposition - Position\n\nreturn: Nil\n\n```method : public : SetPostion(position:Position) ~ Nil```"]
			},
			"SetRight": {
				"descriptions": ["**Sets right position**\n\n\n\nx2 - Int\n\nreturn: Nil\n\n```method : public : SetRight(x2:Int) ~ Nil```"]
			},
			"SetTop": {
				"descriptions": ["**Sets top position**\n\n\n\ny - Int\n\nreturn: Nil\n\n```method : public : SetTop(y:Int) ~ Nil```"]
			}
		}
	},
	"Game.Framework.Shape": {
		"description": "Generic shape",
		"functions": {
			"Free": {
				"descriptions": ["**Called by framework to free resource**\n\n\n\nreturn: Nil\n\n```method : public : virutal : Free() ~ Nil```"]
			},
			"GetHeight": {
				"descriptions": ["**Gets sprite height**\n\n\n\nreturn: Int\n\n```method : public : virutal : GetHeight() ~ Int```"]
			},
			"GetPosition": {
				"descriptions": ["**Gets sprite position**\n\n\n\nreturn: Position\n\n```method : public : virutal : GetPosition() ~ Position```"]
			},
			"GetWidth": {
				"descriptions": ["**Gets sprite width**\n\n\n\nreturn: Int\n\n```method : public : virutal : GetWidth() ~ Int```"]
			}
		}
	},
	"Game.Framework.Sprite": {
		"description": "Bitmap sprite",
		"functions": {
			"AddX": {
				"descriptions": ["**Increments the current x-position**\n\n\n\nx - Int\n\nreturn: Nil\n\n```method : public : AddX(x:Int) ~ Nil```"]
			},
			"AddY": {
				"descriptions": ["**Increments the current y-position**\n\n\n\ny - Int\n\nreturn: Nil\n\n```method : public : AddY(y:Int) ~ Nil```"]
			},
			"Free": {
				"descriptions": ["**Destroys and frees sprite resources**\n\n\n\nreturn: Nil\n\n```method : public : Free() ~ Nil```"]
			},
			"GetBottom": {
				"descriptions": ["**Gets bottom position**\n\n\n\nreturn: Int\n\n```method : public : GetBottom() ~ Int```"]
			},
			"GetCenterX": {
				"descriptions": ["**Gets the center x-position**\n\n\n\nreturn: Int\n\n```method : public : GetCenterX() ~ Int```"]
			},
			"GetCenterY": {
				"descriptions": ["**Gets the center y-position**\n\n\n\nreturn: Int\n\n```method : public : GetCenterY() ~ Int```"]
			},
			"GetHeight": {
				"descriptions": ["**Gets sprite height**\n\n\n\nreturn: Int\n\n```method : public : GetHeight() ~ Int```"]
			},
			"GetLeft": {
				"descriptions": ["**Gets left position**\n\n\n\nreturn: Int\n\n```method : public : GetLeft() ~ Int```"]
			},
			"GetPosition": {
				"descriptions": ["**Gets sprite position**\n\n\n\nreturn: Position\n\n```method : public : GetPosition() ~ Position```"]
			},
			"GetRight": {
				"descriptions": ["**Gets right position**\n\n\n\nreturn: Int\n\n```method : public : GetRight() ~ Int```"]
			},
			"GetScale": {
				"descriptions": ["**Gets scaling percentage**\n\n\n\nreturn: Float\n\n```method : public : GetScale() ~ Float```"]
			},
			"GetTop": {
				"descriptions": ["**Gets top position**\n\n\n\nreturn: Int\n\n```method : public : GetTop() ~ Int```"]
			},
			"GetWidth": {
				"descriptions": ["**Gets sprite width**\n\n\n\nreturn: Int\n\n```method : public : GetWidth() ~ Int```"]
			},
			"Render": {
				"descriptions": ["**Renders sprite**\n\n\n\nx - Int\n\ny - Int\n\nclip - Rect\n\nangle - Float\n\ncenter - Point\n\nflip - RendererFlip\n\nreturn: Nil\n\n```method : public : Render(x:Int, y:Int, clip:Rect, angle:Float, center:Point, flip:RendererFlip) ~ Nil```"]
			},
			"Set": {
				"descriptions": ["**Sets upper left position**\n\n\n\nx - Int\n\ny - Int\n\nreturn: Nil\n\n```method : public : Set(x:Int, y:Int) ~ Nil```", "**Sets position**\n\n\n\nv2 - Vector2\n\nreturn: Nil\n\n```method : public : Set(v2:Vector2) ~ Nil```"]
			},
			"SetAlpha": {
				"descriptions": ["**Sets alpha**\n\n\n\nalpha - Int\n\nreturn: Nil\n\n```method : public : SetAlpha(alpha:Int) ~ Nil```"]
			},
			"SetBlendMode": {
				"descriptions": ["**Sets blend mode**\n\n\n\nblending - BlendMode\n\nreturn: Nil\n\n```method : public : SetBlendMode(blending:BlendMode) ~ Nil```"]
			},
			"SetBottom": {
				"descriptions": ["**Sets bottom position**\n\n\n\ny2 - Int\n\nreturn: Nil\n\n```method : public : SetBottom(y2:Int) ~ Nil```"]
			},
			"SetCenter": {
				"descriptions": ["**Sets cener position**\n\n\n\nx - Int\n\ny - Int\n\nreturn: Nil\n\n```method : public : SetCenter(x:Int, y:Int) ~ Nil```"]
			},
			"SetCenterX": {
				"descriptions": ["**Sets center x-position**\n\n\n\nx - Int\n\nreturn: Nil\n\n```method : public : SetCenterX(x:Int) ~ Nil```"]
			},
			"SetCenterY": {
				"descriptions": ["**Sets center y-position**\n\n\n\ny - Int\n\nreturn: Nil\n\n```method : public : SetCenterY(y:Int) ~ Nil```"]
			},
			"SetColor": {
				"descriptions": ["**Sets the color**\n\n\n\nred - Int\n\ngreen - Int\n\nblue - Int\n\nreturn: Nil\n\n```method : public : SetColor(red:Int, green:Int, blue:Int) ~ Nil```"]
			},
			"SetLeft": {
				"descriptions": ["**Sets left position**\n\n\n\nx - Int\n\nreturn: Nil\n\n```method : public : SetLeft(x:Int) ~ Nil```"]
			},
			"SetPostion": {
				"descriptions": ["**Sets the current x-position**\n\n\n\nposition - Position\n\nreturn: Nil\n\n```method : public : SetPostion(position:Position) ~ Nil```"]
			},
			"SetRight": {
				"descriptions": ["**Sets right position**\n\n\n\nx2 - Int\n\nreturn: Nil\n\n```method : public : SetRight(x2:Int) ~ Nil```"]
			},
			"SetScale": {
				"descriptions": ["**Sets scaling percentage**\n\n\n\nscale - Float\n\nreturn: Nil\n\n```method : public : SetScale(scale:Float) ~ Nil```"]
			},
			"SetTop": {
				"descriptions": ["**Sets top position**\n\n\n\ny - Int\n\nreturn: Nil\n\n```method : public : SetTop(y:Int) ~ Nil```"]
			}
		}
	},
	"Game.Framework.TextSprite": {
		"description": "Rendered TTF text",
		"functions": {
			"IsOk": {
				"descriptions": ["**Initialization status flag**\n\n\n\nreturn: Bool\n\n```method : public : IsOk() ~ Bool```"]
			},
			"Render": {
				"descriptions": ["**Renders an image**\n\n\n\nx - Int\n\ny - Int\n\nreturn: Nil\n\n```method : public : Render(x:Int, y:Int) ~ Nil```"]
			},
			"RenderedText": {
				"descriptions": ["**Renders the set text**\n\n\n\ntext - String\n\nreturn: Nil\n\n```method : public : RenderedText(text:String) ~ Nil```", "**Renders the set text**\n\n\n\ntext - String\n\ncolor - Color\n\nreturn: Nil\n\n```method : public : RenderedText(text:String, color:Color) ~ Nil```"]
			},
			"SetColor": {
				"descriptions": ["**Sets the text color**\n\n\n\ncolor - Color\n\nreturn: Nil\n\n```method : public : SetColor(color:Color) ~ Nil```"]
			},
			"SetFont": {
				"descriptions": ["**Sets the text font**\n\n\n\nfont - Font\n\nreturn: Nil\n\n```method : public : SetFont(font:Font) ~ Nil```"]
			}
		}
	},
	"Game.Framework.TitledImageSprite": {
		"description": "Titled image sprite",
		"functions": {
			"AddTile": {
				"descriptions": ["**Adds a tile at the specified location**\n\n\n\nx - Int\n\ny - Int\n\nreturn: ImageSprite\n\n```method : public : AddTile(x:Int, y:Int) ~ ImageSprite```"]
			},
			"AddX": {
				"descriptions": ["**Increments the current x-position**\n\n\n\nx - Int\n\nreturn: Nil\n\n```method : public : AddX(x:Int) ~ Nil```"]
			},
			"AddY": {
				"descriptions": ["**Increments the current y-position**\n\n\n\ny - Int\n\nreturn: Nil\n\n```method : public : AddY(y:Int) ~ Nil```"]
			},
			"Free": {
				"descriptions": ["**Destroys and frees sprite resources**\n\n\n\nreturn: Nil\n\n```method : public : Free() ~ Nil```"]
			},
			"GetHeight": {
				"descriptions": ["**Gets sprite height**\n\n\n\nreturn: Int\n\n```method : public : GetHeight() ~ Int```"]
			},
			"GetPosition": {
				"descriptions": ["**Gets relative sprite positions from original creation**\n\n\n\nreturn: Position\n\n```method : public : GetPosition() ~ Position```"]
			},
			"GetWidth": {
				"descriptions": ["**Gets sprite width**\n\n\n\nreturn: Int\n\n```method : public : GetWidth() ~ Int```"]
			},
			"IsOk": {
				"descriptions": ["**Initialization status flag**\n\n\n\nreturn: Bool\n\n```method : public : IsOk() ~ Bool```"]
			},
			"LoadImage": {
				"descriptions": ["**Loads an image**\n\n\n\nfile - String\n\ncolorkey - Color\n\nreturn: Bool\n\n```method : public : LoadImage(file:String, colorkey:Color) ~ Bool```"]
			},
			"RemoveTile": {
				"descriptions": ["**Removes sprite**\n\n\n\nsprite - ImageSprite\n\nreturn: Bool\n\n```method : public : RemoveTile(sprite:ImageSprite) ~ Bool```"]
			},
			"Render": {
				"descriptions": ["**Renders an images based upon position instances**\n\n\n\nreturn: Nil\n\n```method : public : Render() ~ Nil```"]
			}
		}
	},
	"Game.Framework.Vector2": {
		"description": "2D floating-point vector",
		"functions": {
			"Add": {
				"descriptions": ["**Adds to current vector**\n\n\n\nrhs - Vector2\n\nreturn: Nil\n\n```method : public : Add(rhs:Vector2) ~ Nil```", "**Add two vectors**\n\n\n\nlhs - Vector2\n\nrhs - Vector2\n\nreturn: Vector2\n\n```function : public : Add(lhs:Vector2, rhs:Vector2) ~ Vector2```"]
			},
			"AddX": {
				"descriptions": ["**Increments the current x-position**\n\n\n\nrhs - Vector2\n\nreturn: Nil\n\n```method : public : AddX(rhs:Vector2) ~ Nil```", "**Increments the current x-position**\n\n\n\nx - Int\n\nreturn: Nil\n\n```method : public : AddX(x:Int) ~ Nil```"]
			},
			"AddY": {
				"descriptions": ["**Increments the current y-position**\n\n\n\nrhs - Vector2\n\nreturn: Nil\n\n```method : public : AddY(rhs:Vector2) ~ Nil```", "**Increments the current y-position**\n\n\n\ny - Int\n\nreturn: Nil\n\n```method : public : AddY(y:Int) ~ Nil```"]
			},
			"Div": {
				"descriptions": ["**Divides current vector**\n\n\n\nrhs - Vector2\n\nreturn: Nil\n\n```method : public : Div(rhs:Vector2) ~ Nil```", "**Divides current vector**\n\n\n\nv - Float\n\nreturn: Nil\n\n```method : public : Div(v:Float) ~ Nil```", "**Divides two vectors**\n\n\n\nlhs - Vector2\n\nrhs - Vector2\n\nreturn: Vector2\n\n```function : public : Div(lhs:Vector2, rhs:Vector2) ~ Vector2```", "**Divides a vector by a value**\n\n\n\nrhs - Vector2\n\nv - Float\n\nreturn: Vector2\n\n```function : public : Div(rhs:Vector2, v:Float) ~ Vector2```"]
			},
			"DivX": {
				"descriptions": ["**Divides the current x-position**\n\n\n\nrhs - Vector2\n\nreturn: Nil\n\n```method : public : DivX(rhs:Vector2) ~ Nil```", "**Divides the current x-position**\n\n\n\nx - Int\n\nreturn: Nil\n\n```method : public : DivX(x:Int) ~ Nil```", "**Divides x-vector component by a value**\n\n\n\nrhs - Vector2\n\nv - Float\n\nreturn: Vector2\n\n```function : public : DivX(rhs:Vector2, v:Float) ~ Vector2```"]
			},
			"DivY": {
				"descriptions": ["**Divides the current y-position**\n\n\n\nrhs - Vector2\n\nreturn: Nil\n\n```method : public : DivY(rhs:Vector2) ~ Nil```", "**Divides the current y-position**\n\n\n\ny - Int\n\nreturn: Nil\n\n```method : public : DivY(y:Int) ~ Nil```", "**Divides y-vector component by a value**\n\n\n\nrhs - Vector2\n\nv - Float\n\nreturn: Vector2\n\n```function : public : DivY(rhs:Vector2, v:Float) ~ Vector2```"]
			},
			"Dot": {
				"descriptions": ["**Calculates the dot product**\n\n\n\nlhs - Vector2\n\nrhs - Vector2\n\nreturn: Float\n\n```function : public : Dot(lhs:Vector2, rhs:Vector2) ~ Float```"]
			},
			"GetX": {
				"descriptions": ["**Gets the x-position**\n\n\n\nreturn: Float\n\n```method : public : GetX() ~ Float```"]
			},
			"GetY": {
				"descriptions": ["**Gets the y-position**\n\n\n\nreturn: Float\n\n```method : public : GetY() ~ Float```"]
			},
			"Limit": {
				"descriptions": ["**Sets vector limit**\n\n\n\nv - Float\n\nreturn: Nil\n\n```method : public : Limit(v:Float) ~ Nil```", "**Sets vector limit**\n\n\n\nx - Float\n\ny - Float\n\nreturn: Nil\n\n```method : public : Limit(x:Float, y:Float) ~ Nil```"]
			},
			"Magnitude": {
				"descriptions": ["**Calculates the magnitude**\n\n\n\nreturn: Float\n\n```method : public : Magnitude() ~ Float```"]
			},
			"MagnitudeSquared": {
				"descriptions": ["**Calculates the magnitude squared**\n\n\n\nreturn: Float\n\n```method : public : MagnitudeSquared() ~ Float```"]
			},
			"Mul": {
				"descriptions": ["**Multiples current vector**\n\n\n\nrhs - Vector2\n\nreturn: Nil\n\n```method : public : Mul(rhs:Vector2) ~ Nil```", "**Multiples current vector**\n\n\n\nv - Float\n\nreturn: Nil\n\n```method : public : Mul(v:Float) ~ Nil```", "**Multiplies two vectors**\n\n\n\nlhs - Vector2\n\nrhs - Vector2\n\nreturn: Vector2\n\n```function : public : Mul(lhs:Vector2, rhs:Vector2) ~ Vector2```", "**Multiplies a vector by a value**\n\n\n\nrhs - Vector2\n\nv - Float\n\nreturn: Vector2\n\n```function : public : Mul(rhs:Vector2, v:Float) ~ Vector2```"]
			},
			"MulX": {
				"descriptions": ["**Multiplies the current x-position**\n\n\n\nrhs - Vector2\n\nreturn: Nil\n\n```method : public : MulX(rhs:Vector2) ~ Nil```", "**Multiplies the current x-position**\n\n\n\nx - Int\n\nreturn: Nil\n\n```method : public : MulX(x:Int) ~ Nil```", "**Multiplies x-vector component by a value**\n\n\n\nrhs - Vector2\n\nv - Float\n\nreturn: Vector2\n\n```function : public : MulX(rhs:Vector2, v:Float) ~ Vector2```"]
			},
			"MulY": {
				"descriptions": ["**Multiplies the current y-position**\n\n\n\nrhs - Vector2\n\nreturn: Nil\n\n```method : public : MulY(rhs:Vector2) ~ Nil```", "**Multiplies the current y-position**\n\n\n\ny - Int\n\nreturn: Nil\n\n```method : public : MulY(y:Int) ~ Nil```", "**Multiplies y-vector component by a value**\n\n\n\nrhs - Vector2\n\nv - Float\n\nreturn: Vector2\n\n```function : public : MulY(rhs:Vector2, v:Float) ~ Vector2```"]
			},
			"New": {
				"descriptions": ["**Creates a new vector**\n\n\n\n```New()```", "**Creates a new vector**\n\n\n\nx - Float\n\ny - Float\n\n```New(x:Float, y:Float)```"]
			},
			"Normalize": {
				"descriptions": ["**Normalizes a unit vector**\n\n\n\nreturn: Nil\n\n```method : public : Normalize() ~ Nil```"]
			},
			"Set": {
				"descriptions": ["**Sets the x and y positions**\n\n\n\nx - Float\n\ny - Float\n\nreturn: Nil\n\n```method : public : Set(x:Float, y:Float) ~ Nil```"]
			},
			"SetX": {
				"descriptions": ["**Sets the x-position**\n\n\n\nx - Float\n\nreturn: Nil\n\n```method : public : SetX(x:Float) ~ Nil```"]
			},
			"SetY": {
				"descriptions": ["**Sets the y-position**\n\n\n\ny - Float\n\nreturn: Nil\n\n```method : public : SetY(y:Float) ~ Nil```"]
			},
			"Sub": {
				"descriptions": ["**Subtracts from current vector**\n\n\n\nrhs - Vector2\n\nreturn: Nil\n\n```method : public : Sub(rhs:Vector2) ~ Nil```", "**Subtract two vectors**\n\n\n\nlhs - Vector2\n\nrhs - Vector2\n\nreturn: Vector2\n\n```function : public : Sub(lhs:Vector2, rhs:Vector2) ~ Vector2```"]
			},
			"SubX": {
				"descriptions": ["**Decrements the current x-position**\n\n\n\nrhs - Vector2\n\nreturn: Nil\n\n```method : public : SubX(rhs:Vector2) ~ Nil```", "**Decrements the current x-position**\n\n\n\nx - Int\n\nreturn: Nil\n\n```method : public : SubX(x:Int) ~ Nil```"]
			},
			"SubY": {
				"descriptions": ["**Decrements the current y-position**\n\n\n\nrhs - Vector2\n\nreturn: Nil\n\n```method : public : SubY(rhs:Vector2) ~ Nil```", "**Decrements the current y-position**\n\n\n\ny - Int\n\nreturn: Nil\n\n```method : public : SubY(y:Int) ~ Nil```"]
			},
			"ToString": {
				"descriptions": ["**String representation of vector**\n\n\n\nreturn: String\n\n```method : public : ToString() ~ String```"]
			},
			"Zero": {
				"descriptions": ["**Sets vector to zero**\n\n\n\nreturn: Nil\n\n```method : public : Zero() ~ Nil```"]
			}
		}
	},
	"Game.SDL2.CPU": {
		"description": "Operations for gathering information about the processor's features",
		"functions": {
			"GetCacheLineSize": {
				"descriptions": ["**Determine the L1 cache line size of the CPU**\n\n\n\nreturn: Int\n\n```function : public : GetCacheLineSize() ~ Int```"]
			},
			"GetCount": {
				"descriptions": ["**Get the number of CPU cores available**\n\n\n\nreturn: Int\n\n```function : public : GetCount() ~ Int```"]
			},
			"GetSystemRAM": {
				"descriptions": ["**Get the amount of RAM configured in the system**\n\n\n\nreturn: Int\n\n```function : public : GetSystemRAM() ~ Int```"]
			},
			"Has3DNow": {
				"descriptions": ["**Determine whether the CPU has 3DNow! features**\n\n\n\nreturn: Bool\n\n```function : public : Has3DNow() ~ Bool```"]
			},
			"HasAVX": {
				"descriptions": ["**Determine whether the CPU has AVX features**\n\n\n\nreturn: Bool\n\n```function : public : HasAVX() ~ Bool```"]
			},
			"HasAVX2": {
				"descriptions": ["**Determine whether the CPU has AVX2 features**\n\n\n\nreturn: Bool\n\n```function : public : HasAVX2() ~ Bool```"]
			},
			"HasAltiVec": {
				"descriptions": ["**Determine whether the CPU has AltiVec features**\n\n\n\nreturn: Bool\n\n```function : public : HasAltiVec() ~ Bool```"]
			},
			"HasMMX": {
				"descriptions": ["**Determine whether the CPU has MMX features**\n\n\n\nreturn: Bool\n\n```function : public : HasMMX() ~ Bool```"]
			},
			"HasRDTSC": {
				"descriptions": ["**Determine whether the CPU has the RDTSC instruction**\n\n\n\nreturn: Bool\n\n```function : public : HasRDTSC() ~ Bool```"]
			},
			"HasSSE": {
				"descriptions": ["**Determine whether the CPU has SSE features**\n\n\n\nreturn: Bool\n\n```function : public : HasSSE() ~ Bool```"]
			},
			"HasSSE2": {
				"descriptions": ["**Determine whether the CPU has SSE2 features**\n\n\n\nreturn: Bool\n\n```function : public : HasSSE2() ~ Bool```"]
			},
			"HasSSE3": {
				"descriptions": ["**Determine whether the CPU has SSE3 features**\n\n\n\nreturn: Bool\n\n```function : public : HasSSE3() ~ Bool```"]
			},
			"HasSSE42": {
				"descriptions": ["**Determine whether the CPU has SSE 4.2 features**\n\n\n\nreturn: Bool\n\n```function : public : HasSSE42() ~ Bool```"]
			}
		}
	},
	"Game.SDL2.Clipboard": {
		"description": "Clipboard handling",
		"functions": {
			"GetClipboardText": {
				"descriptions": ["**Get UTF-8 text from the clipboard**\n\n\n\nreturn: String\n\n```function : public : GetClipboardText() ~ String```"]
			},
			"HasClipboardText": {
				"descriptions": ["**Flag indicating whether the clipboard exists and contains a text string that is non-empty**\n\n\n\nreturn: Bool\n\n```function : public : HasClipboardText() ~ Bool```"]
			},
			"SetClipboardText": {
				"descriptions": ["**Put UTF-8 text into the clipboard.**\n\n\n\ntext - String\n\nreturn: Int\n\n```function : public : SetClipboardText(text:String) ~ Int```"]
			}
		}
	},
	"Game.SDL2.Color": {
		"description": "Structure that represents a color",
		"functions": {
			"GetA": {
				"descriptions": ["**Get alpha**\n\n\n\nreturn: Int\n\n```method : public : GetA() ~ Int```"]
			},
			"GetB": {
				"descriptions": ["**Get blue**\n\n\n\nreturn: Int\n\n```method : public : GetB() ~ Int```"]
			},
			"GetG": {
				"descriptions": ["**Get green**\n\n\n\nreturn: Int\n\n```method : public : GetG() ~ Int```"]
			},
			"GetR": {
				"descriptions": ["**Get red**\n\n\n\nreturn: Int\n\n```method : public : GetR() ~ Int```"]
			},
			"New": {
				"descriptions": ["**Default black color**\n\n\n\n```New()```", "**RGB Color with alpha set to 255**\n\n\n\nr - Int\n\ng - Int\n\nb - Int\n\n```New(r:Int, g:Int, b:Int)```", "**RGBA color**\n\n\n\nr - Int\n\ng - Int\n\nb - Int\n\na - Int\n\n```New(r:Int, g:Int, b:Int, a:Int)```"]
			},
			"SetA": {
				"descriptions": ["**Set alpha**\n\n\n\na - Int\n\nreturn: Nil\n\n```method : public : SetA(a:Int) ~ Nil```"]
			},
			"SetB": {
				"descriptions": ["**Set blue**\n\n\n\nb - Int\n\nreturn: Nil\n\n```method : public : SetB(b:Int) ~ Nil```"]
			},
			"SetG": {
				"descriptions": ["**Set green**\n\n\n\ng - Int\n\nreturn: Nil\n\n```method : public : SetG(g:Int) ~ Nil```"]
			},
			"SetR": {
				"descriptions": ["**Set red**\n\n\n\nr - Int\n\nreturn: Nil\n\n```method : public : SetR(r:Int) ~ Nil```"]
			},
			"ToString": {
				"descriptions": ["**String RGBA representation**\n\n\n\nreturn: String\n\n```method : public : ToString() ~ String```"]
			}
		}
	},
	"Game.SDL2.Core": {
		"description": "SDL core operations",
		"functions": {
			"ClearError": {
				"descriptions": ["**Clear any previous error message**\n\n\n\nreturn: Nil\n\n```function : public : ClearError() ~ Nil```"]
			},
			"GLExtensionSupported": {
				"descriptions": ["**Check if an OpenGL extension is supported for the current context**\n\n\n\nextension - String\n\nreturn: Bool\n\n```function : public : GLExtensionSupported(extension:String) ~ Bool```"]
			},
			"GLGetAttribute": {
				"descriptions": ["**Get the actual value for an attribute from the current context**\n\n\n\nattr - GLattr\n\nvalue - IntHolder\n\nreturn: Int\n\n```function : public : GLGetAttribute(attr:GLattr, value:IntHolder) ~ Int```"]
			},
			"GLGetCurrentWindow": {
				"descriptions": ["**Get the currently active OpenGL window**\n\n\n\nreturn: Window\n\n```function : public : GLGetCurrentWindow() ~ Window```"]
			},
			"GLGetSwapInterval": {
				"descriptions": ["**Get the swap interval for the current OpenGL context**\n\n\n\nreturn: Int\n\n```function : public : GLGetSwapInterval() ~ Int```"]
			},
			"GLLoadLibrary": {
				"descriptions": ["**dynamically load an OpenGL library**\n\n\n\npath - String\n\nreturn: Int\n\n```function : public : GLLoadLibrary(path:String) ~ Int```"]
			},
			"GLResetAttributes": {
				"descriptions": ["**Reset all previously set OpenGL context attributes to their default values**\n\n\n\nreturn: Nil\n\n```function : public : GLResetAttributes() ~ Nil```"]
			},
			"GLSetAttribute": {
				"descriptions": ["**Set an OpenGL window attribute before window creation**\n\n\n\nattr - GLattr\n\nvalue - Int\n\nreturn: Int\n\n```function : public : GLSetAttribute(attr:GLattr, value:Int) ~ Int```"]
			},
			"GLSetSwapInterval": {
				"descriptions": ["**Set the swap interval for the current OpenGL context**\n\n\n\ninterval - Int\n\nreturn: Int\n\n```function : public : GLSetSwapInterval(interval:Int) ~ Int```"]
			},
			"GLUnloadLibrary": {
				"descriptions": ["**Unload the OpenGL library previously loaded**\n\n\n\nreturn: Nil\n\n```function : public : GLUnloadLibrary() ~ Nil```"]
			},
			"GetError": {
				"descriptions": ["**Retrieve a message about the last error that occurred**\n\n\n\nreturn: String\n\n```function : public : GetError() ~ String```"]
			},
			"Init": {
				"descriptions": ["**Initialize the SDL library. This must be called before using most other SDL functions.**\n\n\n\nflags - Int\n\nreturn: Int\n\n```function : public : Init(flags:Int) ~ Int```"]
			},
			"InitSubSystem": {
				"descriptions": ["**Initialize specific SDL subsystems**\n\n\n\nflags - Int\n\nreturn: Int\n\n```function : public : InitSubSystem(flags:Int) ~ Int```"]
			},
			"Quit": {
				"descriptions": ["**Clean up all initialized subsystems. You should call it upon all exit conditions.**\n\n\n\nreturn: Nil\n\n```function : public : Quit() ~ Nil```"]
			},
			"QuitSubSystem": {
				"descriptions": ["**Shut down specific SDL subsystems.**\n\n\n\nflags - Int\n\nreturn: Nil\n\n```function : public : QuitSubSystem(flags:Int) ~ Nil```"]
			},
			"WasInit": {
				"descriptions": ["**Mask of the specified subsystems which have previously been initialized**\n\n\n\nflags - Int\n\nreturn: Int\n\n```function : public : WasInit(flags:Int) ~ Int```"]
			}
		}
	},
	"Game.SDL2.Cursor": {
		"description": "Mouse cursor operations",
		"functions": {
			"GetGlobalMouseState": {
				"descriptions": ["**Get the current state of the mouse in relation to the desktop**\n\n\n\nx - IntHolder\n\ny - IntHolder\n\nreturn: Int\n\n```function : public : GetGlobalMouseState(x:IntHolder, y:IntHolder) ~ Int```"]
			},
			"GetMouseState": {
				"descriptions": ["**Retrieve the current state of the mouse**\n\n\n\nx - IntHolder\n\ny - IntHolder\n\nreturn: Int\n\n```function : public : GetMouseState(x:IntHolder, y:IntHolder) ~ Int```"]
			}
		}
	},
	"Game.SDL2.Display": {
		"description": "Video display",
		"functions": {
			"GetClosestDisplayMode": {
				"descriptions": ["**Get the closest match to the requested display mode**\n\n\n\ndisplayIndex - Int\n\nmode - DisplayMode\n\nclosest - DisplayMode\n\nreturn: Bool\n\n```function : public : GetClosestDisplayMode(displayIndex:Int, mode:DisplayMode, closest:DisplayMode) ~ Bool```"]
			},
			"GetCurrentDisplayMode": {
				"descriptions": ["**Get information about the current display mode**\n\n\n\ndisplayIndex - Int\n\nmode - DisplayMode\n\nreturn: Int\n\n```function : public : GetCurrentDisplayMode(displayIndex:Int, mode:DisplayMode) ~ Int```"]
			},
			"GetCurrentVideoDriver": {
				"descriptions": ["**Name of the currently initialized video driver**\n\n\n\nreturn: String\n\n```function : public : GetCurrentVideoDriver() ~ String```"]
			},
			"GetDisplayBounds": {
				"descriptions": ["**Get the desktop area represented by a display, with the primary display located at 0,0**\n\n\n\ndisplayIndex - Int\n\nrect - Rect\n\nreturn: Int\n\n```function : public : GetDisplayBounds(displayIndex:Int, rect:Rect) ~ Int```"]
			},
			"GetDisplayMode": {
				"descriptions": ["**Get information about a specific display mode**\n\n\n\ndisplayIndex - Int\n\nmodeIndex - Int\n\nmode - DisplayMode\n\nreturn: Int\n\n```function : public : GetDisplayMode(displayIndex:Int, modeIndex:Int, mode:DisplayMode) ~ Int```"]
			},
			"GetDisplayName": {
				"descriptions": ["**Get the name of a display in UTF-8 encoding**\n\n\n\ndisplayIndex - Int\n\nreturn: String\n\n```function : public : GetDisplayName(displayIndex:Int) ~ String```"]
			},
			"GetNumDisplayModes": {
				"descriptions": ["**Get the number of available display modes**\n\n\n\ndisplayIndex - Int\n\nreturn: Int\n\n```function : public : GetNumDisplayModes(displayIndex:Int) ~ Int```"]
			},
			"GetNumVideoDisplays": {
				"descriptions": ["**Get the number of available video displays**\n\n\n\nreturn: Int\n\n```function : public : GetNumVideoDisplays() ~ Int```"]
			},
			"GetNumVideoDrivers": {
				"descriptions": ["**Get the number of video drivers compiled into SDL**\n\n\n\nreturn: Int\n\n```function : public : GetNumVideoDrivers() ~ Int```"]
			},
			"GetVideoDriver": {
				"descriptions": ["**Get the name of a built in video driver**\n\n\n\nindex - Int\n\nreturn: String\n\n```function : public : GetVideoDriver(index:Int) ~ String```"]
			},
			"VideoInit": {
				"descriptions": ["**Initialize the video subsystem, optionally specifying a video driver**\n\n\n\ndriver_name - String\n\nreturn: Int\n\n```function : public : VideoInit(driver_name:String) ~ Int```"]
			},
			"VideoQuit": {
				"descriptions": ["**Shut down the video subsystem**\n\n\n\nreturn: Nil\n\n```function : public : VideoQuit() ~ Nil```"]
			}
		}
	},
	"Game.SDL2.DisplayMode": {
		"description": "Contains the description of a display mode",
		"functions": {
			"GetFormat": {
				"descriptions": ["**Get the format**\n\n\n\nreturn: Int\n\n```method : public : GetFormat() ~ Int```"]
			},
			"GetH": {
				"descriptions": ["**Get height**\n\n\n\nreturn: Int\n\n```method : public : GetH() ~ Int```"]
			},
			"GetRefreshRate": {
				"descriptions": ["**Get refresh rate**\n\n\n\nreturn: Int\n\n```method : public : GetRefreshRate() ~ Int```"]
			},
			"GetW": {
				"descriptions": ["**Get width**\n\n\n\nreturn: Int\n\n```method : public : GetW() ~ Int```"]
			},
			"New": {
				"descriptions": ["**Constructor**\n\n\n\nformat - Int\n\nw - Int\n\nh - Int\n\nrefresh_rate - Int\n\n```New(format:Int, w:Int, h:Int, refresh_rate:Int)```"]
			},
			"SetFormat": {
				"descriptions": ["**Set the format**\n\n\n\nformat - Int\n\nreturn: Nil\n\n```method : public : SetFormat(format:Int) ~ Nil```"]
			},
			"SetH": {
				"descriptions": ["**Set height**\n\n\n\nh - Int\n\nreturn: Nil\n\n```method : public : SetH(h:Int) ~ Nil```"]
			},
			"SetRefreshRate": {
				"descriptions": ["**Set refresh rate**\n\n\n\nrefresh_rate - Int\n\nreturn: Nil\n\n```method : public : SetRefreshRate(refresh_rate:Int) ~ Nil```"]
			},
			"SetW": {
				"descriptions": ["**Set width**\n\n\n\nw - Int\n\nreturn: Nil\n\n```method : public : SetW(w:Int) ~ Nil```"]
			}
		}
	},
	"Game.SDL2.Event": {
		"description": "SDL event",
		"functions": {
			"Flush": {
				"descriptions": ["**Clear events from the event queue**\n\n\n\ntype - Int\n\nreturn: Nil\n\n```function : public : Flush(type:Int) ~ Nil```"]
			},
			"Free": {
				"descriptions": ["**Frees the event**\n\n\n\nreturn: Nil\n\n```method : public : Free() ~ Nil```"]
			},
			"GetJAxis": {
				"descriptions": ["**Get joystick axis event**\n\n\n\nreturn: JoyAxisEvent\n\n```method : public : GetJAxis() ~ JoyAxisEvent```"]
			},
			"GetJButton": {
				"descriptions": ["**Get joystick button event**\n\n\n\nreturn: JoyButtonEvent\n\n```method : public : GetJButton() ~ JoyButtonEvent```"]
			},
			"GetJHat": {
				"descriptions": ["**Get joystick hat event**\n\n\n\nreturn: JoyHatEvent\n\n```method : public : GetJHat() ~ JoyHatEvent```"]
			},
			"GetKey": {
				"descriptions": ["**Get keyboard event**\n\n\n\nreturn: KeyboardEvent\n\n```method : public : GetKey() ~ KeyboardEvent```"]
			},
			"GetMButton": {
				"descriptions": ["**Get mouse button event**\n\n\n\nreturn: MouseButtonEvent\n\n```method : public : GetMButton() ~ MouseButtonEvent```"]
			},
			"GetMouseMotion": {
				"descriptions": ["**Get mouse motion event**\n\n\n\nreturn: MouseMotionEvent\n\n```method : public : GetMouseMotion() ~ MouseMotionEvent```"]
			},
			"GetMouseWheel": {
				"descriptions": ["**Get mouse wheel event**\n\n\n\nreturn: MouseWheelEvent\n\n```method : public : GetMouseWheel() ~ MouseWheelEvent```"]
			},
			"GetTextInput": {
				"descriptions": ["**Get text input event**\n\n\n\nreturn: TextInputEvent\n\n```method : public : GetTextInput() ~ TextInputEvent```"]
			},
			"GetType": {
				"descriptions": ["**Event type**\n\n\n\nreturn: EventType\n\n```method : public : GetType() ~ EventType```"]
			},
			"Has": {
				"descriptions": ["**Check for the existence of certain event types in the event queue**\n\n\n\ntype - Int\n\nreturn: Bool\n\n```function : public : Has(type:Int) ~ Bool```"]
			},
			"IsNull": {
				"descriptions": ["**Determines if the underlying SDL C-struct is NULL**\n\n\n\nreturn: Bool\n\n```method : public : IsNull() ~ Bool```"]
			},
			"New": {
				"descriptions": ["**Create a new event instance**\n\n\n\n```New()```"]
			},
			"Peeps": {
				"descriptions": ["**Check the event queue for messages and optionally return them**\n\n\n\nnumevents - Int\n\naction - EventAction\n\nminType - Int\n\nmaxType - Int\n\nreturn: Int\n\n```method : public : Peeps(numevents:Int, action:EventAction, minType:Int, maxType:Int) ~ Int```"]
			},
			"Poll": {
				"descriptions": ["**Poll for currently pending events**\n\n\n\nreturn: Int\n\n```method : public : Poll() ~ Int```"]
			},
			"Pump": {
				"descriptions": ["**Pump the event loop, gathering events from the input devices**\n\n\n\nreturn: Nil\n\n```function : public : Pump() ~ Nil```"]
			},
			"Push": {
				"descriptions": ["**Add an event to the event queue**\n\n\n\nreturn: Int\n\n```method : public : Push() ~ Int```"]
			},
			"Registers": {
				"descriptions": ["**Allocate a set of user-defined events, and return the beginning event number for that set of events**\n\n\n\nnumevents - Int\n\nreturn: Int\n\n```function : public : Registers(numevents:Int) ~ Int```"]
			},
			"State": {
				"descriptions": ["**Allows you to set the state of processing certain events.**\n\n\n\ntype - Int\n\nstate - Int\n\nreturn: Int\n\n```function : public : State(type:Int, state:Int) ~ Int```"]
			},
			"Wait": {
				"descriptions": ["**Waits indefinitely for the next available event.**\n\n\n\nreturn: Int\n\n```method : public : Wait() ~ Int```"]
			},
			"WaitTimeout": {
				"descriptions": ["**Waits until the specified timeout (in milliseconds) for the next available event**\n\n\n\ntimeout - Int\n\nreturn: Int\n\n```method : public : WaitTimeout(timeout:Int) ~ Int```"]
			}
		}
	},
	"Game.SDL2.Filesystem": {
		"description": "Filesystem helper functions",
		"functions": {
			"GetBasePath": {
				"descriptions": ["**Get the directory where the application was run from. This is where the application data directory is.**\n\n\n\nreturn: String\n\n```function : public : GetBasePath() ~ String```"]
			},
			"GetPrefPath": {
				"descriptions": ["**Use this function to get the "pref dir". This is meant to be where the application can write personal files (Preferences and save games, etc.) that are specific to the application. This directory is unique per user and per application.**\n\n\n\norg - String\n\napp - String\n\nreturn: String\n\n```function : public : GetPrefPath(org:String, app:String) ~ String```"]
			}
		}
	},
	"Game.SDL2.Font": {
		"description": "TrueType font rendering",
		"functions": {
			"Init": {
				"descriptions": ["**Initialize the TrueType font APIs**\n\n\n\nreturn: Int\n\n```function : public : Init() ~ Int```"]
			},
			"IsNull": {
				"descriptions": ["**Determines if the underlying SDL C-struct is NULL**\n\n\n\nreturn: Bool\n\n```method : public : IsNull() ~ Bool```"]
			},
			"New": {
				"descriptions": ["**Load file for use as a font, this can load TTF and FON files.**\n\n\n\nfile - String\n\nptsize - Int\n\n```New(file:String, ptsize:Int)```", "**Load file for use as a font, this can load TTF and FON files.**\n\n\n\nfile - String\n\nptsize - Int\n\nindex - Int\n\n```New(file:String, ptsize:Int, index:Int)```"]
			},
			"Quit": {
				"descriptions": ["**Shutdown and cleanup the TrueType font APIs**\n\n\n\nreturn: Nil\n\n```function : public : Quit() ~ Nil```"]
			},
			"RenderTextBlended": {
				"descriptions": ["**Render the LATIN1 encoded text blended**\n\n\n\ntext - String\n\nfg - Color\n\nreturn: Surface\n\n```method : public : RenderTextBlended(text:String, fg:Color) ~ Surface```"]
			},
			"RenderTextShaded": {
				"descriptions": ["**Render the LATIN1 encoded text shaded**\n\n\n\ntext - String\n\nfg - Color\n\nbg - Color\n\nreturn: Surface\n\n```method : public : RenderTextShaded(text:String, fg:Color, bg:Color) ~ Surface```"]
			},
			"RenderTextSolid": {
				"descriptions": ["**Render the LATIN1 encoded text blended**\n\n\n\ntext - String\n\nfg - Color\n\nreturn: Surface\n\n```method : public : RenderTextSolid(text:String, fg:Color) ~ Surface```"]
			},
			"RenderUTF8Blended": {
				"descriptions": ["**Render the UTF8 encoded text blended**\n\n\n\ntext - String\n\nfg - Color\n\nreturn: Surface\n\n```method : public : RenderUTF8Blended(text:String, fg:Color) ~ Surface```"]
			},
			"RenderUTF8Shaded": {
				"descriptions": ["**Render the UTF8 encoded text shaded**\n\n\n\ntext - String\n\nfg - Color\n\nbg - Color\n\nreturn: Surface\n\n```method : public : RenderUTF8Shaded(text:String, fg:Color, bg:Color) ~ Surface```"]
			},
			"RenderUTF8Solid": {
				"descriptions": ["**Render the UTF8 encoded text blended**\n\n\n\ntext - String\n\nfg - Color\n\nreturn: Surface\n\n```method : public : RenderUTF8Solid(text:String, fg:Color) ~ Surface```"]
			}
		}
	},
	"Game.SDL2.Hints": {
		"description": "Configuration management",
		"functions": {
			"Clear": {
				"descriptions": ["**Clear all hints**\n\n\n\nreturn: Nil\n\n```function : public : Clear() ~ Nil```"]
			},
			"Get": {
				"descriptions": ["**Get the value of a hint.**\n\n\n\nname - String\n\nreturn: String\n\n```function : public : Get(name:String) ~ String```"]
			},
			"Set": {
				"descriptions": ["**Set a hint with normal priority.**\n\n\n\nname - String\n\nvalue - String\n\nreturn: Bool\n\n```function : public : Set(name:String, value:String) ~ Bool```"]
			},
			"SetWithPriority": {
				"descriptions": ["**Set a hint with a specific priority**\n\n\n\nname - String\n\nvalue - String\n\npriority - HintPriority\n\nreturn: Bool\n\n```function : public : SetWithPriority(name:String, value:String, priority:HintPriority) ~ Bool```"]
			}
		}
	},
	"Game.SDL2.Image": {
		"description": "Image loading operations",
		"functions": {
			"Init": {
				"descriptions": ["**Initialize by loading support as indicated by the flags**\n\n\n\nflags - Int\n\nreturn: Int\n\n```function : public : Init(flags:Int) ~ Int```"]
			},
			"Load": {
				"descriptions": ["**Load image into surface**\n\n\n\nfile - String\n\nreturn: Surface\n\n```function : public : Load(file:String) ~ Surface```"]
			},
			"Quit": {
				"descriptions": ["**Uninitialize image library**\n\n\n\nreturn: Nil\n\n```function : public : Quit() ~ Nil```"]
			}
		}
	},
	"Game.SDL2.JoyAxisEvent": {
		"description": "Joysticks axis event",
		"functions": {
			"GetAxis": {
				"descriptions": ["**Index of the axis that changed**\n\n\n\nreturn: Int\n\n```method : public : GetAxis() ~ Int```"]
			},
			"GetTimestamp": {
				"descriptions": ["**Timestamp of the event**\n\n\n\nreturn: Int\n\n```method : public : GetTimestamp() ~ Int```"]
			},
			"GetType": {
				"descriptions": ["**Event type**\n\n\n\nreturn: Int\n\n```method : public : GetType() ~ Int```"]
			},
			"GetValue": {
				"descriptions": ["**Current position of the axis (range: -32768 to 32767)**\n\n\n\nreturn: Int\n\n```method : public : GetValue() ~ Int```"]
			},
			"GetWhich": {
				"descriptions": ["**Instance ID of the joystick that reported the event**\n\n\n\nreturn: Int\n\n```method : public : GetWhich() ~ Int```"]
			}
		}
	},
	"Game.SDL2.JoyButtonEvent": {
		"description": "Joysticks button event",
		"functions": {
			"GetButton": {
				"descriptions": ["**Index of the button that changed**\n\n\n\nreturn: Int\n\n```method : public : GetButton() ~ Int```"]
			},
			"GetState": {
				"descriptions": ["**State of the button**\n\n\n\nreturn: KeyState\n\n```method : public : GetState() ~ KeyState```"]
			},
			"GetTimestamp": {
				"descriptions": ["**Timestamp of the event**\n\n\n\nreturn: Int\n\n```method : public : GetTimestamp() ~ Int```"]
			},
			"GetType": {
				"descriptions": ["**Event type**\n\n\n\nreturn: Int\n\n```method : public : GetType() ~ Int```"]
			},
			"GetWhich": {
				"descriptions": ["**Instance ID of the joystick that reported the event**\n\n\n\nreturn: Int\n\n```method : public : GetWhich() ~ Int```"]
			}
		}
	},
	"Game.SDL2.JoyHatEvent": {
		"description": "Joysticks hat event",
		"functions": {
			"GetHat": {
				"descriptions": ["**Index of the hat that changed**\n\n\n\nreturn: Int\n\n```method : public : GetHat() ~ Int```"]
			},
			"GetTimestamp": {
				"descriptions": ["**Timestamp of the event**\n\n\n\nreturn: Int\n\n```method : public : GetTimestamp() ~ Int```"]
			},
			"GetType": {
				"descriptions": ["**Event type**\n\n\n\nreturn: Int\n\n```method : public : GetType() ~ Int```"]
			},
			"GetValue": {
				"descriptions": ["**New position of the hat**\n\n\n\nreturn: JoystickHatValue\n\n```method : public : GetValue() ~ JoystickHatValue```"]
			},
			"GetWhich": {
				"descriptions": ["**Instance ID of the joystick that reported the event**\n\n\n\nreturn: Int\n\n```method : public : GetWhich() ~ Int```"]
			}
		}
	},
	"Game.SDL2.Joystick": {
		"description": "Handles inputs from joysticks",
		"functions": {
			"Free": {
				"descriptions": ["**Close joystick previously opened**\n\n\n\nreturn: Nil\n\n```method : public : Free() ~ Nil```"]
			},
			"GetName": {
				"descriptions": ["**Get the implementation dependent name of a joystick**\n\n\n\nreturn: String\n\n```method : public : GetName() ~ String```"]
			},
			"IsNull": {
				"descriptions": ["**Determines if the underlying SDL C-struct is NULL**\n\n\n\nreturn: Bool\n\n```method : public : IsNull() ~ Bool```"]
			},
			"New": {
				"descriptions": ["**Open a joystick for use**\n\n\n\ndevice_index - Int\n\n```New(device_index:Int)```"]
			},
			"Number": {
				"descriptions": ["**Count of the number of joysticks attached to the system**\n\n\n\nreturn: Int\n\n```function : public : Number() ~ Int```"]
			}
		}
	},
	"Game.SDL2.Keyboard": {
		"description": "Handles keyboard operations",
		"functions": {
			"GetModState": {
				"descriptions": ["**Get the current key modifier state for the keyboard**\n\n\n\nreturn: Keymod\n\n```function : public : GetModState() ~ Keymod```"]
			},
			"GetState": {
				"descriptions": ["**Get a snapshot of the current state of the keyboard**\n\n\n\nreturn: Byte[]\n\n```function : public : GetState() ~ Byte[]```"]
			},
			"SetTextInputRect": {
				"descriptions": ["**Set the rectangle used to type Unicode text inputs**\n\n\n\nrect - Rect\n\nreturn: Nil\n\n```function : public : SetTextInputRect(rect:Rect) ~ Nil```"]
			},
			"StartTextInput": {
				"descriptions": ["**Start accepting Unicode text input events**\n\n\n\nreturn: Nil\n\n```function : public : StartTextInput() ~ Nil```"]
			},
			"StopTextInput": {
				"descriptions": ["**Stop accepting Unicode text input events**\n\n\n\nreturn: Nil\n\n```function : public : StopTextInput() ~ Nil```"]
			}
		}
	},
	"Game.SDL2.KeyboardEvent": {
		"description": "Keyboard event",
		"functions": {
			"GetKeysym": {
				"descriptions": ["**The Keysym instance representing the key that was pressed or released**\n\n\n\nreturn: Keysym\n\n```method : public : GetKeysym() ~ Keysym```"]
			},
			"GetRepeat": {
				"descriptions": ["**Get key repeat**\n\n\n\nreturn: Int\n\n```method : public : GetRepeat() ~ Int```"]
			},
			"GetState": {
				"descriptions": ["**Get the state of the key**\n\n\n\nreturn: KeyState\n\n```method : public : GetState() ~ KeyState```"]
			},
			"GetTimestamp": {
				"descriptions": ["**Get the event type**\n\n\n\nreturn: Int\n\n```method : public : GetTimestamp() ~ Int```"]
			},
			"GetType": {
				"descriptions": ["**Get the event type**\n\n\n\nreturn: Int\n\n```method : public : GetType() ~ Int```"]
			},
			"GetWindowID": {
				"descriptions": ["**Get the timestamp of the event**\n\n\n\nreturn: Int\n\n```method : public : GetWindowID() ~ Int```"]
			}
		}
	},
	"Game.SDL2.Keysym": {
		"description": "Key information used in key events",
		"functions": {
			"GetMod": {
				"descriptions": ["**Gets the modifier**\n\n\n\nreturn: Int\n\n```method : public : GetMod() ~ Int```"]
			},
			"GetScancode": {
				"descriptions": ["**Gets the scan code**\n\n\n\nreturn: Int\n\n```method : public : GetScancode() ~ Int```"]
			},
			"GetSym": {
				"descriptions": ["**Gets the symbol**\n\n\n\nreturn: Int\n\n```method : public : GetSym() ~ Int```"]
			}
		}
	},
	"Game.SDL2.MixChunk": {
		"description": "Format for an audio chunk",
		"functions": {
			"FadeInChannel": {
				"descriptions": ["**Fade in sample**\n\n\n\nchannel - Int\n\nloops - Int\n\nms - Int\n\nreturn: Int\n\n```method : public : FadeInChannel(channel:Int, loops:Int, ms:Int) ~ Int```"]
			},
			"FadeInChannelTimed": {
				"descriptions": ["**Fade in sample**\n\n\n\nchannel - Int\n\nloops - Int\n\nms - Int\n\nticks - Int\n\nreturn: Int\n\n```method : public : FadeInChannelTimed(channel:Int, loops:Int, ms:Int, ticks:Int) ~ Int```"]
			},
			"Free": {
				"descriptions": ["**Free the memory used in chunk, and free chunk itself as well.**\n\n\n\nreturn: Nil\n\n```method : public : Free() ~ Nil```"]
			},
			"IsNull": {
				"descriptions": ["**Determines if the underlying SDL C-struct is NULL**\n\n\n\nreturn: Bool\n\n```method : public : IsNull() ~ Bool```"]
			},
			"New": {
				"descriptions": ["**Load file for use as a sample**\n\n\n\nfile - String\n\n```New(file:String)```"]
			},
			"PlayChannel": {
				"descriptions": ["**Play chunk on channel**\n\n\n\nchannel - Int\n\nloops - Int\n\nreturn: Int\n\n```method : public : PlayChannel(channel:Int, loops:Int) ~ Int```"]
			},
			"PlayChannelTimed": {
				"descriptions": ["**Play chunk on channel**\n\n\n\nchannel - Int\n\nloops - Int\n\nticks - Int\n\nreturn: Int\n\n```method : public : PlayChannelTimed(channel:Int, loops:Int, ticks:Int) ~ Int```"]
			}
		}
	},
	"Game.SDL2.MixMusic": {
		"description": "Music operations",
		"functions": {
			"FadeInMusic": {
				"descriptions": ["**Fades in music**\n\n\n\nloops - Int\n\nms - Int\n\nreturn: Int\n\n```method : public : FadeInMusic(loops:Int, ms:Int) ~ Int```"]
			},
			"FadeOutMusic": {
				"descriptions": ["**Fades out music**\n\n\n\nms - Int\n\nreturn: Int\n\n```function : public : FadeOutMusic(ms:Int) ~ Int```"]
			},
			"Free": {
				"descriptions": ["**Free the memory used in chunk, and free chunk itself as well.**\n\n\n\nreturn: Nil\n\n```method : public : Free() ~ Nil```"]
			},
			"GetVolumeMusic": {
				"descriptions": ["**Gets music volume between 0 - 128**\n\n\n\nreturn: Int\n\n```function : public : GetVolumeMusic() ~ Int```"]
			},
			"Halt": {
				"descriptions": ["**Halts music**\n\n\n\nreturn: Nil\n\n```function : public : Halt() ~ Nil```"]
			},
			"IsNull": {
				"descriptions": ["**Determines if the underlying SDL C-struct is NULL**\n\n\n\nreturn: Bool\n\n```method : public : IsNull() ~ Bool```"]
			},
			"Pause": {
				"descriptions": ["**Pauses music**\n\n\n\nreturn: Nil\n\n```function : public : Pause() ~ Nil```"]
			},
			"Paused": {
				"descriptions": ["**Pauses music**\n\n\n\nreturn: Bool\n\n```function : public : Paused() ~ Bool```"]
			},
			"PlayMusic": {
				"descriptions": ["**Plays music**\n\n\n\nloops - Int\n\nreturn: Int\n\n```method : public : PlayMusic(loops:Int) ~ Int```"]
			},
			"Playing": {
				"descriptions": ["**Plays music**\n\n\n\nreturn: Bool\n\n```function : public : Playing() ~ Bool```"]
			},
			"Resume": {
				"descriptions": ["**Resumes music**\n\n\n\nreturn: Nil\n\n```function : public : Resume() ~ Nil```"]
			},
			"VolumeMusic": {
				"descriptions": ["**Sets music volume**\n\n\n\nvolume - Int\n\nreturn: Int\n\n```function : public : VolumeMusic(volume:Int) ~ Int```"]
			}
		}
	},
	"Game.SDL2.Mixer": {
		"description": "Portable sound mixing library",
		"functions": {
			"FadeOutChannel": {
				"descriptions": ["**Gradually fade out which channel over ms milliseconds starting from now.**\n\n\n\nwhich - Int\n\nms - Int\n\nreturn: Int\n\n```function : public : FadeOutChannel(which:Int, ms:Int) ~ Int```"]
			},
			"GetVolume": {
				"descriptions": ["**Gets the current volume**\n\n\n\nchannel - Int\n\nreturn: Int\n\n```function : public : GetVolume(channel:Int) ~ Int```"]
			},
			"HaltChannel": {
				"descriptions": ["**Halt channel playback, or all channels**\n\n\n\nchannel - Int\n\nreturn: Int\n\n```function : public : HaltChannel(channel:Int) ~ Int```"]
			},
			"OpenAudio": {
				"descriptions": ["**Initialize the mixer API**\n\n\n\nfrequency - Int\n\nformat - Int\n\nchannels - Int\n\nchunksize - Int\n\nreturn: Bool\n\n```function : public : OpenAudio(frequency:Int, format:Int, channels:Int, chunksize:Int) ~ Bool```"]
			},
			"Playing": {
				"descriptions": ["**Tells you if music is actively playing, or not**\n\n\n\nchannel - Int\n\nreturn: Bool\n\n```function : public : Playing(channel:Int) ~ Bool```"]
			},
			"Quit": {
				"descriptions": ["**Shutdown and cleanup the mixer API**\n\n\n\nreturn: Nil\n\n```function : public : Quit() ~ Nil```"]
			},
			"Volume": {
				"descriptions": ["**Sets the current volume**\n\n\n\nchannel - Int\n\nvolume - Int\n\nreturn: Int\n\n```function : public : Volume(channel:Int, volume:Int) ~ Int```"]
			}
		}
	},
	"Game.SDL2.MouseButtonEvent": {
		"description": "Mouse button event",
		"functions": {
			"GetButton": {
				"descriptions": ["**Button that changed**\n\n\n\nreturn: MouseButtonValue\n\n```method : public : GetButton() ~ MouseButtonValue```"]
			},
			"GetClicks": {
				"descriptions": ["**Number of clicks**\n\n\n\nreturn: Int\n\n```method : public : GetClicks() ~ Int```"]
			},
			"GetState": {
				"descriptions": ["**State of the button**\n\n\n\nreturn: KeyState\n\n```method : public : GetState() ~ KeyState```"]
			},
			"GetTimestamp": {
				"descriptions": ["**Timestamp of the event**\n\n\n\nreturn: Int\n\n```method : public : GetTimestamp() ~ Int```"]
			},
			"GetType": {
				"descriptions": ["**Event type**\n\n\n\nreturn: Int\n\n```method : public : GetType() ~ Int```"]
			},
			"GetWhich": {
				"descriptions": ["**Mouse instance id or -1**\n\n\n\nreturn: Int\n\n```method : public : GetWhich() ~ Int```"]
			},
			"GetWindowID": {
				"descriptions": ["**Window with mouse focus, if any**\n\n\n\nreturn: Int\n\n```method : public : GetWindowID() ~ Int```"]
			},
			"GetX": {
				"descriptions": ["**X coordinate, relative to window**\n\n\n\nreturn: Int\n\n```method : public : GetX() ~ Int```"]
			},
			"GetY": {
				"descriptions": ["**Y coordinate, relative to window**\n\n\n\nreturn: Int\n\n```method : public : GetY() ~ Int```"]
			}
		}
	},
	"Game.SDL2.MouseMotionEvent": {
		"description": "Mouse motion event",
		"functions": {
			"GetRelX": {
				"descriptions": ["**Relative motion in the X direction**\n\n\n\nreturn: Int\n\n```method : public : GetRelX() ~ Int```"]
			},
			"GetRelY": {
				"descriptions": ["**Relative motion in the Y direction**\n\n\n\nreturn: Int\n\n```method : public : GetRelY() ~ Int```"]
			},
			"GetState": {
				"descriptions": ["**State of the button**\n\n\n\nreturn: Int\n\n```method : public : GetState() ~ Int```"]
			},
			"GetTimestamp": {
				"descriptions": ["**Timestamp of the event**\n\n\n\nreturn: Int\n\n```method : public : GetTimestamp() ~ Int```"]
			},
			"GetType": {
				"descriptions": ["**Event type**\n\n\n\nreturn: Int\n\n```method : public : GetType() ~ Int```"]
			},
			"GetWhich": {
				"descriptions": ["**Mouse instance id or -1**\n\n\n\nreturn: Int\n\n```method : public : GetWhich() ~ Int```"]
			},
			"GetWindowID": {
				"descriptions": ["**Window with mouse focus, if any**\n\n\n\nreturn: Int\n\n```method : public : GetWindowID() ~ Int```"]
			},
			"GetX": {
				"descriptions": ["**X coordinate, relative to window**\n\n\n\nreturn: Int\n\n```method : public : GetX() ~ Int```"]
			},
			"GetY": {
				"descriptions": ["**Y coordinate, relative to window**\n\n\n\nreturn: Int\n\n```method : public : GetY() ~ Int```"]
			}
		}
	},
	"Game.SDL2.MouseWheelEvent": {
		"description": "Mouse wheel event",
		"functions": {
			"GetDirection": {
				"descriptions": ["**Mouse wheel scroll direction**\n\n\n\nreturn: MouseWheelDirection\n\n```method : public : GetDirection() ~ MouseWheelDirection```"]
			},
			"GetTimestamp": {
				"descriptions": ["**Timestamp of the event**\n\n\n\nreturn: Int\n\n```method : public : GetTimestamp() ~ Int```"]
			},
			"GetType": {
				"descriptions": ["**Event type**\n\n\n\nreturn: Int\n\n```method : public : GetType() ~ Int```"]
			},
			"GetWhich": {
				"descriptions": ["**Mouse instance id or -1**\n\n\n\nreturn: Int\n\n```method : public : GetWhich() ~ Int```"]
			},
			"GetWindowID": {
				"descriptions": ["**Window with mouse focus, if any**\n\n\n\nreturn: Int\n\n```method : public : GetWindowID() ~ Int```"]
			},
			"GetX": {
				"descriptions": ["**Amount scrolled horizontally, positive to the right and negative to the left**\n\n\n\nreturn: Int\n\n```method : public : GetX() ~ Int```"]
			},
			"GetY": {
				"descriptions": ["**Amount scrolled vertically, positive away from the user and negative toward the user**\n\n\n\nreturn: Int\n\n```method : public : GetY() ~ Int```"]
			}
		}
	},
	"Game.SDL2.PixelData": {
		"description": "Raw pixel data for surfaces and textures",
		"functions": {
			"Copy": {
				"descriptions": ["**Copies raw pixel data**\n\n\n\ndata - PixelData\n\nreturn: Bool\n\n```method : public : Copy(data:PixelData) ~ Bool```"]
			},
			"Get": {
				"descriptions": ["**Get pixel value for index**\n\n\n\nindex - Int\n\nreturn: Int\n\n```method : public : Get(index:Int) ~ Int```", "**Get pixel value for x and y offset**\n\n\n\nx - Int\n\ny - Int\n\nreturn: Int\n\n```method : public : Get(x:Int, y:Int) ~ Int```"]
			},
			"GetHeight": {
				"descriptions": ["**Gets the height**\n\n\n\nreturn: Int\n\n```method : public : GetHeight() ~ Int```"]
			},
			"GetPitch": {
				"descriptions": ["**Gets the pitch**\n\n\n\nreturn: Int\n\n```method : public : GetPitch() ~ Int```"]
			},
			"IsNull": {
				"descriptions": ["**Determines if the underlying SDL C-struct is NULL**\n\n\n\nreturn: Bool\n\n```method : public : IsNull() ~ Bool```"]
			},
			"Set": {
				"descriptions": ["**Set pixel value for index**\n\n\n\nindex - Int\n\nvalue - Int\n\nreturn: Bool\n\n```method : public : Set(index:Int, value:Int) ~ Bool```"]
			}
		}
	},
	"Game.SDL2.PixelFormat": {
		"description": "PixelFormat class",
		"functions": {
			"GetAmask": {
				"descriptions": ["**Get mask representing the location of the alpha component of the pixel or 0 if the pixel format doesn't have any alpha information**\n\n\n\nreturn: Int\n\n```method : public : GetAmask() ~ Int```"]
			},
			"GetBitsPerPixel": {
				"descriptions": ["**Get the number of significant bits in a pixel value**\n\n\n\nreturn: Int\n\n```method : public : GetBitsPerPixel() ~ Int```"]
			},
			"GetBmask": {
				"descriptions": ["**Get mask representing the location of the blue component of the pixel**\n\n\n\nreturn: Int\n\n```method : public : GetBmask() ~ Int```"]
			},
			"GetBytesPerPixel": {
				"descriptions": ["**Get the number of bytes required to hold a pixel value**\n\n\n\nreturn: Int\n\n```method : public : GetBytesPerPixel() ~ Int```"]
			},
			"GetFormat": {
				"descriptions": ["**Get pixel format**\n\n\n\nreturn: PixelValue\n\n```method : public : GetFormat() ~ PixelValue```"]
			},
			"GetGmask": {
				"descriptions": ["**Get mask representing the location of the green component of the pixel**\n\n\n\nreturn: Int\n\n```method : public : GetGmask() ~ Int```"]
			},
			"GetRmask": {
				"descriptions": ["**Get mask representing the location of the red component of the pixel**\n\n\n\nreturn: Int\n\n```method : public : GetRmask() ~ Int```"]
			},
			"MapRGB": {
				"descriptions": ["**Map an RGB triple to an opaque pixel value for a given pixel format**\n\n\n\nr - Int\n\ng - Int\n\nb - Int\n\nreturn: Int\n\n```method : public : MapRGB(r:Int, g:Int, b:Int) ~ Int```"]
			},
			"MapRGBA": {
				"descriptions": ["**Map an RGBA quadruple to a pixel value for a given pixel format**\n\n\n\nr - Int\n\ng - Int\n\nb - Int\n\na - Int\n\nreturn: Int\n\n```method : public : MapRGBA(r:Int, g:Int, b:Int, a:Int) ~ Int```"]
			},
			"SetAmask": {
				"descriptions": ["**Set alpha mask**\n\n\n\na_mask - Int\n\nreturn: Nil\n\n```method : public : SetAmask(a_mask:Int) ~ Nil```"]
			},
			"SetBitsPerPixel": {
				"descriptions": ["**Set bits per pixel**\n\n\n\nbits_per_pixel - Int\n\nreturn: Nil\n\n```method : public : SetBitsPerPixel(bits_per_pixel:Int) ~ Nil```"]
			},
			"SetBmask": {
				"descriptions": ["**Set blue mask**\n\n\n\nb_mask - Int\n\nreturn: Nil\n\n```method : public : SetBmask(b_mask:Int) ~ Nil```"]
			},
			"SetBytesPerPixel": {
				"descriptions": ["**Set bytes per pixel**\n\n\n\nbytes_per_pixel - Int\n\nreturn: Nil\n\n```method : public : SetBytesPerPixel(bytes_per_pixel:Int) ~ Nil```"]
			},
			"SetFormat": {
				"descriptions": ["**Set pixel format**\n\n\n\nformat - Int\n\nreturn: Nil\n\n```method : public : SetFormat(format:Int) ~ Nil```"]
			},
			"SetGmask": {
				"descriptions": ["**Set green mask**\n\n\n\ng_mask - Int\n\nreturn: Nil\n\n```method : public : SetGmask(g_mask:Int) ~ Nil```"]
			},
			"SetRmask": {
				"descriptions": ["**Set red mask**\n\n\n\nr_mask - Int\n\nreturn: Nil\n\n```method : public : SetRmask(r_mask:Int) ~ Nil```"]
			}
		}
	},
	"Game.SDL2.Platform": {
		"description": "Platform specific queries",
		"functions": {
			"Get": {
				"descriptions": ["**Get the name of the platform**\n\n\n\nreturn: String\n\n```function : public : Get() ~ String```"]
			}
		}
	},
	"Game.SDL2.Point": {
		"description": "Defines a two dimensional point",
		"functions": {
			"GetX": {
				"descriptions": ["**Get x**\n\n\n\nreturn: Int\n\n```method : public : GetX() ~ Int```"]
			},
			"GetY": {
				"descriptions": ["**Get y**\n\n\n\nreturn: Int\n\n```method : public : GetY() ~ Int```"]
			},
			"New": {
				"descriptions": ["**Constructor**\n\n\n\nx - Int\n\ny - Int\n\n```New(x:Int, y:Int)```", "**Constructor set x and y to 0**\n\n\n\n```New()```"]
			},
			"SetX": {
				"descriptions": ["**Set x**\n\n\n\nx - Int\n\nreturn: Nil\n\n```method : public : SetX(x:Int) ~ Nil```"]
			},
			"SetY": {
				"descriptions": ["**Set y**\n\n\n\ny - Int\n\nreturn: Nil\n\n```method : public : SetY(y:Int) ~ Nil```"]
			},
			"ToString": {
				"descriptions": ["**String representation of point**\n\n\n\nreturn: String\n\n```method : public : ToString() ~ String```"]
			}
		}
	},
	"Game.SDL2.Power": {
		"description": "Power management routines",
		"functions": {
			"GetInfo": {
				"descriptions": ["**Get the current power supply details.**\n\n\n\nsecs - IntHolder\n\npct - IntHolder\n\nreturn: Int\n\n```function : public : GetInfo(secs:IntHolder, pct:IntHolder) ~ Int```"]
			}
		}
	},
	"Game.SDL2.Rect": {
		"description": "Definition of a rectangle, with the origin at the upper left.",
		"functions": {
			"AddH": {
				"descriptions": ["**Add to current height**\n\n\n\nh - Int\n\nreturn: Nil\n\n```method : public : AddH(h:Int) ~ Nil```"]
			},
			"AddW": {
				"descriptions": ["**Add to current width**\n\n\n\nw - Int\n\nreturn: Nil\n\n```method : public : AddW(w:Int) ~ Nil```"]
			},
			"AddX": {
				"descriptions": ["**Add to current x position**\n\n\n\nx - Int\n\nreturn: Nil\n\n```method : public : AddX(x:Int) ~ Nil```"]
			},
			"AddY": {
				"descriptions": ["**Add to current y position**\n\n\n\ny - Int\n\nreturn: Nil\n\n```method : public : AddY(y:Int) ~ Nil```"]
			},
			"GetH": {
				"descriptions": ["**Get height**\n\n\n\nreturn: Int\n\n```method : public : GetH() ~ Int```"]
			},
			"GetW": {
				"descriptions": ["**Get width**\n\n\n\nreturn: Int\n\n```method : public : GetW() ~ Int```"]
			},
			"GetX": {
				"descriptions": ["**Get X**\n\n\n\nreturn: Int\n\n```method : public : GetX() ~ Int```"]
			},
			"GetY": {
				"descriptions": ["**Get Y**\n\n\n\nreturn: Int\n\n```method : public : GetY() ~ Int```"]
			},
			"HasIntersection": {
				"descriptions": ["**Determines if two rectangles intersects**\n\n\n\nB - Rect\n\nreturn: Bool\n\n```method : public : HasIntersection(B:Rect) ~ Bool```"]
			},
			"Intersect": {
				"descriptions": ["**Calculate the intersection of two rectangles**\n\n\n\nB - Rect\n\nresult - Rect\n\nreturn: Bool\n\n```method : public : Intersect(B:Rect, result:Rect) ~ Bool```"]
			},
			"IntersectAndLine": {
				"descriptions": ["**Calculate the intersection of a rectangle and line segment**\n\n\n\nX1 - IntHolder\n\nY1 - IntHolder\n\nX2 - IntHolder\n\nY2 - IntHolder\n\nreturn: Bool\n\n```method : public : IntersectAndLine(X1:IntHolder, Y1:IntHolder, X2:IntHolder, Y2:IntHolder) ~ Bool```"]
			},
			"New": {
				"descriptions": ["**Creates a new rectangle**\n\n\n\n```New()```", "**Creates a new rectangle**\n\n\n\nw - Int\n\nh - Int\n\n```New(w:Int, h:Int)```", "**Creates a new rectangle**\n\n\n\nx - Int\n\ny - Int\n\nw - Int\n\nh - Int\n\n```New(x:Int, y:Int, w:Int, h:Int)```", "**Creates a new rectangle**\n\n\n\nrect - Rect\n\n```New(rect:Rect)```"]
			},
			"PointIn": {
				"descriptions": ["**Check if a point resides inside a rectangle**\n\n\n\np - Point\n\nreturn: Bool\n\n```method : public : PointIn(p:Point) ~ Bool```"]
			},
			"SetH": {
				"descriptions": ["**Set height**\n\n\n\nh - Int\n\nreturn: Nil\n\n```method : public : SetH(h:Int) ~ Nil```"]
			},
			"SetW": {
				"descriptions": ["**Set width**\n\n\n\nw - Int\n\nreturn: Nil\n\n```method : public : SetW(w:Int) ~ Nil```"]
			},
			"SetX": {
				"descriptions": ["**Set x-position**\n\n\n\nx - Int\n\nreturn: Nil\n\n```method : public : SetX(x:Int) ~ Nil```"]
			},
			"SetY": {
				"descriptions": ["**Set y-position**\n\n\n\ny - Int\n\nreturn: Nil\n\n```method : public : SetY(y:Int) ~ Nil```"]
			},
			"SubH": {
				"descriptions": ["**Subtracts from current height**\n\n\n\nh - Int\n\nreturn: Nil\n\n```method : public : SubH(h:Int) ~ Nil```"]
			},
			"SubW": {
				"descriptions": ["**Subtracts from current width**\n\n\n\nw - Int\n\nreturn: Nil\n\n```method : public : SubW(w:Int) ~ Nil```"]
			},
			"SubX": {
				"descriptions": ["**Subtracts from current x position**\n\n\n\nx - Int\n\nreturn: Nil\n\n```method : public : SubX(x:Int) ~ Nil```"]
			},
			"SubY": {
				"descriptions": ["**Subtracts from current y position**\n\n\n\ny - Int\n\nreturn: Nil\n\n```method : public : SubY(y:Int) ~ Nil```"]
			},
			"ToString": {
				"descriptions": ["**String representation of rect**\n\n\n\nreturn: String\n\n```method : public : ToString() ~ String```"]
			},
			"Union": {
				"descriptions": ["**Calculate the union of two rectangles**\n\n\n\nB - Rect\n\nresult - Rect\n\nreturn: Nil\n\n```method : public : Union(B:Rect, result:Rect) ~ Nil```"]
			}
		}
	},
	"Game.SDL2.Renderer": {
		"description": "Rendering state",
		"functions": {
			"AACircleColor": {
				"descriptions": ["**Raw anti-aliased circle with blending.**\n\n\n\nx - Int\n\ny - Int\n\nrad - Int\n\ncolor - Color\n\nreturn: Int\n\n```method : public : AACircleColor(x:Int, y:Int, rad:Int, color:Color) ~ Int```"]
			},
			"AAEllipseColor": {
				"descriptions": ["**Draw ellipse with blending.**\n\n\n\nx - Int\n\ny - Int\n\nrx - Int\n\nry - Int\n\ncolor - Color\n\nreturn: Int\n\n```method : public : AAEllipseColor(x:Int, y:Int, rx:Int, ry:Int, color:Color) ~ Int```"]
			},
			"AALineColor": {
				"descriptions": ["**Draw anti-aliased line with alpha blending.**\n\n\n\nx1 - Int\n\ny1 - Int\n\nx2 - Int\n\ny2 - Int\n\ncolor - Color\n\nreturn: Int\n\n```method : public : AALineColor(x1:Int, y1:Int, x2:Int, y2:Int, color:Color) ~ Int```"]
			},
			"AAPolygonColor": {
				"descriptions": ["**Draw anti-aliased polygon with alpha blending.**\n\n\n\nvx - Int[]\n\nvy - Int[]\n\ncolor - Color\n\nreturn: Int\n\n```method : public : AAPolygonColor(vx:Int[], vy:Int[], color:Color) ~ Int```"]
			},
			"AAtrigonColor": {
				"descriptions": ["**Draw anti-aliased trigon (triangle outline) with alpha blending. Note: Creates vertex array and uses aapolygon routine to render.**\n\n\n\nx1 - Int\n\ny1 - Int\n\nx2 - Int\n\ny2 - Int\n\nx3 - Int\n\ny3 - Int\n\ncolor - Color\n\nreturn: Int\n\n```method : public : AAtrigonColor(x1:Int, y1:Int, x2:Int, y2:Int, x3:Int, y3:Int, color:Color) ~ Int```"]
			},
			"ArcColor": {
				"descriptions": ["**Arc with blending.**\n\n\n\nx - Int\n\ny - Int\n\nrad - Int\n\nstart - Int\n\nend - Int\n\ncolor - Color\n\nreturn: Int\n\n```method : public : ArcColor(x:Int, y:Int, rad:Int, start:Int, end:Int, color:Color) ~ Int```"]
			},
			"BoxColor": {
				"descriptions": ["**Draw box (filled rectangle) with blending**\n\n\n\nx1 - Int\n\ny1 - Int\n\nx2 - Int\n\ny2 - Int\n\ncolor - Color\n\nreturn: Int\n\n```method : public : BoxColor(x1:Int, y1:Int, x2:Int, y2:Int, color:Color) ~ Int```"]
			},
			"CharacterColor": {
				"descriptions": ["**Draw a character of the currently set font.**\n\n\n\nx - Int\n\ny - Int\n\nc - Char\n\ncolor - Color\n\nreturn: Int\n\n```method : public : CharacterColor(x:Int, y:Int, c:Char, color:Color) ~ Int```"]
			},
			"CircleColor": {
				"descriptions": ["**Draw circle with blending.**\n\n\n\nx - Int\n\ny - Int\n\nrad - Int\n\ncolor - Color\n\nreturn: Int\n\n```method : public : CircleColor(x:Int, y:Int, rad:Int, color:Color) ~ Int```"]
			},
			"Clear": {
				"descriptions": ["**Clear the current rendering target with the drawing color**\n\n\n\nreturn: Int\n\n```method : public : Clear() ~ Int```"]
			},
			"Copy": {
				"descriptions": ["**Copy a portion of the texture to the current rendering target**\n\n\n\ntexture - Texture\n\nsrcrect - Rect\n\ndstrect - Rect\n\nreturn: Int\n\n```method : public : Copy(texture:Texture, srcrect:Rect, dstrect:Rect) ~ Int```"]
			},
			"CopyEx": {
				"descriptions": ["**Copy a portion of the texture to the current rendering target, optionally rotating it by angle around the given center and also flipping it top-bottom and/or left-right**\n\n\n\ntexture - Texture\n\nsrcrect - Rect\n\ndstrect - Rect\n\nangle - Float\n\ncenter - Point\n\nflip - RendererFlip\n\nreturn: Int\n\n```method : public : CopyEx(texture:Texture, srcrect:Rect, dstrect:Rect, angle:Float, center:Point, flip:RendererFlip) ~ Int```"]
			},
			"CreateSoftwareRenderer": {
				"descriptions": ["**Create a 2D software rendering context for a surface**\n\n\n\nsurface - Surface\n\nreturn: Renderer\n\n```function : public : CreateSoftwareRenderer(surface:Surface) ~ Renderer```"]
			},
			"CreateTexture": {
				"descriptions": ["**Create a texture for a rendering context**\n\n\n\nformat - Int\n\naccess - Int\n\nw - Int\n\nh - Int\n\nreturn: Texture\n\n```method : public : CreateTexture(format:Int, access:Int, w:Int, h:Int) ~ Texture```"]
			},
			"Destroy": {
				"descriptions": ["**Destroy the rendering context for a window and free associated textures**\n\n\n\nreturn: Nil\n\n```method : public : Destroy() ~ Nil```"]
			},
			"DrawLine": {
				"descriptions": ["**Draw a line on the current rendering target**\n\n\n\nx1 - Int\n\ny1 - Int\n\nx2 - Int\n\ny2 - Int\n\nreturn: Int\n\n```method : public : DrawLine(x1:Int, y1:Int, x2:Int, y2:Int) ~ Int```"]
			},
			"DrawPoint": {
				"descriptions": ["**Draw a point on the current rendering target**\n\n\n\nx - Int\n\ny - Int\n\nreturn: Int\n\n```method : public : DrawPoint(x:Int, y:Int) ~ Int```"]
			},
			"DrawRect": {
				"descriptions": ["**Draw a rectangle on the current rendering target**\n\n\n\nrect - Rect\n\nreturn: Int\n\n```method : public : DrawRect(rect:Rect) ~ Int```"]
			},
			"EllipseColor": {
				"descriptions": ["**Draw ellipse with blending.**\n\n\n\nx - Int\n\ny - Int\n\nrx - Int\n\nry - Int\n\ncolor - Color\n\nreturn: Int\n\n```method : public : EllipseColor(x:Int, y:Int, rx:Int, ry:Int, color:Color) ~ Int```"]
			},
			"FillRect": {
				"descriptions": ["**Fill a rectangle on the current rendering target with the drawing color**\n\n\n\nrect - Rect\n\nreturn: Int\n\n```method : public : FillRect(rect:Rect) ~ Int```"]
			},
			"FilledCircleColor": {
				"descriptions": ["**Draw filled circle with blending.**\n\n\n\nx - Int\n\ny - Int\n\nr - Int\n\ncolor - Color\n\nreturn: Int\n\n```method : public : FilledCircleColor(x:Int, y:Int, r:Int, color:Color) ~ Int```"]
			},
			"FilledEllipseColor": {
				"descriptions": ["**Draw filled ellipse with blending.**\n\n\n\nx - Int\n\ny - Int\n\nrx - Int\n\nry - Int\n\ncolor - Color\n\nreturn: Int\n\n```method : public : FilledEllipseColor(x:Int, y:Int, rx:Int, ry:Int, color:Color) ~ Int```"]
			},
			"FilledPieColor": {
				"descriptions": ["**Draw filled pie with alpha blending.**\n\n\n\nx - Int\n\ny - Int\n\nrad - Int\n\nstart - Int\n\nend - Int\n\ncolor - Color\n\nreturn: Int\n\n```method : public : FilledPieColor(x:Int, y:Int, rad:Int, start:Int, end:Int, color:Color) ~ Int```"]
			},
			"FilledPolygonColor": {
				"descriptions": ["**Draw filled pie with alpha blending.**\n\n\n\nvx - Int[]\n\nvy - Int[]\n\ncolor - Color\n\nreturn: Int\n\n```method : public : FilledPolygonColor(vx:Int[], vy:Int[], color:Color) ~ Int```"]
			},
			"FilledTrigonColor": {
				"descriptions": ["**Draw filled trigon (triangle) with alpha blending. Note: Creates vertex array and uses aapolygon routine to render.**\n\n\n\nx1 - Int\n\ny1 - Int\n\nx2 - Int\n\ny2 - Int\n\nx3 - Int\n\ny3 - Int\n\ncolor - Color\n\nreturn: Int\n\n```method : public : FilledTrigonColor(x1:Int, y1:Int, x2:Int, y2:Int, x3:Int, y3:Int, color:Color) ~ Int```"]
			},
			"Get": {
				"descriptions": ["**Get the renderer associated with a window**\n\n\n\nwindow - Window\n\nreturn: Renderer\n\n```function : public : Get(window:Window) ~ Renderer```"]
			},
			"GetInfo": {
				"descriptions": ["**Get information about a rendering context**\n\n\n\ninfo - RendererInfo\n\nreturn: Int\n\n```method : public : GetInfo(info:RendererInfo) ~ Int```"]
			},
			"GetNumRenderDrivers": {
				"descriptions": ["**Get the number of 2D rendering drivers available for the current display**\n\n\n\nreturn: Int\n\n```function : public : GetNumRenderDrivers() ~ Int```"]
			},
			"GetRenderDrawColor": {
				"descriptions": ["**Get the color used for drawing operations (Rect, Line and Clear)**\n\n\n\nr - IntHolder\n\ng - IntHolder\n\nb - IntHolder\n\na - IntHolder\n\nreturn: Int\n\n```method : public : GetRenderDrawColor(r:IntHolder, g:IntHolder, b:IntHolder, a:IntHolder) ~ Int```"]
			},
			"GetRenderDriverInfo": {
				"descriptions": ["**Get information about a specific 2D rendering driver for the current display**\n\n\n\nindex - Int\n\ninfo - RendererInfo\n\nreturn: Int\n\n```function : public : GetRenderDriverInfo(index:Int, info:RendererInfo) ~ Int```"]
			},
			"GetTarget": {
				"descriptions": ["**Get the current render target.**\n\n\n\nreturn: Texture\n\n```method : public : GetTarget() ~ Texture```"]
			},
			"GetViewport": {
				"descriptions": ["**Get the drawing area for the current target**\n\n\n\nrect - Rect\n\nreturn: Nil\n\n```method : public : GetViewport(rect:Rect) ~ Nil```"]
			},
			"HLineColor": {
				"descriptions": ["**Draw horizontal line with blending**\n\n\n\nx1 - Int\n\nx2 - Int\n\ny - Int\n\ncolor - Color\n\nreturn: Int\n\n```method : public : HLineColor(x1:Int, x2:Int, y:Int, color:Color) ~ Int```"]
			},
			"IsNull": {
				"descriptions": ["**Determines if the underlying SDL C-struct is NULL**\n\n\n\nreturn: Bool\n\n```method : public : IsNull() ~ Bool```"]
			},
			"LineColor": {
				"descriptions": ["**Draw line with alpha blending**\n\n\n\nx1 - Int\n\ny1 - Int\n\nx2 - Int\n\ny2 - Int\n\ncolor - Color\n\nreturn: Int\n\n```method : public : LineColor(x1:Int, y1:Int, x2:Int, y2:Int, color:Color) ~ Int```"]
			},
			"New": {
				"descriptions": ["**Create a 2D rendering context for a window**\n\n\n\nwindow - Window\n\nindex - Int\n\nflags - Int\n\n```New(window:Window, index:Int, flags:Int)```"]
			},
			"PieColor": {
				"descriptions": ["**Draw pie (outline) with alpha blending.**\n\n\n\nx - Int\n\ny - Int\n\nrad - Int\n\nstart - Int\n\nend - Int\n\ncolor - Color\n\nreturn: Int\n\n```method : public : PieColor(x:Int, y:Int, rad:Int, start:Int, end:Int, color:Color) ~ Int```"]
			},
			"PixelColor": {
				"descriptions": ["**Draw pixel with blending enabled if a<255.**\n\n\n\nx - Int\n\ny - Int\n\ncolor - Color\n\nreturn: Int\n\n```method : public : PixelColor(x:Int, y:Int, color:Color) ~ Int```"]
			},
			"PolygonColor": {
				"descriptions": ["**Draw polygon with alpha blending.**\n\n\n\nvx - Int[]\n\nvy - Int[]\n\ncolor - Color\n\nreturn: Int\n\n```method : public : PolygonColor(vx:Int[], vy:Int[], color:Color) ~ Int```"]
			},
			"Present": {
				"descriptions": ["**Update the screen with any rendering performed since the previous call**\n\n\n\nreturn: Nil\n\n```method : public : Present() ~ Nil```"]
			},
			"RectangleColor": {
				"descriptions": ["**Draw rectangle with blending**\n\n\n\nx1 - Int\n\ny1 - Int\n\nx2 - Int\n\ny2 - Int\n\ncolor - Color\n\nreturn: Int\n\n```method : public : RectangleColor(x1:Int, y1:Int, x2:Int, y2:Int, color:Color) ~ Int```"]
			},
			"RoundedBoxColor": {
				"descriptions": ["**Draw rounded-corner box (filled rectangle) with blending**\n\n\n\nx1 - Int\n\ny1 - Int\n\nx2 - Int\n\ny2 - Int\n\nrad - Int\n\ncolor - Color\n\nreturn: Int\n\n```method : public : RoundedBoxColor(x1:Int, y1:Int, x2:Int, y2:Int, rad:Int, color:Color) ~ Int```"]
			},
			"RoundedRectangleColor": {
				"descriptions": ["**Draw rounded-corner rectangle with blending**\n\n\n\nx1 - Int\n\ny1 - Int\n\nx2 - Int\n\ny2 - Int\n\nrad - Int\n\ncolor - Color\n\nreturn: Int\n\n```method : public : RoundedRectangleColor(x1:Int, y1:Int, x2:Int, y2:Int, rad:Int, color:Color) ~ Int```"]
			},
			"SetDrawColor": {
				"descriptions": ["**Set the color used for drawing operations (Rect, Line and Clear)**\n\n\n\nr - Int\n\ng - Int\n\nb - Int\n\na - Int\n\nreturn: Int\n\n```method : public : SetDrawColor(r:Int, g:Int, b:Int, a:Int) ~ Int```"]
			},
			"SetTarget": {
				"descriptions": ["**Set a texture as the current rendering target.**\n\n\n\ntexture - Texture\n\nreturn: Int\n\n```method : public : SetTarget(texture:Texture) ~ Int```"]
			},
			"SetViewport": {
				"descriptions": ["**set the drawing area for rendering on the current target**\n\n\n\nrect - Rect\n\nreturn: Int\n\n```method : public : SetViewport(rect:Rect) ~ Int```"]
			},
			"StringColor": {
				"descriptions": ["**Draw a string in the currently set font.**\n\n\n\nx - Int\n\ny - Int\n\ns - String\n\ncolor - Color\n\nreturn: Int\n\n```method : public : StringColor(x:Int, y:Int, s:String, color:Color) ~ Int```"]
			},
			"ThickLineColor": {
				"descriptions": ["**Draw a thick line with alpha blending.**\n\n\n\nx1 - Int\n\ny1 - Int\n\nx2 - Int\n\ny2 - Int\n\nwidth - Int\n\ncolor - Color\n\nreturn: Int\n\n```method : public : ThickLineColor(x1:Int, y1:Int, x2:Int, y2:Int, width:Int, color:Color) ~ Int```"]
			},
			"TrigonColor": {
				"descriptions": ["**Draw trigon (triangle outline) with alpha blending.**\n\n\n\nx1 - Int\n\ny1 - Int\n\nx2 - Int\n\ny2 - Int\n\nx3 - Int\n\ny3 - Int\n\ncolor - Color\n\nreturn: Int\n\n```method : public : TrigonColor(x1:Int, y1:Int, x2:Int, y2:Int, x3:Int, y3:Int, color:Color) ~ Int```"]
			},
			"VlineColor": {
				"descriptions": ["**Draw vertical line with blending**\n\n\n\nx - Int\n\ny1 - Int\n\ny2 - Int\n\ncolor - Color\n\nreturn: Int\n\n```method : public : VlineColor(x:Int, y1:Int, y2:Int, color:Color) ~ Int```"]
			}
		}
	},
	"Game.SDL2.RendererInfo": {
		"description": "Contains information on the capabilities of a render driver or the current render context",
		"functions": {
			"GetFlags": {
				"descriptions": ["**Get a mask of supported renderer flags**\n\n\n\nreturn: Int\n\n```method : public : GetFlags() ~ Int```"]
			},
			"GetMaxTextureHeight": {
				"descriptions": ["**Get the the maximum texture height**\n\n\n\nreturn: Int\n\n```method : public : GetMaxTextureHeight() ~ Int```"]
			},
			"GetMaxTextureWidth": {
				"descriptions": ["**Get the the maximum texture width**\n\n\n\nreturn: Int\n\n```method : public : GetMaxTextureWidth() ~ Int```"]
			},
			"GetName": {
				"descriptions": ["**Get the name of the renderer**\n\n\n\nreturn: String\n\n```method : public : GetName() ~ String```"]
			},
			"GetNumTextureFormats": {
				"descriptions": ["**Get the number of available texture formats**\n\n\n\nreturn: Int\n\n```method : public : GetNumTextureFormats() ~ Int```"]
			},
			"GetTextureFormats": {
				"descriptions": ["**Get the available texture formats**\n\n\n\nreturn: Int[]\n\n```method : public : GetTextureFormats() ~ Int[]```"]
			}
		}
	},
	"Game.SDL2.Surface": {
		"description": "Core class",
		"functions": {
			"Blit": {
				"descriptions": ["**Perform a fast surface copy to a destination surface**\n\n\n\nsrcrect - Rect\n\ndst - Surface\n\ndstrect - Rect\n\nreturn: Int\n\n```method : public : Blit(srcrect:Rect, dst:Surface, dstrect:Rect) ~ Int```"]
			},
			"BlitScaled": {
				"descriptions": ["**Scaled surface copy to a destination surface**\n\n\n\nsrcrect - Rect\n\ndst - Surface\n\ndstrect - Rect\n\nreturn: Int\n\n```method : public : BlitScaled(srcrect:Rect, dst:Surface, dstrect:Rect) ~ Int```"]
			},
			"Convert": {
				"descriptions": ["**Copy an existing surface into a new one that is optimized for blitting to a surface of a specified pixel format**\n\n\n\nfmt - PixelFormat\n\nflags - Int\n\nreturn: Surface\n\n```method : public : Convert(fmt:PixelFormat, flags:Int) ~ Surface```"]
			},
			"ConvertFormat": {
				"descriptions": ["**Copy an existing surface to a new surface of the specified format**\n\n\n\nformat - Int\n\nflags - Int\n\nreturn: Surface\n\n```method : public : ConvertFormat(format:Int, flags:Int) ~ Surface```"]
			},
			"CreateTexture": {
				"descriptions": ["**Create a texture from an existing surface**\n\n\n\nrenderer - Renderer\n\nreturn: Texture\n\n```method : public : CreateTexture(renderer:Renderer) ~ Texture```"]
			},
			"FillRect": {
				"descriptions": ["**perform a fast fill of a rectangle with a specific color**\n\n\n\nrect - Rect\n\ncolor - Int\n\nreturn: Int\n\n```method : public : FillRect(rect:Rect, color:Int) ~ Int```"]
			},
			"Free": {
				"descriptions": ["**Frees the event**\n\n\n\nreturn: Nil\n\n```method : public : Free() ~ Nil```"]
			},
			"GetAlphaMod": {
				"descriptions": ["**Get the additional alpha value used in blit operations**\n\n\n\nalpha - IntHolder\n\nreturn: Int\n\n```method : public : GetAlphaMod(alpha:IntHolder) ~ Int```"]
			},
			"GetBlendMode": {
				"descriptions": ["**get the blend mode used for blit operations**\n\n\n\nblendMode - IntHolder\n\nreturn: Int\n\n```method : public : GetBlendMode(blendMode:IntHolder) ~ Int```"]
			},
			"GetClipRect": {
				"descriptions": ["**Get the clipping rectangle for a surface**\n\n\n\nrect - Rect\n\nreturn: Nil\n\n```method : public : GetClipRect(rect:Rect) ~ Nil```"]
			},
			"GetColorKey": {
				"descriptions": ["**Get the color key (transparent pixel) for a surface**\n\n\n\nkey - IntHolder\n\nreturn: Int\n\n```method : public : GetColorKey(key:IntHolder) ~ Int```"]
			},
			"GetColorMod": {
				"descriptions": ["**Get the additional color value multiplied into blit operations**\n\n\n\nr - IntHolder\n\ng - IntHolder\n\nb - IntHolder\n\nreturn: Int\n\n```method : public : GetColorMod(r:IntHolder, g:IntHolder, b:IntHolder) ~ Int```"]
			},
			"GetH": {
				"descriptions": ["**Get height**\n\n\n\nreturn: Int\n\n```method : public : GetH() ~ Int```"]
			},
			"GetPitch": {
				"descriptions": ["**Get length of a row of pixels in bytes**\n\n\n\nreturn: Int\n\n```method : public : GetPitch() ~ Int```"]
			},
			"GetPixelFormat": {
				"descriptions": ["**Get pixel format**\n\n\n\nreturn: PixelFormat\n\n```method : public : GetPixelFormat() ~ PixelFormat```"]
			},
			"GetPixels": {
				"descriptions": ["**Get raw pixels**\n\n\n\nreturn: PixelData\n\n```method : public : GetPixels() ~ PixelData```"]
			},
			"GetW": {
				"descriptions": ["**Get width**\n\n\n\nreturn: Int\n\n```method : public : GetW() ~ Int```"]
			},
			"IsNull": {
				"descriptions": ["**Determines if the underlying SDL C-struct is NULL**\n\n\n\nreturn: Bool\n\n```method : public : IsNull() ~ Bool```"]
			},
			"LoadBMP": {
				"descriptions": ["**Load a surface from a BMP file.**\n\n\n\nfile - String\n\nreturn: Surface\n\n```function : public : LoadBMP(file:String) ~ Surface```"]
			},
			"Lock": {
				"descriptions": ["**Set up a surface for directly accessing the pixels**\n\n\n\nreturn: Int\n\n```method : public : Lock() ~ Int```"]
			},
			"LowerBlit": {
				"descriptions": ["**Perform low-level surface blitting only**\n\n\n\nsrcrect - Rect\n\ndst - Surface\n\ndstrect - Rect\n\nreturn: Int\n\n```method : public : LowerBlit(srcrect:Rect, dst:Surface, dstrect:Rect) ~ Int```"]
			},
			"LowerBlitScaled": {
				"descriptions": ["**Perform low-level surface scaled blitting only**\n\n\n\nsrcrect - Rect\n\ndst - Surface\n\ndstrect - Rect\n\nreturn: Int\n\n```method : public : LowerBlitScaled(srcrect:Rect, dst:Surface, dstrect:Rect) ~ Int```"]
			},
			"New": {
				"descriptions": ["**Creates new RGB surface**\n\n\n\nflags - Int\n\nwidth - Int\n\nheight - Int\n\ndepth - Int\n\nRmask - Int\n\nGmask - Int\n\nBmask - Int\n\nAmask - Int\n\n```New(flags:Int, width:Int, height:Int, depth:Int, Rmask:Int, Gmask:Int, Bmask:Int, Amask:Int)```"]
			},
			"Rotate90Degrees": {
				"descriptions": ["**Rotates a 8/16/24/32 bit surface in increments of 90 degrees.**\n\n\n\nnumClockwiseTurns - Int\n\nreturn: Surface\n\n```method : public : Rotate90Degrees(numClockwiseTurns:Int) ~ Surface```"]
			},
			"RotoZoom": {
				"descriptions": ["**Rotates and zooms a surface and optional anti-aliasing.**\n\n\n\nangle - Float\n\nzoom - Float\n\nsmooth - Bool\n\nreturn: Surface\n\n```method : public : RotoZoom(angle:Float, zoom:Float, smooth:Bool) ~ Surface```"]
			},
			"RotoZoomSize": {
				"descriptions": ["**Returns the size of the resulting target surface for a RotoZoom() call.**\n\n\n\nwidth - Int\n\nheight - Int\n\nangle - Float\n\nzoom - Float\n\ndstwidth - IntHolder\n\ndstheight - IntHolder\n\nreturn: Nil\n\n```function : public : RotoZoomSize(width:Int, height:Int, angle:Float, zoom:Float, dstwidth:IntHolder, dstheight:IntHolder) ~ Nil```"]
			},
			"RotoZoomSizeXY": {
				"descriptions": ["**Returns the size of the resulting target surface for a RotoZoomXY() call.**\n\n\n\nwidth - Int\n\nheight - Int\n\nangle - Float\n\nzoomx - Float\n\nzoomy - Float\n\ndstwidth - IntHolder\n\ndstheight - IntHolder\n\nreturn: Nil\n\n```function : public : RotoZoomSizeXY(width:Int, height:Int, angle:Float, zoomx:Float, zoomy:Float, dstwidth:IntHolder, dstheight:IntHolder) ~ Nil```"]
			},
			"RotoZoomXY": {
				"descriptions": ["**Rotates and zooms a surface with different horizontal and vertival scaling factors and optional anti-aliasing.**\n\n\n\nangle - Float\n\nzoomx - Float\n\nzoomy - Float\n\nsmooth - Bool\n\nreturn: Surface\n\n```method : public : RotoZoomXY(angle:Float, zoomx:Float, zoomy:Float, smooth:Bool) ~ Surface```"]
			},
			"SaveBMP": {
				"descriptions": ["**save a surface to a BMP file**\n\n\n\nsurface - Surface\n\nfile - String\n\nreturn: Int\n\n```function : public : SaveBMP(surface:Surface, file:String) ~ Int```"]
			},
			"SetAlphaMod": {
				"descriptions": ["**Set an additional alpha value used in blit operations**\n\n\n\nalpha - Int\n\nreturn: Int\n\n```method : public : SetAlphaMod(alpha:Int) ~ Int```"]
			},
			"SetBlendMode": {
				"descriptions": ["**set the blend mode used for blit operations**\n\n\n\nblendMode - BlendMode\n\nreturn: Int\n\n```method : public : SetBlendMode(blendMode:BlendMode) ~ Int```"]
			},
			"SetClipRect": {
				"descriptions": ["**Set the clipping rectangle for a surface**\n\n\n\nrect - Rect\n\nreturn: Bool\n\n```method : public : SetClipRect(rect:Rect) ~ Bool```"]
			},
			"SetColorKey": {
				"descriptions": ["**Set the color key (transparent pixel) in a surface**\n\n\n\nflag - Bool\n\nkey - Int\n\nreturn: Int\n\n```method : public : SetColorKey(flag:Bool, key:Int) ~ Int```"]
			},
			"SetColorMod": {
				"descriptions": ["**Set an additional color value multiplied into blit operation**\n\n\n\nr - Int\n\ng - Int\n\nb - Int\n\nreturn: Int\n\n```method : public : SetColorMod(r:Int, g:Int, b:Int) ~ Int```"]
			},
			"SetRLE": {
				"descriptions": ["**Set the RLE acceleration hint for a surface**\n\n\n\nflag - Int\n\nreturn: Int\n\n```method : public : SetRLE(flag:Int) ~ Int```"]
			},
			"Shrink": {
				"descriptions": ["**Shrink a surface by an integer ratio using averaging.**\n\n\n\nfactorx - Int\n\nfactory - Int\n\nreturn: Surface\n\n```method : public : Shrink(factorx:Int, factory:Int) ~ Surface```"]
			},
			"Unlock": {
				"descriptions": ["**Release a surface after directly accessing the pixels**\n\n\n\nreturn: Nil\n\n```method : public : Unlock() ~ Nil```"]
			},
			"Zoom": {
				"descriptions": ["**Zoom a surface by independent horizontal and vertical factors with optional smoothing.**\n\n\n\nzoomx - Float\n\nzoomy - Float\n\nsmooth - Bool\n\nreturn: Surface\n\n```method : public : Zoom(zoomx:Float, zoomy:Float, smooth:Bool) ~ Surface```"]
			},
			"ZoomSize": {
				"descriptions": ["**Returns the size of the resulting target surface for a Zoom() call.**\n\n\n\nwidth - Int\n\nheight - Int\n\nzoomx - Float\n\nzoomy - Float\n\ndstwidth - IntHolder\n\ndstheight - IntHolder\n\nreturn: Nil\n\n```function : public : ZoomSize(width:Int, height:Int, zoomx:Float, zoomy:Float, dstwidth:IntHolder, dstheight:IntHolder) ~ Nil```"]
			}
		}
	},
	"Game.SDL2.TextInputEvent": {
		"description": "Text input event",
		"functions": {
			"GetText": {
				"descriptions": ["**Get input text**\n\n\n\nreturn: String\n\n```method : public : GetText() ~ String```"]
			},
			"GetTimestamp": {
				"descriptions": ["**Timestamp of the event**\n\n\n\nreturn: Int\n\n```method : public : GetTimestamp() ~ Int```"]
			},
			"GetType": {
				"descriptions": ["**Event type**\n\n\n\nreturn: Int\n\n```method : public : GetType() ~ Int```"]
			},
			"GetWindowID": {
				"descriptions": ["**Window with mouse focus, if any**\n\n\n\nreturn: Int\n\n```method : public : GetWindowID() ~ Int```"]
			}
		}
	},
	"Game.SDL2.Texture": {
		"description": "Efficient, driver-specific representation of pixel data.",
		"functions": {
			"Destroy": {
				"descriptions": ["**Destroy the specified texture**\n\n\n\nreturn: Nil\n\n```method : public : Destroy() ~ Nil```"]
			},
			"GetAlphaMod": {
				"descriptions": ["**Get the additional alpha value multiplied into render copy operations.**\n\n\n\nalpha - IntHolder\n\nreturn: Int\n\n```method : public : GetAlphaMod(alpha:IntHolder) ~ Int```"]
			},
			"GetBlendMode": {
				"descriptions": ["**get the blend mode used for texture copy operations**\n\n\n\nblendMode - IntHolder\n\nreturn: Int\n\n```method : public : GetBlendMode(blendMode:IntHolder) ~ Int```"]
			},
			"GetColorMod": {
				"descriptions": ["**Get the additional color value multiplied into render copy operations.**\n\n\n\nr - IntHolder\n\ng - IntHolder\n\nb - IntHolder\n\nreturn: Int\n\n```method : public : GetColorMod(r:IntHolder, g:IntHolder, b:IntHolder) ~ Int```"]
			},
			"IsNull": {
				"descriptions": ["**Determines if the underlying SDL C-struct is NULL**\n\n\n\nreturn: Bool\n\n```method : public : IsNull() ~ Bool```"]
			},
			"Lock": {
				"descriptions": ["**Lock a portion of the texture for write-only pixel access**\n\n\n\nrect - Rect\n\nreturn: PixelData\n\n```method : public : Lock(rect:Rect) ~ PixelData```"]
			},
			"New": {
				"descriptions": ["**Create a texture for a rendering context**\n\n\n\nrenderer - Renderer\n\nformat - Int\n\naccess - Int\n\nw - Int\n\nh - Int\n\n```New(renderer:Renderer, format:Int, access:Int, w:Int, h:Int)```"]
			},
			"Query": {
				"descriptions": ["**Query the attributes of a texture**\n\n\n\nformat - IntHolder\n\naccess - IntHolder\n\nw - IntHolder\n\nh - IntHolder\n\nreturn: Int\n\n```method : public : Query(format:IntHolder, access:IntHolder, w:IntHolder, h:IntHolder) ~ Int```"]
			},
			"SetAlphaMod": {
				"descriptions": ["**Set an additional alpha value multiplied into render copy operations.**\n\n\n\nalpha - Int\n\nreturn: Int\n\n```method : public : SetAlphaMod(alpha:Int) ~ Int```"]
			},
			"SetBlendMode": {
				"descriptions": ["**Set the blend mode for a texture**\n\n\n\nblendMode - BlendMode\n\nreturn: Int\n\n```method : public : SetBlendMode(blendMode:BlendMode) ~ Int```"]
			},
			"SetColorMod": {
				"descriptions": ["**set an additional color value multiplied into render copy operations**\n\n\n\nr - Int\n\ng - Int\n\nb - Int\n\nreturn: Int\n\n```method : public : SetColorMod(r:Int, g:Int, b:Int) ~ Int```"]
			},
			"Unlock": {
				"descriptions": ["**Unlock a texture, uploading the changes to video memory, if needed.**\n\n\n\nreturn: Nil\n\n```method : public : Unlock() ~ Nil```"]
			}
		}
	},
	"Game.SDL2.Timer": {
		"description": "SDL time management routines",
		"functions": {
			"Delay": {
				"descriptions": ["**Wait a specified number of milliseconds before returning**\n\n\n\nms - Int\n\nreturn: Nil\n\n```function : public : Delay(ms:Int) ~ Nil```"]
			},
			"GetTicks": {
				"descriptions": ["**Get the number of milliseconds since the SDL library initialization**\n\n\n\nreturn: Int\n\n```function : public : GetTicks() ~ Int```"]
			},
			"Passed": {
				"descriptions": ["**Compares SDL ticks values**\n\n\n\na - Int\n\nb - Int\n\nreturn: Bool\n\n```function : public : Passed(a:Int, b:Int) ~ Bool```"]
			}
		}
	},
	"Game.SDL2.Window": {
		"description": "SDL Window",
		"functions": {
			"Destroy": {
				"descriptions": ["**Destroy a window**\n\n\n\nreturn: Nil\n\n```method : public : Destroy() ~ Nil```"]
			},
			"DisableScreenSaver": {
				"descriptions": ["**Prevent the screen from being blanked by a screen saver**\n\n\n\nreturn: Nil\n\n```function : public : DisableScreenSaver() ~ Nil```"]
			},
			"EnableScreenSaver": {
				"descriptions": ["**Allow the screen to be blanked by a screen saver**\n\n\n\nreturn: Nil\n\n```function : public : EnableScreenSaver() ~ Nil```"]
			},
			"GLGetDrawableSize": {
				"descriptions": ["**Get the size of a window's underlying drawable in pixels (for use with glViewport).**\n\n\n\nw - IntHolder\n\nh - IntHolder\n\nreturn: Nil\n\n```method : public : GLGetDrawableSize(w:IntHolder, h:IntHolder) ~ Nil```"]
			},
			"GLSwap": {
				"descriptions": ["**Update a window with OpenGL rendering.**\n\n\n\nreturn: Nil\n\n```method : public : GLSwap() ~ Nil```"]
			},
			"GetBrightness": {
				"descriptions": ["**Gets the brightness (gamma multiplier) for the display that owns a given window**\n\n\n\nreturn: Float\n\n```method : public : GetBrightness() ~ Float```"]
			},
			"GetDisplayIndex": {
				"descriptions": ["**Get the index of the display associated with a window**\n\n\n\nreturn: Int\n\n```method : public : GetDisplayIndex() ~ Int```"]
			},
			"GetFlags": {
				"descriptions": ["**Get the window flags**\n\n\n\nreturn: Int\n\n```method : public : GetFlags() ~ Int```"]
			},
			"GetFromID": {
				"descriptions": ["**Get the numeric ID of a window, for logging purposes**\n\n\n\nid - Int\n\nreturn: Window\n\n```method : public : GetFromID(id:Int) ~ Window```"]
			},
			"GetGammaRamp": {
				"descriptions": ["**Gets the gamma ramp for the display that owns a given window**\n\n\n\nred - IntHolder\n\ngreen - IntHolder\n\nblue - IntHolder\n\nreturn: Int\n\n```method : public : GetGammaRamp(red:IntHolder, green:IntHolder, blue:IntHolder) ~ Int```"]
			},
			"GetGrab": {
				"descriptions": ["**Get a window's input grab mode**\n\n\n\nreturn: Bool\n\n```method : public : GetGrab() ~ Bool```"]
			},
			"GetID": {
				"descriptions": ["**Get the numeric ID of a window, for logging purposes**\n\n\n\nreturn: Int\n\n```method : public : GetID() ~ Int```"]
			},
			"GetMaximumSize": {
				"descriptions": ["**Get the maximum size of a window's client area**\n\n\n\nw - IntHolder\n\nh - IntHolder\n\nreturn: Nil\n\n```method : public : GetMaximumSize(w:IntHolder, h:IntHolder) ~ Nil```"]
			},
			"GetMinimumSize": {
				"descriptions": ["**Get the minimum size of a window's client area**\n\n\n\nw - IntHolder\n\nh - IntHolder\n\nreturn: Nil\n\n```method : public : GetMinimumSize(w:IntHolder, h:IntHolder) ~ Nil```"]
			},
			"GetPixelFormat": {
				"descriptions": ["**Get the pixel format associated with the window**\n\n\n\nreturn: Int\n\n```method : public : GetPixelFormat() ~ Int```"]
			},
			"GetPosition": {
				"descriptions": ["**Get the position of a window**\n\n\n\nx - IntHolder\n\ny - IntHolder\n\nreturn: Nil\n\n```method : public : GetPosition(x:IntHolder, y:IntHolder) ~ Nil```"]
			},
			"GetSize": {
				"descriptions": ["**Get the size of a window's client area**\n\n\n\nw - IntHolder\n\nh - IntHolder\n\nreturn: Nil\n\n```method : public : GetSize(w:IntHolder, h:IntHolder) ~ Nil```"]
			},
			"GetSurface": {
				"descriptions": ["**Get the SDL surface associated with the window**\n\n\n\nreturn: Surface\n\n```method : public : GetSurface() ~ Surface```"]
			},
			"Hide": {
				"descriptions": ["**Hide a window**\n\n\n\nreturn: Nil\n\n```method : public : Hide() ~ Nil```"]
			},
			"IsNull": {
				"descriptions": ["**Determines if the underlying SDL C-struct is NULL**\n\n\n\nreturn: Bool\n\n```method : public : IsNull() ~ Bool```"]
			},
			"IsScreenSaverEnabled": {
				"descriptions": ["**Check whether the screensaver is currently enabled**\n\n\n\nreturn: Bool\n\n```function : public : IsScreenSaverEnabled() ~ Bool```"]
			},
			"Maximize": {
				"descriptions": ["**Make a window as large as possible**\n\n\n\nreturn: Nil\n\n```method : public : Maximize() ~ Nil```"]
			},
			"Minimize": {
				"descriptions": ["**Minimize a window to an iconic representation**\n\n\n\nreturn: Nil\n\n```method : public : Minimize() ~ Nil```"]
			},
			"New": {
				"descriptions": ["**Creates a window with the specified position, dimensions, and flags**\n\n\n\ntitle - String\n\nx - Int\n\ny - Int\n\nw - Int\n\nh - Int\n\nflags - Int\n\n```New(title:String, x:Int, y:Int, w:Int, h:Int, flags:Int)```"]
			},
			"Raise": {
				"descriptions": ["**Raise a window above other windows and set the input focus**\n\n\n\nreturn: Nil\n\n```method : public : Raise() ~ Nil```"]
			},
			"Restore": {
				"descriptions": ["**Restore the size and position of a minimized or maximized window**\n\n\n\nreturn: Nil\n\n```method : public : Restore() ~ Nil```"]
			},
			"SetBordered": {
				"descriptions": ["**Set the border state of a window**\n\n\n\nbordered - Bool\n\nreturn: Nil\n\n```method : public : SetBordered(bordered:Bool) ~ Nil```"]
			},
			"SetBrightness": {
				"descriptions": ["**Sets the brightness (gamma multiplier) for the display that owns a given window**\n\n\n\nbrightness - Float\n\nreturn: Int\n\n```method : public : SetBrightness(brightness:Float) ~ Int```"]
			},
			"SetDisplayMode": {
				"descriptions": ["**Set the display mode to use when a window is visible at full-screen**\n\n\n\nmode - DisplayMode\n\nreturn: Int\n\n```method : public : SetDisplayMode(mode:DisplayMode) ~ Int```"]
			},
			"SetFullscreen": {
				"descriptions": ["**Set a window's full-screen state**\n\n\n\nflags - Int\n\nreturn: Int\n\n```method : public : SetFullscreen(flags:Int) ~ Int```"]
			},
			"SetGammaRamp": {
				"descriptions": ["**Sets the gamma ramp for the display that owns a given window**\n\n\n\nred - IntHolder\n\ngreen - IntHolder\n\nblue - IntHolder\n\nreturn: Int\n\n```method : public : SetGammaRamp(red:IntHolder, green:IntHolder, blue:IntHolder) ~ Int```"]
			},
			"SetGrab": {
				"descriptions": ["**Set a window's input grab mode**\n\n\n\ngrabbed - Bool\n\nreturn: Nil\n\n```method : public : SetGrab(grabbed:Bool) ~ Nil```"]
			},
			"SetIcon": {
				"descriptions": ["**Set the icon for a window**\n\n\n\nicon - Surface\n\nreturn: Nil\n\n```method : public : SetIcon(icon:Surface) ~ Nil```"]
			},
			"SetMaximumSize": {
				"descriptions": ["**Set the maximum size of a window's client area**\n\n\n\nmax_w - Int\n\nmax_h - Int\n\nreturn: Nil\n\n```method : public : SetMaximumSize(max_w:Int, max_h:Int) ~ Nil```"]
			},
			"SetMinimumSize": {
				"descriptions": ["**Set the minimum size of a window's client area**\n\n\n\nmin_w - Int\n\nmin_h - Int\n\nreturn: Nil\n\n```method : public : SetMinimumSize(min_w:Int, min_h:Int) ~ Nil```"]
			},
			"SetPosition": {
				"descriptions": ["**Set the position of a window**\n\n\n\nx - Int\n\ny - Int\n\nreturn: Nil\n\n```method : public : SetPosition(x:Int, y:Int) ~ Nil```"]
			},
			"SetSize": {
				"descriptions": ["**Set the size of a window's client area**\n\n\n\nw - Int\n\nh - Int\n\nreturn: Nil\n\n```method : public : SetSize(w:Int, h:Int) ~ Nil```"]
			},
			"SetTitle": {
				"descriptions": ["**Set the title of a window**\n\n\n\ntitle - String\n\nreturn: Nil\n\n```method : public : SetTitle(title:String) ~ Nil```"]
			},
			"Show": {
				"descriptions": ["**Show a window**\n\n\n\nreturn: Nil\n\n```method : public : Show() ~ Nil```"]
			},
			"UpdateSurface": {
				"descriptions": ["**Use this function to copy the window surface to the screen**\n\n\n\nreturn: Int\n\n```method : public : UpdateSurface() ~ Int```"]
			}
		}
	},
	"Query.RegEx.RegEx": {
		"description": "Regular expression engine. <p>Support for following matches:<p> <ul> <li>. &#8208; any</li> <li>? &#8208; optional</li> <li>* &#8208; zero or more repetitions</li> <li>+ &#8208; one or more repetitions</li> <li>^ &#8208; first single match</li> <li>$ &#8208; last single match</li> <li>group &#8208; (one|two|three)</li> <li>range &#8208; [start-end]</li> </ul> <p>Support for following special patterns:<p> <ul> <li>word &#8208; \w</li> <li>not word &#8208; \W</li> <li>digit &#8208; \d</li> <li>not digit &#8208; \D</li> <li>white space &#8208; \s</li> <li>not white space &#8208; \s</li> <li>repeat &#8208; {least, most} </ul>",
		"functions": {
			"Find": {
				"descriptions": ["**Finds all occurrences**\n\n\n\ninput - String\n\nreturn: Vector&lt;Result&gt;\n\n```method : public : native : Find(input:String) ~ Vector&lt;Result&gt;```"]
			},
			"FindFirst": {
				"descriptions": ["**Matches the first occurrence**\n\n\n\ninput - String\n\nreturn: Result\n\n```method : public : native : FindFirst(input:String) ~ Result```"]
			},
			"IsOk": {
				"descriptions": ["**Check of the regex was parsed correctly**\n\n\n\nreturn: Bool\n\n```method : public : IsOk() ~ Bool```"]
			},
			"Match": {
				"descriptions": ["**Matches as much of the string as possible**\n\n\n\ninput - String\n\nreturn: String\n\n```method : public : Match(input:String) ~ String```", "**Matches as much of the string as possible**\n\n\n\ninput - String\n\noffset - Int\n\nreturn: String\n\n```method : public : Match(input:String, offset:Int) ~ String```"]
			},
			"MatchExact": {
				"descriptions": ["**Looks for an exact regex match**\n\n\n\ninput - String\n\nreturn: Bool\n\n```method : public : MatchExact(input:String) ~ Bool```"]
			},
			"New": {
				"descriptions": ["**Default constructor**\n\n\n\ninput - String\n\n```New(input:String)```"]
			},
			"ReplaceAll": {
				"descriptions": ["**Replaces all occurrences of the given string**\n\n\n\ninput - String\n\nreplace - String\n\nreturn: String\n\n```method : public : native : ReplaceAll(input:String, replace:String) ~ String```"]
			},
			"ReplaceFirst": {
				"descriptions": ["**Replaces the first occurrence with the given string**\n\n\n\ninput - String\n\nreplace - String\n\nreturn: String\n\n```method : public : native : ReplaceFirst(input:String, replace:String) ~ String```"]
			}
		}
	},
	"Query.RegEx.Result": {
		"description": "RegEx result",
		"functions": {
			"GetLength": {
				"descriptions": ["**Gets the string length of the match**\n\n\n\nreturn: Int\n\n```method : public : GetLength() ~ Int```"]
			},
			"GetStart": {
				"descriptions": ["**Gets the starting index of match**\n\n\n\nreturn: Int\n\n```method : public : GetStart() ~ Int```"]
			},
			"GetValue": {
				"descriptions": ["**Gets the string value**\n\n\n\nreturn: String\n\n```method : public : GetValue() ~ String```"]
			},
			"ToString": {
				"descriptions": ["**Gets the string representation**\n\n\n\nreturn: String\n\n```method : public : ToString() ~ String```"]
			}
		}
	},
	"Query.Structured.Finder": {
		"description": "Supports string data queries",
		"functions": {
			"FindFiles": {
				"descriptions": ["**Finds matching files in a given directory**\n\n\n\npath - String\n\nreturn: Vector&lt;String&gt;\n\n```method : public : FindFiles(path:String) ~ Vector&lt;String&gt;```"]
			},
			"New": {
				"descriptions": ["**Default constructor**\n\n\n\nexpr - String\n\n```New(expr:String)```"]
			}
		}
	},
	"Query.Structured.Row": {
		"description": "Row in table",
		"functions": {
			"False": {
				"descriptions": ["**Helper for setting 'false' column value**\n\n\n\nreturn: IntHolder\n\n```function : public : False() ~ IntHolder```"]
			},
			"Get": {
				"descriptions": ["**Gets value by name**\n\n\n\nname - String\n\nreturn: Compare\n\n```method : public : Get(name:String) ~ Compare```", "**Gets value by index**\n\n\n\nindex - Int\n\nreturn: Compare\n\n```method : public : Get(index:Int) ~ Compare```"]
			},
			"Set": {
				"descriptions": ["**Sets value by name**\n\n\n\nname - String\n\nvalue - Compare\n\nreturn: Bool\n\n```method : public : Set(name:String, value:Compare) ~ Bool```", "**Sets value by index**\n\n\n\nindex - Int\n\nvalue - Compare\n\nreturn: Bool\n\n```method : public : Set(index:Int, value:Compare) ~ Bool```"]
			},
			"Size": {
				"descriptions": ["**Gets the number of columns**\n\n\n\nreturn: Int\n\n```method : public : Size() ~ Int```"]
			},
			"ToString": {
				"descriptions": ["**String representation of row1**\n\n\n\nreturn: String\n\n```method : public : ToString() ~ String```"]
			},
			"True": {
				"descriptions": ["**Helper for setting 'true' column value**\n\n\n\nreturn: IntHolder\n\n```function : public : True() ~ IntHolder```"]
			}
		}
	},
	"Query.Structured.Table": {
		"description": "Container for semi-structured data",
		"functions": {
			"Average": {
				"descriptions": ["**Gets the column average**\n\n\n\nname - String\n\nreturn: Float\n\n```method : public : Average(name:String) ~ Float```"]
			},
			"Count": {
				"descriptions": ["**Count of rows**\n\n\n\nreturn: Int\n\n```method : public : Count() ~ Int```"]
			},
			"Delete": {
				"descriptions": ["**Delete row1 by primary key**\n\n\n\npk - Int\n\nreturn: Bool\n\n```method : public : native : Delete(pk:Int) ~ Bool```"]
			},
			"Filter": {
				"descriptions": ["**Filters table based upon conditional criteria**\n\n\n\ncond - Conditional\n\nreturn: Vector&lt;Row&gt;\n\n```method : public : native : Filter(cond:Conditional) ~ Vector&lt;Row&gt;```"]
			},
			"FromCsv": {
				"descriptions": ["**Loads a table from a CSV file**\n\n\n\ntable_name - String\n\npath - String\n\nreturn: Table\n\n```function : public : FromCsv(table_name:String, path:String) ~ Table```"]
			},
			"FromFilesystem": {
				"descriptions": ["**Loads a table from a directory file system. Columns are: path_name, create_date, owner, is_dir and is_readonly.**\n\n\n\ntable_name - String\n\npath - String\n\nreturn: Table\n\n```function : public : FromFilesystem(table_name:String, path:String) ~ Table```"]
			},
			"Get": {
				"descriptions": ["**Get row1 by primary key**\n\n\n\npk - Int\n\nreturn: Row\n\n```method : public : native : Get(pk:Int) ~ Row```"]
			},
			"GetAll": {
				"descriptions": ["**Get all row1**\n\n\n\nreturn: Vector&lt;Row&gt;\n\n```method : public : native : GetAll() ~ Vector&lt;Row&gt;```"]
			},
			"GetColumnNames": {
				"descriptions": ["**Gets all column names**\n\n\n\nreturn: String[]\n\n```method : public : GetColumnNames() ~ String[]```"]
			},
			"GetError": {
				"descriptions": ["**Gets the last query error**\n\n\n\nreturn: String\n\n```method : public : GetError() ~ String```"]
			},
			"GetIndex": {
				"descriptions": ["**Get column index by name**\n\n\n\nname - String\n\nreturn: Int\n\n```method : public : native : GetIndex(name:String) ~ Int```"]
			},
			"GetName": {
				"descriptions": ["**Gets the table name**\n\n\n\nreturn: String\n\n```method : public : GetName() ~ String```"]
			},
			"Insert": {
				"descriptions": ["**Inserts a new row1 into the table. After the row1 has been added it's values will need to be set.**\n\n\n\nreturn: Row\n\n```method : public : native : Insert() ~ Row```"]
			},
			"New": {
				"descriptions": ["**Constructor**\n\n\n\nname - String\n\ncolumn_names - String[]\n\n```New(name:String, column_names:String[])```"]
			},
			"Query": {
				"descriptions": ["**Query table using SQL-like syntax. Support for 'select', 'from', 'where', 'distinct', 'order by' and logical operators.**\n\n\n\nstatement - String\n\nreturn: Table\n\n```method : public : Query(statement:String) ~ Table```"]
			},
			"Size": {
				"descriptions": ["**Count of rows**\n\n\n\nreturn: Int\n\n```method : public : Size() ~ Int```"]
			},
			"Sum": {
				"descriptions": ["**Gets the column sum**\n\n\n\nname - String\n\nreturn: Float\n\n```method : public : Sum(name:String) ~ Float```"]
			},
			"ToString": {
				"descriptions": ["**String representation of table**\n\n\n\nreturn: String\n\n```method : public : ToString() ~ String```"]
			},
			"Unique": {
				"descriptions": ["**Gets unique rows by column name**\n\n\n\nname - String\n\nreturn: Vector&lt;Row&gt;\n\n```method : public : Unique(name:String) ~ Vector&lt;Row&gt;```"]
			}
		}
	},
	"System.Base": {
		"description": "Base class for all objects",
		"functions": {
			"GetClass": {
				"descriptions": ["**Returns the class associated with this instance**\n\n\n\nreturn: Introspection.Class\n\n```method : public : GetClass() ~ Introspection.Class```"]
			},
			"GetClassID": {
				"descriptions": ["**Returns the unique class ID**\n\n\n\nreturn: ClassID\n\n```method : public : native : GetClassID() ~ ClassID```"]
			},
			"GetInstanceID": {
				"descriptions": ["**Returns the unique instance ID**\n\n\n\nreturn: Int\n\n```method : public : native : GetInstanceID() ~ Int```"]
			},
			"New": {
				"descriptions": ["**Default constructor**\n\n\n\n```New()```"]
			}
		}
	},
	"System.BaseArrayHolder": {
		"description": "Holds an base array",
		"functions": {
			"Get": {
				"descriptions": ["**Get values**\n\n\n\nreturn: Base[]\n\n```method : public : Get() ~ Base[]```"]
			},
			"New": {
				"descriptions": ["**Copy constructor**\n\n\n\nvalues - Base[]\n\n```New(values:Base[])```"]
			},
			"Set": {
				"descriptions": ["**Set values**\n\n\n\nvalues - Base[]\n\nreturn: Nil\n\n```method : public : Set(values:Base[]) ~ Nil```"]
			}
		}
	},
	"System.BasicCompare": {
		"description": "Provides rudimentary compare functionality",
		"functions": {
			"Compare": {
				"descriptions": ["**Compares two objects**\n\n\n\nrhs - System.Compare\n\nreturn: Int\n\n```method : public : Compare(rhs:System.Compare) ~ Int```"]
			},
			"HashID": {
				"descriptions": ["**Returns the class default hash ID**\n\n\n\nreturn: Int\n\n```method : public : HashID() ~ Int```"]
			},
			"New": {
				"descriptions": ["**Default constructor**\n\n\n\n```New()```"]
			}
		}
	},
	"System.Bool": {
		"description": "Boolean class",
		"functions": {
			"Error": {
				"descriptions": ["**Prints an error boolean value**\n\n\n\nreturn: Nil\n\n```function : public : Error() ~ Nil```"]
			},
			"ErrorLine": {
				"descriptions": ["**Prints an error boolean value with a newline**\n\n\n\nreturn: Nil\n\n```function : public : ErrorLine() ~ Nil```"]
			},
			"Print": {
				"descriptions": ["**Prints a boolean value**\n\n\n\nreturn: Nil\n\n```function : public : Print() ~ Nil```"]
			},
			"PrintLine": {
				"descriptions": ["**Prints a boolean value with a newline**\n\n\n\nreturn: Nil\n\n```function : public : PrintLine() ~ Nil```"]
			},
			"ToString": {
				"descriptions": ["**Formats the boolean value into a string**\n\n\n\nreturn: String\n\n```function : public : native : ToString() ~ String```"]
			}
		}
	},
	"System.BoolHolder": {
		"description": "Holds a boolean value",
		"functions": {
			"Clone": {
				"descriptions": ["**Clones the object instance**\n\n\n\nreturn: System.Compare\n\n```method : public : Clone() ~ System.Compare```"]
			},
			"Compare": {
				"descriptions": ["**Compares two objects**\n\n\n\nrhs - System.Compare\n\nreturn: Int\n\n```method : public : native : Compare(rhs:System.Compare) ~ Int```"]
			},
			"Get": {
				"descriptions": ["**Get boolean value**\n\n\n\nreturn: Bool\n\n```method : public : Get() ~ Bool```"]
			},
			"HashID": {
				"descriptions": ["**Returns a unique hash ID for a boolean**\n\n\n\nreturn: Int\n\n```method : public : HashID() ~ Int```"]
			},
			"New": {
				"descriptions": ["**Default constructor**\n\n\n\n```New()```", "**Copy constructor**\n\n\n\nvalue - Bool\n\n```New(value:Bool)```"]
			},
			"Set": {
				"descriptions": ["**Set boolean value**\n\n\n\nvalue - Bool\n\nreturn: Nil\n\n```method : public : Set(value:Bool) ~ Nil```"]
			}
		}
	},
	"System.Byte": {
		"description": "The byte class represents a 1-byte value.",
		"functions": {
			"Abs": {
				"descriptions": ["**Returns the absolute value**\n\n\n\nreturn: Byte\n\n```function : public : native : Abs() ~ Byte```"]
			},
			"CRC32": {
				"descriptions": ["**Calculates the signed CRC32 value for the stream**\n\n\n\nreturn: Int\n\n```function : public : CRC32() ~ Int```"]
			},
			"Compare": {
				"descriptions": ["**Compares two values**\n\n\n\nl - Byte\n\nr - Byte\n\nreturn: Int\n\n```function : public : native : Compare(l:Byte, r:Byte) ~ Int```"]
			},
			"Compress": {
				"descriptions": ["**Compresses a byte stream using zlib**\n\n\n\nreturn: Byte[]\n\n```function : public : Compress() ~ Byte[]```"]
			},
			"Error": {
				"descriptions": ["**Prints error value**\n\n\n\nreturn: Nil\n\n```function : public : Error() ~ Nil```"]
			},
			"ErrorLine": {
				"descriptions": ["**Prints error value with newline**\n\n\n\nreturn: Nil\n\n```function : public : ErrorLine() ~ Nil```"]
			},
			"IsNeg": {
				"descriptions": ["**Checks is a number is negative**\n\n\n\nreturn: Bool\n\n```function : public : native : IsNeg() ~ Bool```"]
			},
			"Max": {
				"descriptions": ["**Returns the largest byte value**\n\n\n\nl - Byte\n\nr - Byte\n\nreturn: Byte\n\n```function : public : Max(l:Byte, r:Byte) ~ Byte```"]
			},
			"Min": {
				"descriptions": ["**Returns the smallest byte value**\n\n\n\nl - Byte\n\nr - Byte\n\nreturn: Byte\n\n```function : public : Min(l:Byte, r:Byte) ~ Byte```"]
			},
			"NotNeg": {
				"descriptions": ["**Checks is a number is not negative**\n\n\n\nreturn: Bool\n\n```function : public : native : NotNeg() ~ Bool```"]
			},
			"Print": {
				"descriptions": ["**Prints value**\n\n\n\nreturn: Nil\n\n```function : public : Print() ~ Nil```"]
			},
			"PrintLine": {
				"descriptions": ["**Prints value with newline**\n\n\n\nreturn: Nil\n\n```function : public : PrintLine() ~ Nil```"]
			},
			"ToBinaryString": {
				"descriptions": ["**Returns a binary string representation of the value**\n\n\n\nreturn: String\n\n```function : public : native : ToBinaryString() ~ String```"]
			},
			"ToChar": {
				"descriptions": ["**Returns the Character value**\n\n\n\nreturn: Char\n\n```function : public : ToChar() ~ Char```"]
			},
			"ToFloat": {
				"descriptions": ["**Returns the Float value**\n\n\n\nreturn: Float\n\n```function : public : ToFloat() ~ Float```"]
			},
			"ToHexString": {
				"descriptions": ["**Returns a hexadecimal string representation of the value**\n\n\n\nreturn: String\n\n```function : public : native : ToHexString() ~ String```"]
			},
			"ToInt": {
				"descriptions": ["**Returns the Int value**\n\n\n\nreturn: Int\n\n```function : public : ToInt() ~ Int```"]
			},
			"ToString": {
				"descriptions": ["**Returns a string representation of the value**\n\n\n\nreturn: String\n\n```function : public : native : ToString() ~ String```"]
			},
			"Uncompress": {
				"descriptions": ["**Uncompresses a byte stream using zlib**\n\n\n\nreturn: Byte[]\n\n```function : public : Uncompress() ~ Byte[]```"]
			}
		}
	},
	"System.ByteArrayHolder": {
		"description": "Holds a byte array",
		"functions": {
			"Get": {
				"descriptions": ["**Get values**\n\n\n\nreturn: Byte[]\n\n```method : public : Get() ~ Byte[]```"]
			},
			"New": {
				"descriptions": ["**Copy constructor**\n\n\n\nvalues - Byte[]\n\n```New(values:Byte[])```"]
			},
			"Set": {
				"descriptions": ["**Sets values**\n\n\n\nvalues - Byte[]\n\nreturn: Nil\n\n```method : public : Set(values:Byte[]) ~ Nil```"]
			}
		}
	},
	"System.ByteHolder": {
		"description": "Holds an byte value",
		"functions": {
			"Clone": {
				"descriptions": ["**Clones the object instance**\n\n\n\nreturn: System.Compare\n\n```method : public : Clone() ~ System.Compare```"]
			},
			"Compare": {
				"descriptions": ["**Compares two objects**\n\n\n\nrhs - System.Compare\n\nreturn: Int\n\n```method : public : native : Compare(rhs:System.Compare) ~ Int```"]
			},
			"Get": {
				"descriptions": ["**Get byte value**\n\n\n\nreturn: Byte\n\n```method : public : Get() ~ Byte```"]
			},
			"HashID": {
				"descriptions": ["**Returns a unique hash ID for a byte**\n\n\n\nreturn: Int\n\n```method : public : HashID() ~ Int```"]
			},
			"New": {
				"descriptions": ["**Default constructor**\n\n\n\n```New()```", "**Copy constructor**\n\n\n\nvalue - Byte\n\n```New(value:Byte)```"]
			},
			"Set": {
				"descriptions": ["**Set byte value**\n\n\n\nvalue - Byte\n\nreturn: Nil\n\n```method : public : Set(value:Byte) ~ Nil```"]
			}
		}
	},
	"System.Char": {
		"description": "Character class represents a Unicode character value.",
		"functions": {
			"Compare": {
				"descriptions": ["**Compares two values**\n\n\n\nl - Char\n\nr - Char\n\nreturn: Int\n\n```function : public : native : Compare(l:Char, r:Char) ~ Int```"]
			},
			"Error": {
				"descriptions": ["**Prints error value**\n\n\n\nreturn: Nil\n\n```function : public : Error() ~ Nil```"]
			},
			"ErrorLine": {
				"descriptions": ["**Prints error value with newline**\n\n\n\nreturn: Nil\n\n```function : public : ErrorLine() ~ Nil```"]
			},
			"IsChar": {
				"descriptions": ["**Checks of the character is a alpha digit**\n\n\n\nreturn: Bool\n\n```function : public : native : IsChar() ~ Bool```"]
			},
			"IsDigit": {
				"descriptions": ["**Checks of the character is a numeric digit**\n\n\n\nreturn: Bool\n\n```function : public : native : IsDigit() ~ Bool```"]
			},
			"IsLower": {
				"descriptions": ["**Checks if the character is lower-case**\n\n\n\nreturn: Bool\n\n```function : public : native : IsLower() ~ Bool```"]
			},
			"IsUpper": {
				"descriptions": ["**Checks if the character is upper-case**\n\n\n\nreturn: Bool\n\n```function : public : native : IsUpper() ~ Bool```"]
			},
			"Max": {
				"descriptions": ["**Returns the largest byte value**\n\n\n\nl - Char\n\nr - Char\n\nreturn: Char\n\n```function : public : native : Max(l:Char, r:Char) ~ Char```"]
			},
			"Min": {
				"descriptions": ["**Returns the smallest byte value**\n\n\n\nl - Char\n\nr - Char\n\nreturn: Char\n\n```function : public : native : Min(l:Char, r:Char) ~ Char```"]
			},
			"Print": {
				"descriptions": ["**Prints value**\n\n\n\nreturn: Nil\n\n```function : public : Print() ~ Nil```"]
			},
			"Sort": {
				"descriptions": ["**Prints value with newline**\n\n\n\nreturn: Char[]\n\n```function : public : native : Sort() ~ Char[]```"]
			},
			"ToByte": {
				"descriptions": ["**Returns the Character value**\n\n\n\nreturn: Byte\n\n```function : public : ToByte() ~ Byte```"]
			},
			"ToFloat": {
				"descriptions": ["**Returns the Float value**\n\n\n\nreturn: Float\n\n```function : public : ToFloat() ~ Float```"]
			},
			"ToInt": {
				"descriptions": ["**Returns the Int value**\n\n\n\nreturn: Int\n\n```function : public : ToInt() ~ Int```"]
			},
			"ToLower": {
				"descriptions": ["**Converts character to lower-case**\n\n\n\nreturn: Char\n\n```function : public : native : ToLower() ~ Char```"]
			},
			"ToString": {
				"descriptions": ["**Returns a string representation of the value**\n\n\n\nreturn: String\n\n```function : public : native : ToString() ~ String```"]
			},
			"ToUpper": {
				"descriptions": ["**Converts character to upper-case**\n\n\n\nreturn: Char\n\n```function : public : native : ToUpper() ~ Char```"]
			}
		}
	},
	"System.CharArrayHolder": {
		"description": "Holds a character array",
		"functions": {
			"Get": {
				"descriptions": ["**Get value**\n\n\n\nreturn: Char[]\n\n```method : public : Get() ~ Char[]```"]
			},
			"New": {
				"descriptions": ["**Copy constructor**\n\n\n\nvalues - Char[]\n\n```New(values:Char[])```"]
			},
			"Set": {
				"descriptions": ["**Set value**\n\n\n\nvalues - Char[]\n\nreturn: Nil\n\n```method : public : Set(values:Char[]) ~ Nil```"]
			}
		}
	},
	"System.CharHolder": {
		"description": "Holds an character value",
		"functions": {
			"Clone": {
				"descriptions": ["**Clones the object instance**\n\n\n\nreturn: System.Compare\n\n```method : public : Clone() ~ System.Compare```"]
			},
			"Compare": {
				"descriptions": ["**Compares two objects**\n\n\n\nrhs - System.Compare\n\nreturn: Int\n\n```method : public : native : Compare(rhs:System.Compare) ~ Int```"]
			},
			"Get": {
				"descriptions": ["**Get character value**\n\n\n\nreturn: Char\n\n```method : public : Get() ~ Char```"]
			},
			"HashID": {
				"descriptions": ["**Returns a unique hash ID for a character**\n\n\n\nreturn: Int\n\n```method : public : HashID() ~ Int```"]
			},
			"New": {
				"descriptions": ["**Default constructor**\n\n\n\n```New()```", "**Copy constructor**\n\n\n\nvalue - Char\n\n```New(value:Char)```"]
			},
			"Set": {
				"descriptions": ["**Set character value**\n\n\n\nvalue - Char\n\nreturn: Nil\n\n```method : public : Set(value:Char) ~ Nil```"]
			}
		}
	},
	"System.Clone": {
		"description": "Used to clone objects",
		"functions": {
			"Clone": {
				"descriptions": ["**Clones the object instance**\n\n\n\nreturn: System.Clone\n\n```method : public : virutal : Clone() ~ System.Clone```"]
			}
		}
	},
	"System.Compare": {
		"description": "Used to compare two abstract values",
		"functions": {
			"Compare": {
				"descriptions": ["**Compares two objects**\n\n\n\nrhs - System.Compare\n\nreturn: Int\n\n```method : public : virutal : Compare(rhs:System.Compare) ~ Int```"]
			},
			"HashID": {
				"descriptions": ["**Returns a hash ID for the given class**\n\n\n\nreturn: Int\n\n```method : public : virutal : HashID() ~ Int```"]
			}
		}
	},
	"System.Float": {
		"description": "Float class represents a double-precision floating-point value",
		"functions": {
			"Abs": {
				"descriptions": ["**Returns the absolute value**\n\n\n\nreturn: Float\n\n```function : public : native : Abs() ~ Float```"]
			},
			"ArcCos": {
				"descriptions": ["**Calculates the cosine value**\n\n\n\nreturn: Float\n\n```function : public : ArcCos() ~ Float```"]
			},
			"ArcSin": {
				"descriptions": ["**Calculates the arc-sine value**\n\n\n\nreturn: Float\n\n```function : public : ArcSin() ~ Float```"]
			},
			"ArcTan": {
				"descriptions": ["**Calculates the arc-tangent value**\n\n\n\nreturn: Float\n\n```function : public : ArcTan() ~ Float```"]
			},
			"ArcTan2": {
				"descriptions": ["**Calculates arc tangent of y/x**\n\n\n\ny - Float\n\nx - Float\n\nreturn: Float\n\n```function : public : ArcTan2(y:Float, x:Float) ~ Float```"]
			},
			"Ceiling": {
				"descriptions": ["**Calculates the ceiling value**\n\n\n\nreturn: Float\n\n```function : public : Ceiling() ~ Float```"]
			},
			"Compare": {
				"descriptions": ["**Compares two value**\n\n\n\nl - Float\n\nr - Float\n\nreturn: Int\n\n```function : public : native : Compare(l:Float, r:Float) ~ Int```"]
			},
			"Cos": {
				"descriptions": ["**Calculates the cosine value**\n\n\n\nreturn: Float\n\n```function : public : Cos() ~ Float```"]
			},
			"E": {
				"descriptions": ["**Value of E**\n\n\n\nreturn: Float\n\n```function : public : native : E() ~ Float```"]
			},
			"Error": {
				"descriptions": ["**Prints error value**\n\n\n\nreturn: Nil\n\n```function : public : Error() ~ Nil```"]
			},
			"ErrorLine": {
				"descriptions": ["**Prints error value with newline**\n\n\n\nreturn: Nil\n\n```function : public : ErrorLine() ~ Nil```"]
			},
			"Floor": {
				"descriptions": ["**Calculates the floor value**\n\n\n\nreturn: Float\n\n```function : public : Floor() ~ Float```"]
			},
			"IsNeg": {
				"descriptions": ["**Checks is a number is negative**\n\n\n\nreturn: Bool\n\n```function : public : native : IsNeg() ~ Bool```"]
			},
			"Log": {
				"descriptions": ["**Calculates the log value**\n\n\n\nreturn: Float\n\n```function : public : Log() ~ Float```"]
			},
			"Max": {
				"descriptions": ["**Returns the largest float value**\n\n\n\nl - Float\n\nr - Float\n\nreturn: Float\n\n```function : public : native : Max(l:Float, r:Float) ~ Float```"]
			},
			"Min": {
				"descriptions": ["**Returns the smallest float value**\n\n\n\nl - Float\n\nr - Float\n\nreturn: Float\n\n```function : public : native : Min(r:Float) ~ Float```"]
			},
			"NotNeg": {
				"descriptions": ["**Checks is a number is not negative**\n\n\n\nreturn: Bool\n\n```function : public : native : NotNeg() ~ Bool```"]
			},
			"Pi": {
				"descriptions": ["**Value of Pi**\n\n\n\nreturn: Float\n\n```function : public : native : Pi() ~ Float```"]
			},
			"Power": {
				"descriptions": ["**Calculates the power value**\n\n\n\nb - Float\n\nr - Float\n\nreturn: Float\n\n```function : public : Power(b:Float, r:Float) ~ Float```"]
			},
			"Print": {
				"descriptions": ["**Prints value**\n\n\n\nreturn: Nil\n\n```function : public : Print() ~ Nil```"]
			},
			"PrintLine": {
				"descriptions": ["**Prints value with newline**\n\n\n\nreturn: Nil\n\n```function : public : PrintLine() ~ Nil```"]
			},
			"Random": {
				"descriptions": ["**Returns a pseudo random value between 0.0 and 1.0**\n\n\n\nreturn: Float\n\n```function : public : Random() ~ Float```"]
			},
			"Sin": {
				"descriptions": ["**Calculates the sine value**\n\n\n\nreturn: Float\n\n```function : public : Sin() ~ Float```"]
			},
			"SquareRoot": {
				"descriptions": ["**Calculates the natural log value**\n\n\n\nreturn: Float\n\n```function : public : SquareRoot() ~ Float```"]
			},
			"Tan": {
				"descriptions": ["**Calculates the tangent value**\n\n\n\nreturn: Float\n\n```function : public : Tan() ~ Float```"]
			},
			"ToByte": {
				"descriptions": ["**Returns the Character value**\n\n\n\nreturn: Byte\n\n```function : public : ToByte() ~ Byte```"]
			},
			"ToChar": {
				"descriptions": ["**Returns the Int value**\n\n\n\nreturn: Char\n\n```function : public : ToChar() ~ Char```"]
			},
			"ToDegrees": {
				"descriptions": ["**Converts the value into degrees**\n\n\n\nreturn: Float\n\n```function : public : native : ToDegrees() ~ Float```"]
			},
			"ToInt": {
				"descriptions": ["**Returns the Int value**\n\n\n\nreturn: Int\n\n```function : public : ToInt() ~ Int```"]
			},
			"ToRadians": {
				"descriptions": ["**Converts the value into radians**\n\n\n\nreturn: Float\n\n```function : public : native : ToRadians() ~ Float```"]
			},
			"ToString": {
				"descriptions": ["**Returns a string representation of the value**\n\n\n\nreturn: String\n\n```function : public : native : ToString() ~ String```"]
			}
		}
	},
	"System.FloatArrayHolder": {
		"description": "Holds a float array",
		"functions": {
			"Get": {
				"descriptions": ["**Gets values**\n\n\n\nreturn: Float[]\n\n```method : public : Get() ~ Float[]```"]
			},
			"New": {
				"descriptions": ["**Copy constructor**\n\n\n\nvalues - Float[]\n\n```New(values:Float[])```"]
			},
			"Set": {
				"descriptions": ["**Sets values**\n\n\n\nvalues - Float[]\n\nreturn: Nil\n\n```method : public : Set(values:Float[]) ~ Nil```"]
			}
		}
	},
	"System.FloatHolder": {
		"description": "Holds a float",
		"functions": {
			"Add": {
				"descriptions": ["**Adds to value**\n\n\n\nvalue - Float\n\nreturn: Nil\n\n```method : public : Add(value:Float) ~ Nil```"]
			},
			"Clone": {
				"descriptions": ["**Clones the object instance**\n\n\n\nreturn: System.Compare\n\n```method : public : Clone() ~ System.Compare```"]
			},
			"Compare": {
				"descriptions": ["**Compares two objects**\n\n\n\nrhs - System.Compare\n\nreturn: Int\n\n```method : public : native : Compare(rhs:System.Compare) ~ Int```"]
			},
			"Div": {
				"descriptions": ["**Divide by value**\n\n\n\nvalue - Float\n\nreturn: Nil\n\n```method : public : Div(value:Float) ~ Nil```"]
			},
			"Get": {
				"descriptions": ["**Get value**\n\n\n\nreturn: Float\n\n```method : public : Get() ~ Float```"]
			},
			"HashID": {
				"descriptions": ["**Returns a unique hash ID for a float**\n\n\n\nreturn: Int\n\n```method : public : HashID() ~ Int```"]
			},
			"Mul": {
				"descriptions": ["**Multiply to value**\n\n\n\nvalue - Float\n\nreturn: Nil\n\n```method : public : Mul(value:Float) ~ Nil```"]
			},
			"New": {
				"descriptions": ["**Default constructor**\n\n\n\n```New()```", "**Copy constructor**\n\n\n\nvalue - Float\n\n```New(value:Float)```"]
			},
			"Set": {
				"descriptions": ["**Set value**\n\n\n\nvalue - Float\n\nreturn: Nil\n\n```method : public : Set(value:Float) ~ Nil```"]
			},
			"Sub": {
				"descriptions": ["**Subtract from value**\n\n\n\nvalue - Float\n\nreturn: Nil\n\n```method : public : Sub(value:Float) ~ Nil```"]
			}
		}
	},
	"System.Func2Holder": {
		"description": "Holds a function of in type X and out type R",
		"functions": {
			"Apply": {
				"descriptions": ["**Apply function**\n\n\n\narg - X\n\nreturn: R\n\n```function : public : Apply(arg:X) ~ R```"]
			},
			"Get": {
				"descriptions": ["**Gets function**\n\n\n\nreturn: (X)~R\n\n```method : public : Get() ~ (X)~R```"]
			},
			"New": {
				"descriptions": ["**Constructor**\n\n\n\nfunc - (X)~R\n\n```New(func:(X)~R)```"]
			},
			"Set": {
				"descriptions": ["**Sets function**\n\n\n\nfunc - (X)~R\n\nreturn: Nil\n\n```method : public : Set(func:(X)~R) ~ Nil```"]
			}
		}
	},
	"System.Func3Holder": {
		"description": "Holds a function of in types X, Y and out type R",
		"functions": {
			"Get": {
				"descriptions": ["**Gets function**\n\n\n\nreturn: (X,Y)~R\n\n```method : public : Get() ~ (X,Y)~R```"]
			},
			"New": {
				"descriptions": ["**Constructor**\n\n\n\nfunc - (X,Y)~R\n\n```New(func:(X,Y)~R)```"]
			},
			"Set": {
				"descriptions": ["**Sets function**\n\n\n\nfunc - (X,Y)~R\n\nreturn: Nil\n\n```method : public : Set(func:(X,Y)~R) ~ Nil```"]
			}
		}
	},
	"System.Func4Holder": {
		"description": "Holds a function of in types X, Y, Z and out type R",
		"functions": {
			"Get": {
				"descriptions": ["**Gets function**\n\n\n\nreturn: (X,Y,Z)~R\n\n```method : public : Get() ~ (X,Y,Z)~R```"]
			},
			"New": {
				"descriptions": ["**Constructor**\n\n\n\nfunc - (X,Y,Z)~R\n\n```New(func:(X,Y,Z)~R)```"]
			},
			"Set": {
				"descriptions": ["**Sets function**\n\n\n\nfunc - (X,Y,Z)~R\n\nreturn: Nil\n\n```method : public : Set(func:(X,Y,Z)~R) ~ Nil```"]
			}
		}
	},
	"System.FuncHolder": {
		"description": "Holds a function of in/out type R",
		"functions": {
			"Get": {
				"descriptions": ["**Gets function**\n\n\n\nreturn: ()~R\n\n```method : public : Get() ~ ()~R```"]
			},
			"New": {
				"descriptions": ["**Constructor**\n\n\n\nfunc - ()~R\n\n```New(func:()~R)```"]
			},
			"Set": {
				"descriptions": ["**Sets function**\n\n\n\nfunc - ()~R\n\nreturn: Nil\n\n```method : public : Set(func:()~R) ~ Nil```"]
			}
		}
	},
	"System.Int": {
		"description": "Integer class represents an operating system long value",
		"functions": {
			"Abs": {
				"descriptions": ["**Returns the absolute value**\n\n\n\nreturn: Int\n\n```function : public : native : Abs() ~ Int```"]
			},
			"Compare": {
				"descriptions": ["**Compares two values**\n\n\n\nl - Int\n\nr - Int\n\nreturn: Int\n\n```function : public : native : Compare(l:Int, r:Int) ~ Int```"]
			},
			"Error": {
				"descriptions": ["**Prints error value**\n\n\n\nreturn: Nil\n\n```function : public : Error() ~ Nil```"]
			},
			"ErrorLine": {
				"descriptions": ["**Prints error value with newline**\n\n\n\nreturn: Nil\n\n```function : public : ErrorLine() ~ Nil```"]
			},
			"Factorial": {
				"descriptions": ["**Calculates the factorial of existing value**\n\n\n\nn - Int\n\nreturn: Int\n\n```function : public : native : Factorial() ~ Int```"]
			},
			"IsNeg": {
				"descriptions": ["**Checks is a number is negative**\n\n\n\nreturn: Bool\n\n```function : public : native : IsNeg() ~ Bool```"]
			},
			"Max": {
				"descriptions": ["**Returns the largest integer value**\n\n\n\nl - Int\n\nr - Int\n\nreturn: Int\n\n```function : public : native : Max(l:Int, r:Int) ~ Int```"]
			},
			"MaxSize": {
				"descriptions": ["**Returns the maximum size of an integer**\n\n\n\nreturn: Int\n\n```function : public : native : MaxSize() ~ Int```"]
			},
			"Min": {
				"descriptions": ["**Returns the smallest integer value**\n\n\n\nl - Int\n\nr - Int\n\nreturn: Int\n\n```function : public : native : Min(l:Int, r:Int) ~ Int```"]
			},
			"MinSize": {
				"descriptions": ["**Returns the minimum size of an integer**\n\n\n\nreturn: Int\n\n```function : public : native : MinSize() ~ Int```"]
			},
			"NotNeg": {
				"descriptions": ["**Checks is a number is not negative**\n\n\n\nreturn: Bool\n\n```function : public : native : NotNeg() ~ Bool```"]
			},
			"Print": {
				"descriptions": ["**Prints value**\n\n\n\nreturn: Nil\n\n```function : public : Print() ~ Nil```"]
			},
			"PrintLine": {
				"descriptions": ["**Prints value with newline**\n\n\n\nreturn: Nil\n\n```function : public : PrintLine() ~ Nil```"]
			},
			"Random": {
				"descriptions": ["**Returns a random number within the given range**\n\n\n\nmin - Int\n\nmax - Int\n\nreturn: Int\n\n```function : public : Random(min:Int, max:Int) ~ Int```", "**Returns a random number between 0 and max value**\n\n\n\nmax - Int\n\nreturn: Int\n\n```function : public : Random(max:Int) ~ Int```"]
			},
			"ToBinaryString": {
				"descriptions": ["**Returns the binary string value**\n\n\n\nreturn: String\n\n```function : public : native : ToBinaryString() ~ String```"]
			},
			"ToByte": {
				"descriptions": ["**Returns the Byte value**\n\n\n\nreturn: Byte\n\n```function : public : ToByte() ~ Byte```"]
			},
			"ToChar": {
				"descriptions": ["**Returns the Character value**\n\n\n\nreturn: Char\n\n```function : public : ToChar() ~ Char```"]
			},
			"ToCommaString": {
				"descriptions": ["**Returns a comma formatted string value**\n\n\n\nreturn: String\n\n```function : public : native : ToCommaString() ~ String```"]
			},
			"ToFloat": {
				"descriptions": ["**Returns the Float value**\n\n\n\nreturn: Float\n\n```function : public : ToFloat() ~ Float```"]
			},
			"ToHexString": {
				"descriptions": ["**Returns the hex string value**\n\n\n\nreturn: String\n\n```function : public : native : ToHexString() ~ String```"]
			},
			"ToString": {
				"descriptions": ["**Returns the string value**\n\n\n\nreturn: String\n\n```function : public : ToString() ~ String```", "**Returns a string representation of the value**\n\n\n\nreturn: String\n\n```function : public : native : ToString() ~ String```"]
			}
		}
	},
	"System.IntArrayHolder": {
		"description": "Holds an integer array",
		"functions": {
			"Get": {
				"descriptions": ["**Get values**\n\n\n\nreturn: Int[]\n\n```method : public : Get() ~ Int[]```"]
			},
			"New": {
				"descriptions": ["**Copy constructor**\n\n\n\nvalues - Int[]\n\n```New(values:Int[])```"]
			},
			"Set": {
				"descriptions": ["**Set values**\n\n\n\nvalues - Int[]\n\nreturn: Nil\n\n```method : public : Set(values:Int[]) ~ Nil```"]
			}
		}
	},
	"System.IntHolder": {
		"description": "Holds an integer value",
		"functions": {
			"Add": {
				"descriptions": ["**Adds to value**\n\n\n\nvalue - Int\n\nreturn: Nil\n\n```method : public : Add(value:Int) ~ Nil```"]
			},
			"Clone": {
				"descriptions": ["**Clones the object instance**\n\n\n\nreturn: System.Compare\n\n```method : public : Clone() ~ System.Compare```"]
			},
			"Compare": {
				"descriptions": ["**Compares two objects**\n\n\n\nrhs - System.Compare\n\nreturn: Int\n\n```method : public : native : Compare(rhs:System.Compare) ~ Int```"]
			},
			"Dec": {
				"descriptions": ["**Decrements value by 1**\n\n\n\nreturn: Nil\n\n```method : public : Dec() ~ Nil```"]
			},
			"Div": {
				"descriptions": ["**Divide by value**\n\n\n\nvalue - Int\n\nreturn: Nil\n\n```method : public : Div(value:Int) ~ Nil```"]
			},
			"Get": {
				"descriptions": ["**Get integer value**\n\n\n\nreturn: Int\n\n```method : public : Get() ~ Int```"]
			},
			"HashID": {
				"descriptions": ["**Returns a unique hash ID for a integer**\n\n\n\nreturn: Int\n\n```method : public : HashID() ~ Int```"]
			},
			"Inc": {
				"descriptions": ["**Increments value by 1**\n\n\n\nreturn: Nil\n\n```method : public : Inc() ~ Nil```"]
			},
			"Mul": {
				"descriptions": ["**Multiply to value**\n\n\n\nvalue - Int\n\nreturn: Nil\n\n```method : public : Mul(value:Int) ~ Nil```"]
			},
			"New": {
				"descriptions": ["**Default constructor**\n\n\n\n```New()```", "**Copy constructor**\n\n\n\nvalue - Int\n\n```New(value:Int)```"]
			},
			"Set": {
				"descriptions": ["**Set integer value**\n\n\n\nvalue - Int\n\nreturn: Nil\n\n```method : public : Set(value:Int) ~ Nil```"]
			},
			"Sub": {
				"descriptions": ["**Subtract from value**\n\n\n\nvalue - Int\n\nreturn: Nil\n\n```method : public : Sub(value:Int) ~ Nil```"]
			}
		}
	},
	"System.Runtime": {
		"description": "Provides access to runtime system",
		"functions": {
			"Assert": {
				"descriptions": ["**Asserts runtime value to be true. If false, program exits with stack trace.**\n\n\n\nassert - Bool\n\nreturn: Nil\n\n```function : public : Assert(assert:Bool) ~ Nil```"]
			},
			"Command": {
				"descriptions": ["**Executes a system command**\n\n\n\nn - System.String\n\nreturn: Int\n\n```function : public : Command(n:System.String) ~ Int```"]
			},
			"CommandOutput": {
				"descriptions": ["**Executes a system command**\n\n\n\nn - System.String\n\nreturn: System.String[]\n\n```function : public : CommandOutput(n:System.String) ~ System.String[]```"]
			},
			"Copy": {
				"descriptions": ["**Copies data between two byte arrays**\n\n\n\ndest - Byte[]\n\ndest_offset - Int\n\nsrc - Byte[]\n\nsrc_offset - Int\n\nlen - Int\n\nreturn: Bool\n\n```function : public : Copy(dest:Byte[], dest_offset:Int, src:Byte[], src_offset:Int, len:Int) ~ Bool```", "**Copies data between two character arrays**\n\n\n\ndest - Char[]\n\ndest_offset - Int\n\nsrc - Char[]\n\nsrc_offset - Int\n\nlen - Int\n\nreturn: Bool\n\n```function : public : Copy(dest:Char[], dest_offset:Int, src:Char[], src_offset:Int, len:Int) ~ Bool```", "**Copies data between two integer arrays**\n\n\n\ndest - Int[]\n\ndest_offset - Int\n\nsrc - Int[]\n\nsrc_offset - Int\n\nlen - Int\n\nreturn: Bool\n\n```function : public : Copy(dest:Int[], dest_offset:Int, src:Int[], src_offset:Int, len:Int) ~ Bool```", "**Copies data between two Base arrays**\n\n\n\ndest - Base[]\n\ndest_offset - Int\n\nsrc - Base[]\n\nsrc_offset - Int\n\nlen - Int\n\nreturn: Bool\n\n```function : public : Copy(dest:Base[], dest_offset:Int, src:Base[], src_offset:Int, len:Int) ~ Bool```", "**Copies data between two Compare arrays**\n\n\n\ndest - Compare[]\n\ndest_offset - Int\n\nsrc - Compare[]\n\nsrc_offset - Int\n\nlen - Int\n\nreturn: Bool\n\n```function : public : Copy(dest:Compare[], dest_offset:Int, src:Compare[], src_offset:Int, len:Int) ~ Bool```", "**Copies data between two float arrays**\n\n\n\ndest - Float[]\n\ndest_offset - Int\n\nsrc - Float[]\n\nsrc_offset - Int\n\nlen - Int\n\nreturn: Bool\n\n```function : public : Copy(dest:Float[], dest_offset:Int, src:Float[], src_offset:Int, len:Int) ~ Bool```"]
			},
			"Exit": {
				"descriptions": ["**Causes the executing program to halt**\n\n\n\ncode - Int\n\nreturn: Nil\n\n```function : public : Exit(code:Int) ~ Nil```"]
			},
			"GetInstallDir": {
				"descriptions": ["**Returns the installation directory**\n\n\n\nreturn: String\n\n```function : public : GetInstallDir() ~ String```"]
			},
			"GetPlatform": {
				"descriptions": ["**Returns an OS platform string**\n\n\n\nreturn: String\n\n```function : public : GetPlatform() ~ String```"]
			},
			"GetProperty": {
				"descriptions": ["**Fetches a runtime property. System properties include: 'user_dir', temp_dir and 'install_dir'.**\n\n\n\nkey - String\n\nreturn: String\n\n```function : public : GetProperty(key:String) ~ String```"]
			},
			"GetTempDir": {
				"descriptions": ["**Returns the system's temporary directory**\n\n\n\nreturn: String\n\n```function : public : GetTempDir() ~ String```"]
			},
			"GetTime": {
				"descriptions": ["**Returns the current time**\n\n\n\ngmt - Bool\n\nreturn: Time.Date\n\n```function : public : GetTime(gmt:Bool) ~ Time.Date```"]
			},
			"GetUserDir": {
				"descriptions": ["**Returns the current user's working directory**\n\n\n\nreturn: String\n\n```function : public : GetUserDir() ~ String```"]
			},
			"GetVersion": {
				"descriptions": ["**Returns the package version string**\n\n\n\nreturn: String\n\n```function : public : GetVersion() ~ String```"]
			},
			"SetPrecision": {
				"descriptions": ["**Set floating point display precision. Valid values are a number, 'fixed' or 'scientific'.**\n\n\n\nvalue - String\n\nreturn: Nil\n\n```function : public : SetPrecision(value:String) ~ Nil```"]
			},
			"SetProperty": {
				"descriptions": ["**Sets a runtime property**\n\n\n\nkey - String\n\nvalue - String\n\nreturn: Nil\n\n```function : public : SetProperty(key:String, value:String) ~ Nil```"]
			}
		}
	},
	"System.String": {
		"description": "Resizeable Unicode string class that supports typical string operations.",
		"functions": {
			"Append": {
				"descriptions": ["**Appends a boolean value**\n\n\n\nflag - Bool\n\nreturn: Nil\n\n```method : public : Append(flag:Bool) ~ Nil```", "**Appends a integer value**\n\n\n\ni - Int\n\nreturn: Nil\n\n```method : public : Append(i:Int) ~ Nil```", "**Appends a float value**\n\n\n\nf - Float\n\nreturn: Nil\n\n```method : public : Append(f:Float) ~ Nil```", "**Appends a string**\n\n\n\nstr - String\n\nreturn: Nil\n\n```method : public : native : Append(str:String) ~ Nil```", "**Appends a character array**\n\n\n\narray - Char[]\n\nreturn: Nil\n\n```method : public : Append(array:Char[]) ~ Nil```", "**Appends a portion of character array**\n\n\n\narray - Char[]\n\noffset - Int\n\nlength - Int\n\nreturn: Nil\n\n```method : public : native : Append(array:Char[], offset:Int, length:Int) ~ Nil```", "**Appends a character array**\n\n\n\narray - Byte[]\n\nreturn: Nil\n\n```method : public : native : Append(array:Byte[]) ~ Nil```", "**Appends a portion of byte array**\n\n\n\narray - Byte[]\n\noffset - Int\n\nlength - Int\n\nreturn: Nil\n\n```method : public : native : Append(array:Byte[], offset:Int, length:Int) ~ Nil```", "**Appends a character**\n\n\n\nc - Char\n\nreturn: Nil\n\n```method : public : Append(c:Char) ~ Nil```", "**Appends a byte**\n\n\n\nc - Byte\n\nreturn: Nil\n\n```method : public : Append(c:Byte) ~ Nil```"]
			},
			"Capacity": {
				"descriptions": ["**Gets the current string capacity.**\n\n\n\nreturn: Int\n\n```method : public : Capacity() ~ Int```"]
			},
			"Clear": {
				"descriptions": ["**Clears string**\n\n\n\nreturn: Nil\n\n```method : public : Clear() ~ Nil```"]
			},
			"Clone": {
				"descriptions": ["**Clones the object instance**\n\n\n\nreturn: System.Compare\n\n```method : public : Clone() ~ System.Compare```"]
			},
			"Compare": {
				"descriptions": ["**Compares two objects**\n\n\n\nrhs - System.Compare\n\nreturn: Int\n\n```method : public : Compare(rhs:System.Compare) ~ Int```"]
			},
			"Compress": {
				"descriptions": ["**Compresses a string removing unused space.**\n\n\n\nreturn: Nil\n\n```method : public : Compress() ~ Nil```"]
			},
			"Count": {
				"descriptions": ["**Count the occurrences of the character**\n\n\n\nchar - Char\n\nreturn: Int\n\n```method : public : Count(char:Char) ~ Int```"]
			},
			"Delete": {
				"descriptions": ["**Deletes the character at the given index**\n\n\n\noffset - Int\n\nreturn: Bool\n\n```method : public : Delete(offset:Int) ~ Bool```", "**Deletes the characters at the given range**\n\n\n\noffset - Int\n\nlength - Int\n\nreturn: Bool\n\n```method : public : Delete(offset:Int, length:Int) ~ Bool```"]
			},
			"EndsWith": {
				"descriptions": ["**Checks if the string ends with the given character**\n\n\n\nchar - Char\n\nreturn: Bool\n\n```method : public : EndsWith(char:Char) ~ Bool```", "**Checks if the string ends with the given character**\n\n\n\nstring - String\n\nreturn: Bool\n\n```method : public : native : EndsWith(string:String) ~ Bool```"]
			},
			"Equals": {
				"descriptions": ["**Compares two strings**\n\n\n\nrhs - String\n\nreturn: Bool\n\n```method : public : Equals(rhs:String) ~ Bool```"]
			},
			"Error": {
				"descriptions": ["**Print an error string**\n\n\n\nreturn: Nil\n\n```method : public : native : Error() ~ Nil```"]
			},
			"ErrorLine": {
				"descriptions": ["**Print an error string with a newline**\n\n\n\nreturn: Nil\n\n```method : public : native : ErrorLine() ~ Nil```"]
			},
			"Find": {
				"descriptions": ["**Searches for the first occurrence of a character**\n\n\n\nchar - Char\n\nreturn: Int\n\n```method : public : Find(char:Char) ~ Int```", "**Searches for the first occurrence of a character**\n\n\n\noffset - Int\n\nchar - Char\n\nreturn: Int\n\n```method : public : native : Find(offset:Int, char:Char) ~ Int```", "**Searches for the first occurrence of a string**\n\n\n\nfind - String\n\nreturn: Int\n\n```method : public : Find(find:String) ~ Int```", "**Searches for the first occurrence of a string**\n\n\n\noffset - Int\n\nfind - String\n\nreturn: Int\n\n```method : public : native : Find(offset:Int, find:String) ~ Int```"]
			},
			"FindAll": {
				"descriptions": ["**Searches for all occurrences of a string**\n\n\n\nfind - String\n\nreturn: Int[]\n\n```method : public : FindAll(find:String) ~ Int[]```"]
			},
			"FindLast": {
				"descriptions": ["**Searches for the last occurrence of a character**\n\n\n\nchar - Char\n\nreturn: Int\n\n```method : public : FindLast(char:Char) ~ Int```", "**Searches for the last occurrence of a character**\n\n\n\noffset - Int\n\nchar - Char\n\nreturn: Int\n\n```method : public : native : FindLast(offset:Int, char:Char) ~ Int```"]
			},
			"Get": {
				"descriptions": ["**Returns character at the given index**\n\n\n\nindex - Int\n\nreturn: Char\n\n```method : public : native : Get(index:Int) ~ Char```"]
			},
			"Has": {
				"descriptions": ["**Searches for the first occurrence of a character**\n\n\n\nchar - Char\n\nreturn: Bool\n\n```method : public : Has(char:Char) ~ Bool```", "**Searches for the first occurrence of a character**\n\n\n\noffset - Int\n\nchar - Char\n\nreturn: Bool\n\n```method : public : Has(offset:Int, char:Char) ~ Bool```", "**Searches for the first occurrence of a character**\n\n\n\nstr - String\n\nreturn: Bool\n\n```method : public : Has(str:String) ~ Bool```", "**Searches for the first occurrence of a character**\n\n\n\noffset - Int\n\nstr - String\n\nreturn: Bool\n\n```method : public : Has(offset:Int, str:String) ~ Bool```"]
			},
			"HashID": {
				"descriptions": ["**Returns a unique hash ID for a given string sequence**\n\n\n\nreturn: Int\n\n```method : public : native : HashID() ~ Int```"]
			},
			"Insert": {
				"descriptions": ["**Insert inserts a character**\n\n\n\nindex - Int\n\nchar - Char\n\nreturn: Bool\n\n```method : public : Insert(index:Int, char:Char) ~ Bool```", "**Insert inserts a string**\n\n\n\nindex - Int\n\nstring - String\n\nreturn: Bool\n\n```method : public : Insert(index:Int, string:String) ~ Bool```"]
			},
			"IsEmpty": {
				"descriptions": ["**Returns rather the string is empty**\n\n\n\nreturn: Bool\n\n```method : public : IsEmpty() ~ Bool```"]
			},
			"New": {
				"descriptions": ["**Default constructor**\n\n\n\n```New()```", "**Copy constructor**\n\n\n\nstring - String\n\n```New(string:String)```", "**Copy constructor**\n\n\n\narray - Char[]\n\n```New(array:Char[])```", "**Copy constructor**\n\n\n\narray - Char[]\n\ncopy - Bool\n\n```New(array:Char[], copy:Bool)```", "**Copy constructor**\n\n\n\narray - Char[]\n\noffset - Int\n\nlength - Int\n\n```New(array:Char[], offset:Int, length:Int)```", "**Copy constructor**\n\n\n\nbytes - Byte[]\n\n```New(bytes:Byte[])```", "**Copy constructor**\n\n\n\nbytes - Byte[]\n\noffset - Int\n\nlength - Int\n\n```New(bytes:Byte[], offset:Int, length:Int)```"]
			},
			"Pop": {
				"descriptions": ["**Pops the last character from the string reducing the size by 1**\n\n\n\nreturn: Char\n\n```method : public : native : Pop() ~ Char```"]
			},
			"Print": {
				"descriptions": ["**Print a string**\n\n\n\nreturn: Nil\n\n```method : public : native : Print() ~ Nil```"]
			},
			"PrintLine": {
				"descriptions": ["**Print a string with a newline**\n\n\n\nreturn: Nil\n\n```method : public : native : PrintLine() ~ Nil```"]
			},
			"Replace": {
				"descriptions": ["**Replaces the first occurrence the search string**\n\n\n\nfind - String\n\nreplace - String\n\nreturn: String\n\n```method : public : Replace(find:String, replace:String) ~ String```"]
			},
			"ReplaceAll": {
				"descriptions": ["**Replaces all occurrences the search string**\n\n\n\nfind - String\n\nreplace - String\n\nreturn: String\n\n```method : public : ReplaceAll(find:String, replace:String) ~ String```", "**Replaces all occurrences the search string**\n\n\n\nfind - Char\n\nreplace - Char\n\nreturn: String\n\n```method : public : native : ReplaceAll(find:Char, replace:Char) ~ String```"]
			},
			"Reverse": {
				"descriptions": ["**Reverses a string**\n\n\n\nreturn: String\n\n```method : public : native : Reverse() ~ String```"]
			},
			"Set": {
				"descriptions": ["**Sets character at the given index**\n\n\n\nchar - Char\n\nindex - Int\n\nreturn: Bool\n\n```method : public : native : Set(char:Char, index:Int) ~ Bool```"]
			},
			"Size": {
				"descriptions": ["**Return the size of the string**\n\n\n\nreturn: Int\n\n```method : public : Size() ~ Int```"]
			},
			"Split": {
				"descriptions": ["**Splits a string based upon delimiter**\n\n\n\ndelim - String\n\nreturn: String[]\n\n```method : public : native : Split(delim:String) ~ String[]```"]
			},
			"StartsWith": {
				"descriptions": ["**Checks if the string starts with the given character**\n\n\n\nchar - Char\n\nreturn: Bool\n\n```method : public : StartsWith(char:Char) ~ Bool```", "**Checks if the string starts with the given string**\n\n\n\nstring - String\n\nreturn: Bool\n\n```method : public : StartsWith(string:String) ~ Bool```"]
			},
			"SubString": {
				"descriptions": ["**Creates a sub-string**\n\n\n\nlength - Int\n\nreturn: String\n\n```method : public : SubString(length:Int) ~ String```", "**Creates a sub-string**\n\n\n\noffset - Int\n\nlength - Int\n\nreturn: String\n\n```method : public : SubString(offset:Int, length:Int) ~ String```"]
			},
			"ToByteArray": {
				"descriptions": ["**Returns a byte array representation of the String**\n\n\n\nreturn: Byte[]\n\n```method : public : native : ToByteArray() ~ Byte[]```"]
			},
			"ToCharArray": {
				"descriptions": ["**Returns a character array representation of the String**\n\n\n\nreturn: Char[]\n\n```method : public : ToCharArray() ~ Char[]```"]
			},
			"ToFloat": {
				"descriptions": ["**Parses the string into a float**\n\n\n\nreturn: Float\n\n```method : public : ToFloat() ~ Float```"]
			},
			"ToInt": {
				"descriptions": ["**Parses the string into an integer**\n\n\n\nreturn: Int\n\n```method : public : ToInt() ~ Int```", "**Parses the string into an integer**\n\n\n\nbase - Int\n\nreturn: Int\n\n```method : public : ToInt(base:Int) ~ Int```"]
			},
			"ToLower": {
				"descriptions": ["**Transforms a to lower case**\n\n\n\nreturn: String\n\n```method : public : native : ToLower() ~ String```"]
			},
			"ToUpper": {
				"descriptions": ["**Transforms a to upper case**\n\n\n\nreturn: String\n\n```method : public : native : ToUpper() ~ String```"]
			},
			"Trim": {
				"descriptions": ["**Removes all leading and ending white space**\n\n\n\nreturn: String\n\n```method : public : native : Trim() ~ String```"]
			}
		}
	},
	"System.StringArrayHolder": {
		"description": "Holds an base array",
		"functions": {
			"Get": {
				"descriptions": ["**Get values**\n\n\n\nreturn: String[]\n\n```method : public : Get() ~ String[]```"]
			},
			"New": {
				"descriptions": ["**Copy constructor**\n\n\n\nvalues - String[]\n\n```New(values:String[])```"]
			},
			"Set": {
				"descriptions": ["**Set values**\n\n\n\nvalues - String[]\n\nreturn: Nil\n\n```method : public : Set(values:String[]) ~ Nil```"]
			}
		}
	},
	"System.API.DllProxy": {
		"description": "Class allow programmers to load native shared libraries that can be called by Objeck classes. Programmers can call native C functions within these libraries.",
		"functions": {
			"CallFunction": {
				"descriptions": ["**Calls a native C function.**\n\n\n\nname - String\n\nargs - Base[]\n\nreturn: Nil\n\n```method : public : CallFunction(name:String, args:Base[]) ~ Nil```"]
			},
			"IsLoaded": {
				"descriptions": ["**Returns rather the shared library has been successfully loaded**\n\n\n\nreturn: Bool\n\n```method : public : IsLoaded() ~ Bool```"]
			},
			"New": {
				"descriptions": ["**Path to the shared library. The path should not include the extension name (i.e. .dll, .so, etc.) for platform portability**\n\n\n\nname - String\n\n```New(name:String)```"]
			},
			"Unload": {
				"descriptions": ["**Unloads the shared library**\n\n\n\nreturn: Nil\n\n```method : public : Unload() ~ Nil```"]
			}
		}
	},
	"System.Concurrency.Thread": {
		"description": "Abstracts native system thread execution",
		"functions": {
			"Execute": {
				"descriptions": ["**Called to execute a new thread**\n\n\n\nparam - System.Base\n\nreturn: Nil\n\n```method : public : Execute(param:System.Base) ~ Nil```"]
			},
			"GetExecuteID": {
				"descriptions": ["**Returns a unique execution ID**\n\n\n\nreturn: Int\n\n```method : public : GetExecuteID() ~ Int```"]
			},
			"GetName": {
				"descriptions": ["**Returns the thread's name**\n\n\n\nreturn: String\n\n```method : public : GetName() ~ String```"]
			},
			"Join": {
				"descriptions": ["**Joins the executing thread with the caller**\n\n\n\nreturn: Nil\n\n```method : public : Join() ~ Nil```"]
			},
			"New": {
				"descriptions": ["**Name of the thread**\n\n\n\nname - String\n\n```New(name:String)```"]
			},
			"Run": {
				"descriptions": ["**Prototype for the thread to be executed**\n\n\n\nparam - System.Base\n\nreturn: Nil\n\n```method : public : virutal : Run(param:System.Base) ~ Nil```"]
			},
			"Sleep": {
				"descriptions": ["**Sleeps the executing thread**\n\n\n\nt - Int\n\nreturn: Nil\n\n```function : public : Sleep(t:Int) ~ Nil```"]
			}
		}
	},
	"System.Concurrency.ThreadMutex": {
		"description": "Thread mutex used to protect critical sections",
		"functions": {
			"GetName": {
				"descriptions": ["**Name of the mutex**\n\n\n\nreturn: String\n\n```method : public : GetName() ~ String```"]
			},
			"New": {
				"descriptions": ["**Name of the mutex**\n\n\n\nname - String\n\n```New(name:String)```"]
			}
		}
	},
	"System.Diagnostics.Analysis": {
		"description": "Analysis results",
		"functions": {
			"CodeRename": {
				"descriptions": ["**Renames a variable or method/function**\n\n\n\nuri - String\n\nline - Int\n\npos - Int\n\nsys_path - String\n\nreturn: Result[]\n\n```method : public : CodeRename(uri:String, line:Int, pos:Int, sys_path:String) ~ Result[]```"]
			},
			"Completion": {
				"descriptions": ["**Get completion options**\n\n\n\nuri - String\n\nline - Int\n\npos - Int\n\nvar_str - String\n\nmthd_str - String\n\nsys_path - String\n\nreturn: Result\n\n```method : public : Completion(uri:String, line:Int, pos:Int, var_str:String, mthd_str:String, sys_path:String) ~ Result```"]
			},
			"FindDeclaration": {
				"descriptions": ["**Finds symbol deceleration**\n\n\n\nuri - String\n\nline - Int\n\npos - Int\n\nsys_path - String\n\nreturn: Result\n\n```method : public : FindDeclaration(uri:String, line:Int, pos:Int, sys_path:String) ~ Result```"]
			},
			"FindDefinition": {
				"descriptions": ["**Finds symbol definition**\n\n\n\nuri - String\n\nline - Int\n\npos - Int\n\nsys_path - String\n\nreturn: Result\n\n```method : public : FindDefinition(uri:String, line:Int, pos:Int, sys_path:String) ~ Result```"]
			},
			"FindReferences": {
				"descriptions": ["**Get references specified symbol**\n\n\n\nuri - String\n\nline - Int\n\npos - Int\n\nsys_path - String\n\nreturn: Result[]\n\n```method : public : FindReferences(uri:String, line:Int, pos:Int, sys_path:String) ~ Result[]```"]
			},
			"GetDiagnostics": {
				"descriptions": ["**Get parse and analysis errors**\n\n\n\nuri - String\n\nsys_path - String\n\nreturn: Result[]\n\n```method : public : GetDiagnostics(uri:String, sys_path:String) ~ Result[]```"]
			},
			"GetSymbols": {
				"descriptions": ["**Get source code analysis symbols**\n\n\n\nuri - String\n\nsys_path - String\n\nreturn: Result\n\n```method : public : GetSymbols(uri:String, sys_path:String) ~ Result```"]
			},
			"Hover": {
				"descriptions": ["**Gets hover signatures**\n\n\n\nuri - String\n\nline - Int\n\npos - Int\n\nvar_str - String\n\nmthd_str - String\n\nsys_path - String\n\nreturn: Result\n\n```method : public : Hover(uri:String, line:Int, pos:Int, var_str:String, mthd_str:String, sys_path:String) ~ Result```"]
			},
			"IsParsed": {
				"descriptions": ["**Check to see if source was parsed**\n\n\n\nreturn: Bool\n\n```method : public : IsParsed() ~ Bool```"]
			},
			"Release": {
				"descriptions": ["**Release native resources, required for clean up.**\n\n\n\nreturn: Nil\n\n```method : public : Release() ~ Nil```"]
			},
			"SignatureHelp": {
				"descriptions": ["**Get signature definitions**\n\n\n\nuri - String\n\nline - Int\n\npos - Int\n\nvar_str - String\n\nmthd_str - String\n\nsys_path - String\n\nreturn: Result\n\n```method : public : SignatureHelp(uri:String, line:Int, pos:Int, var_str:String, mthd_str:String, sys_path:String) ~ Result```"]
			}
		}
	},
	"System.Diagnostics.Analyzer": {
		"description": "Parsers source for analysis",
		"functions": {
			"ParseFile": {
				"descriptions": ["**Parsers source file for analysis**\n\n\n\nsrc_file - String\n\nreturn: Analysis\n\n```function : public : ParseFile(src_file:String) ~ Analysis```"]
			},
			"ParseText": {
				"descriptions": ["**Parsers text for analysis**\n\n\n\nsrc_strs - String[,]\n\nreturn: Analysis\n\n```function : public : ParseText(src_strs:String[,]) ~ Analysis```"]
			}
		}
	},
	"System.Diagnostics.Result": {
		"description": "Generic analysis result",
		"functions": {
			"GetCode": {
				"descriptions": ["**Gets the code**\n\n\n\nreturn: Int\n\n```method : public : GetCode() ~ Int```"]
			},
			"GetDescription": {
				"descriptions": ["**Get result description**\n\n\n\nreturn: String\n\n```method : public : GetDescription() ~ String```"]
			},
			"GetEndLine": {
				"descriptions": ["**Get end line**\n\n\n\nreturn: Int\n\n```method : public : GetEndLine() ~ Int```"]
			},
			"GetEndPosition": {
				"descriptions": ["**Get end position**\n\n\n\nreturn: Int\n\n```method : public : GetEndPosition() ~ Int```"]
			},
			"GetKind": {
				"descriptions": ["**Get result kind**\n\n\n\nreturn: Result-&gt;Kind\n\n```method : public : GetKind() ~ Result-&gt;Kind```"]
			},
			"GetName": {
				"descriptions": ["**Get result name**\n\n\n\nreturn: String\n\n```method : public : GetName() ~ String```"]
			},
			"GetResults": {
				"descriptions": ["**Get child results**\n\n\n\nreturn: Result[]\n\n```method : public : GetResults() ~ Result[]```"]
			},
			"GetStartLine": {
				"descriptions": ["**Get start line**\n\n\n\nreturn: Int\n\n```method : public : GetStartLine() ~ Int```"]
			},
			"GetStartPosition": {
				"descriptions": ["**Get start position**\n\n\n\nreturn: Int\n\n```method : public : GetStartPosition() ~ Int```"]
			},
			"ToString": {
				"descriptions": ["**Result to string**\n\n\n\nreturn: String\n\n```method : public : ToString() ~ String```"]
			}
		}
	},
	"System.IO.Deserializer": {
		"description": "Used to deserialize objects",
		"functions": {
			"New": {
				"descriptions": ["**Default constructor**\n\n\n\nbuffer - Byte[]\n\n```New(buffer:Byte[])```"]
			},
			"ReadBool": {
				"descriptions": ["**Reads a value**\n\n\n\nreturn: Bool\n\n```method : public : ReadBool() ~ Bool```"]
			},
			"ReadBoolArray": {
				"descriptions": ["**Reads an array of values**\n\n\n\nreturn: Bool[]\n\n```method : public : ReadBoolArray() ~ Bool[]```"]
			},
			"ReadByteArray": {
				"descriptions": ["**Reads an array of values**\n\n\n\nreturn: Byte[]\n\n```method : public : ReadByteArray() ~ Byte[]```"]
			},
			"ReadChar": {
				"descriptions": ["**Reads a value**\n\n\n\nreturn: Char\n\n```method : public : ReadChar() ~ Char```"]
			},
			"ReadCharArray": {
				"descriptions": ["**Reads an array of values**\n\n\n\nreturn: Char[]\n\n```method : public : ReadCharArray() ~ Char[]```"]
			},
			"ReadFloat": {
				"descriptions": ["**Reads a value**\n\n\n\nreturn: Float\n\n```method : public : ReadFloat() ~ Float```"]
			},
			"ReadFloatArray": {
				"descriptions": ["**Reads an array of values**\n\n\n\nreturn: Float[]\n\n```method : public : ReadFloatArray() ~ Float[]```"]
			},
			"ReadInt": {
				"descriptions": ["**Reads a value**\n\n\n\nreturn: Int\n\n```method : public : ReadInt() ~ Int```"]
			},
			"ReadIntArray": {
				"descriptions": ["**Reads an array of values**\n\n\n\nreturn: Int[]\n\n```method : public : ReadIntArray() ~ Int[]```"]
			},
			"ReadObject": {
				"descriptions": ["**Reads an object**\n\n\n\nreturn: Base\n\n```method : public : ReadObject() ~ Base```"]
			},
			"ReadObjectArray": {
				"descriptions": ["**Reads an object array**\n\n\n\nreturn: Base[]\n\n```method : public : ReadObjectArray() ~ Base[]```"]
			}
		}
	},
	"System.IO.InputStream": {
		"description": "An abstract input stream",
		"functions": {
			"Close": {
				"descriptions": ["**Closes the stream**\n\n\n\nreturn: Nil\n\n```method : public : virutal : Close() ~ Nil```"]
			},
			"ReadBuffer": {
				"descriptions": ["**Reads bytes into a byte buffer**\n\n\n\noffset - Int\n\nnum - Int\n\nbuffer - Byte[]\n\nreturn: Int\n\n```method : public : virutal : ReadBuffer(offset:Int, num:Int, buffer:Byte[]) ~ Int```", "**Reads bytes into a character buffer**\n\n\n\noffset - Int\n\nnum - Int\n\nbuffer - Char[]\n\nreturn: Int\n\n```method : public : virutal : ReadBuffer(offset:Int, num:Int, buffer:Char[]) ~ Int```"]
			},
			"ReadByte": {
				"descriptions": ["**Reads a byte**\n\n\n\nreturn: Byte\n\n```method : public : virutal : ReadByte() ~ Byte```"]
			},
			"ReadLine": {
				"descriptions": ["**Reads a string until a newline or character return is detected**\n\n\n\nreturn: System.String\n\n```method : public : virutal : ReadLine() ~ System.String```"]
			}
		}
	},
	"System.IO.OutputStream": {
		"description": "An abstract output stream",
		"functions": {
			"Close": {
				"descriptions": ["**Closes the stream**\n\n\n\nreturn: Nil\n\n```method : public : virutal : Close() ~ Nil```"]
			},
			"WriteBuffer": {
				"descriptions": ["**Writes bytes from a buffer**\n\n\n\noffset - Int\n\nnum - Int\n\nbuffer - Byte[]\n\nreturn: Int\n\n```method : public : virutal : WriteBuffer(offset:Int, num:Int, buffer:Byte[]) ~ Int```", "**Writes characters from a buffer**\n\n\n\noffset - Int\n\nnum - Int\n\nbuffer - Char[]\n\nreturn: Int\n\n```method : public : virutal : WriteBuffer(offset:Int, num:Int, buffer:Char[]) ~ Int```"]
			},
			"WriteByte": {
				"descriptions": ["**Writes a byte**\n\n\n\nb - Int\n\nreturn: Bool\n\n```method : public : virutal : WriteByte(b:Int) ~ Bool```"]
			},
			"WriteString": {
				"descriptions": ["**Writes a character string**\n\n\n\nstr - System.String\n\nreturn: Nil\n\n```method : public : virutal : WriteString(str:System.String) ~ Nil```"]
			}
		}
	},
	"System.IO.Serializer": {
		"description": "Used to serialize objects",
		"functions": {
			"Serialize": {
				"descriptions": ["**Create a byte stream of the objects that have been serialized**\n\n\n\nreturn: Byte[]\n\n```method : public : Serialize() ~ Byte[]```"]
			},
			"Write": {
				"descriptions": ["**Serializes a value**\n\n\n\nb - Bool\n\nreturn: Nil\n\n```method : public : Write(b:Bool) ~ Nil```", "**Serializes a value**\n\n\n\nc - Char\n\nreturn: Nil\n\n```method : public : Write(c:Char) ~ Nil```", "**Serializes a value**\n\n\n\ni - Int\n\nreturn: Nil\n\n```method : public : Write(i:Int) ~ Nil```", "**Serializes a value**\n\n\n\nf - Float\n\nreturn: Nil\n\n```method : public : Write(f:Float) ~ Nil```", "**Serializes a base object**\n\n\n\no - Base\n\nreturn: Nil\n\n```method : public : Write(o:Base) ~ Nil```", "**Serializes a base object**\n\n\n\nb - Bool[]\n\nreturn: Nil\n\n```method : public : Write(b:Bool[]) ~ Nil```", "**Serializes base objects**\n\n\n\no - Base[]\n\nreturn: Nil\n\n```method : public : Write(o:Base[]) ~ Nil```", "**Serializes a value**\n\n\n\nb - Byte[]\n\nreturn: Nil\n\n```method : public : Write(b:Byte[]) ~ Nil```", "**Serializes an array of values**\n\n\n\nc - Char[]\n\nreturn: Nil\n\n```method : public : Write(c:Char[]) ~ Nil```", "**Serializes an array of values**\n\n\n\ni - Int[]\n\nreturn: Nil\n\n```method : public : Write(i:Int[]) ~ Nil```", "**Serializes an array of values**\n\n\n\nf - Float[]\n\nreturn: Nil\n\n```method : public : Write(f:Float[]) ~ Nil```"]
			}
		}
	},
	"System.IO.Standard": {
		"description": "Provides standard I/O operations",
		"functions": {
			"Error": {
				"descriptions": ["**Writes an error value**\n\n\n\nb - Bool\n\nreturn: ConsoleIO\n\n```function : public : Error(b:Bool) ~ ConsoleIO```", "**Writes an error value**\n\n\n\nb - Byte\n\nreturn: ConsoleIO\n\n```function : public : Error(b:Byte) ~ ConsoleIO```", "**Writes an error value**\n\n\n\nc - Char\n\nreturn: ConsoleIO\n\n```function : public : Error(c:Char) ~ ConsoleIO```", "**Writes an error value**\n\n\n\ni - Int\n\nreturn: ConsoleIO\n\n```function : public : Error(i:Int) ~ ConsoleIO```", "**Writes an error value**\n\n\n\nf - Float\n\nreturn: ConsoleIO\n\n```function : public : Error(f:Float) ~ ConsoleIO```", "**Writes an error value**\n\n\n\ncc - Char[]\n\nreturn: ConsoleIO\n\n```function : public : Error(cc:Char[]) ~ ConsoleIO```", "**Writes an error value**\n\n\n\ns - System.String\n\nreturn: ConsoleIO\n\n```function : public : Error(s:System.String) ~ ConsoleIO```"]
			},
			"ErrorLine": {
				"descriptions": ["**Writes an error value**\n\n\n\nb - Bool\n\nreturn: ConsoleIO\n\n```function : public : ErrorLine(b:Bool) ~ ConsoleIO```", "**Writes an error value**\n\n\n\nb - Byte\n\nreturn: ConsoleIO\n\n```function : public : ErrorLine(b:Byte) ~ ConsoleIO```", "**Writes an error value**\n\n\n\nc - Char\n\nreturn: ConsoleIO\n\n```function : public : ErrorLine(c:Char) ~ ConsoleIO```", "**Writes an error value**\n\n\n\ni - Int\n\nreturn: ConsoleIO\n\n```function : public : ErrorLine(i:Int) ~ ConsoleIO```", "**Writes an error value**\n\n\n\nf - Float\n\nreturn: ConsoleIO\n\n```function : public : ErrorLine(f:Float) ~ ConsoleIO```", "**Writes an error value**\n\n\n\ncc - Char[]\n\nreturn: ConsoleIO\n\n```function : public : ErrorLine(cc:Char[]) ~ ConsoleIO```", "**Writes an error value**\n\n\n\ns - System.String\n\nreturn: ConsoleIO\n\n```function : public : ErrorLine(s:System.String) ~ ConsoleIO```", "**Writes an error character return**\n\n\n\nreturn: ConsoleIO\n\n```function : public : ErrorLine() ~ ConsoleIO```"]
			},
			"Print": {
				"descriptions": ["**Writes a value**\n\n\n\nb - Bool\n\nreturn: ConsoleIO\n\n```function : public : Print(b:Bool) ~ ConsoleIO```", "**Writes a value**\n\n\n\nb - Byte\n\nreturn: ConsoleIO\n\n```function : public : Print(b:Byte) ~ ConsoleIO```", "**Writes a value**\n\n\n\nc - Char\n\nreturn: ConsoleIO\n\n```function : public : Print(c:Char) ~ ConsoleIO```", "**Writes a value**\n\n\n\ni - Int\n\nreturn: ConsoleIO\n\n```function : public : Print(i:Int) ~ ConsoleIO```", "**Writes a value**\n\n\n\nf - Float\n\nreturn: ConsoleIO\n\n```function : public : Print(f:Float) ~ ConsoleIO```", "**Writes a value**\n\n\n\ncc - Char[]\n\nreturn: ConsoleIO\n\n```function : public : Print(cc:Char[]) ~ ConsoleIO```", "**Writes a value**\n\n\n\ns - System.String\n\nreturn: ConsoleIO\n\n```function : public : Print(s:System.String) ~ ConsoleIO```"]
			},
			"PrintLine": {
				"descriptions": ["**Writes a value**\n\n\n\nb - Bool\n\nreturn: ConsoleIO\n\n```function : public : PrintLine(b:Bool) ~ ConsoleIO```", "**Writes a value**\n\n\n\nb - Byte\n\nreturn: ConsoleIO\n\n```function : public : PrintLine(b:Byte) ~ ConsoleIO```", "**Writes a value**\n\n\n\nc - Char\n\nreturn: ConsoleIO\n\n```function : public : PrintLine(c:Char) ~ ConsoleIO```", "**Writes a value**\n\n\n\ni - Int\n\nreturn: ConsoleIO\n\n```function : public : PrintLine(i:Int) ~ ConsoleIO```", "**Writes a value**\n\n\n\nf - Float\n\nreturn: ConsoleIO\n\n```function : public : PrintLine(f:Float) ~ ConsoleIO```", "**Writes a value**\n\n\n\ncc - Char[]\n\nreturn: ConsoleIO\n\n```function : public : PrintLine(cc:Char[]) ~ ConsoleIO```", "**Writes a value**\n\n\n\ns - System.String\n\nreturn: ConsoleIO\n\n```function : public : PrintLine(s:System.String) ~ ConsoleIO```", "**Prints a character return**\n\n\n\nreturn: ConsoleIO\n\n```function : public : PrintLine() ~ ConsoleIO```"]
			},
			"ReadBuffer": {
				"descriptions": ["**Reads bytes from STDIN**\n\n\n\noffset - Int\n\nnum - Int\n\nbuffer - Byte[]\n\nreturn: Int\n\n```function : public : ReadBuffer(offset:Int, num:Int, buffer:Byte[]) ~ Int```", "**Read characters from STDIN**\n\n\n\noffset - Int\n\nnum - Int\n\nbuffer - Char[]\n\nreturn: Int\n\n```function : public : ReadBuffer(offset:Int, num:Int, buffer:Char[]) ~ Int```"]
			},
			"ReadLine": {
				"descriptions": ["**Reads a string from STDIN**\n\n\n\nreturn: System.String\n\n```function : public : ReadLine() ~ System.String```"]
			},
			"WriteBuffer": {
				"descriptions": ["**Write a byte buffer to STDOUT**\n\n\n\noffset - Int\n\nnum - Int\n\nbuffer - Byte[]\n\nreturn: Bool\n\n```function : public : WriteBuffer(offset:Int, num:Int, buffer:Byte[]) ~ Bool```", "**Write a character buffer to STDOUT**\n\n\n\noffset - Int\n\nnum - Int\n\nbuffer - Char[]\n\nreturn: Bool\n\n```function : public : WriteBuffer(offset:Int, num:Int, buffer:Char[]) ~ Bool```"]
			},
			"WriteErrorBuffer": {
				"descriptions": ["**Write a byte buffer to STDERR**\n\n\n\noffset - Int\n\nnum - Int\n\nbuffer - Byte[]\n\nreturn: Bool\n\n```function : public : WriteErrorBuffer(offset:Int, num:Int, buffer:Byte[]) ~ Bool```", "**Write a character buffer to STDERR**\n\n\n\noffset - Int\n\nnum - Int\n\nbuffer - Char[]\n\nreturn: Bool\n\n```function : public : WriteErrorBuffer(offset:Int, num:Int, buffer:Char[]) ~ Bool```"]
			}
		}
	},
	"System.IO.File.Directory": {
		"description": "Provide file directory operations",
		"functions": {
			"Create": {
				"descriptions": ["**Creates a directory**\n\n\n\nn - System.String\n\nreturn: Bool\n\n```function : public : Create(n:System.String) ~ Bool```"]
			},
			"CreatePath": {
				"descriptions": ["**Creates a directory path**\n\n\n\nn - String\n\nreturn: Bool\n\n```function : public : CreatePath(n:String) ~ Bool```"]
			},
			"Exists": {
				"descriptions": ["**Checks to see if the given directory exists**\n\n\n\nn - System.String\n\nreturn: Bool\n\n```function : public : Exists(n:System.String) ~ Bool```"]
			},
			"List": {
				"descriptions": ["**List of directory content**\n\n\n\nn - System.String\n\nreturn: System.String[]\n\n```function : public : List(n:System.String) ~ System.String[]```"]
			}
		}
	},
	"System.IO.File.File": {
		"description": "Provides file operations",
		"functions": {
			"AccessedTime": {
				"descriptions": ["**Returns the time in which the file was accessed**\n\n\n\nn - System.String\n\nreturn: Date\n\n```function : public : AccessedTime(n:System.String) ~ Date```", "**Returns the time in which the file was accessed**\n\n\n\nreturn: Date\n\n```method : public : AccessedTime() ~ Date```", "**Returns the time in which the file was accessed**\n\n\n\nn - System.String\n\ngmt - Bool\n\nreturn: Date\n\n```function : public : AccessedTime(n:System.String, gmt:Bool) ~ Date```", "**Returns the time in which the file was accessed**\n\n\n\ngmt - Bool\n\nreturn: Date\n\n```method : public : AccessedTime(gmt:Bool) ~ Date```"]
			},
			"CreateTime": {
				"descriptions": ["**Returns the time in which the file was created**\n\n\n\nn - System.String\n\nreturn: Date\n\n```function : public : CreateTime(n:System.String) ~ Date```", "**Returns the time in which the file was created**\n\n\n\nreturn: Date\n\n```method : public : CreateTime() ~ Date```", "**Returns the time in which the file was created**\n\n\n\nn - System.String\n\ngmt - Bool\n\nreturn: Date\n\n```function : public : CreateTime(n:System.String, gmt:Bool) ~ Date```", "**Returns the time in which the file was created**\n\n\n\ngmt - Bool\n\nreturn: Date\n\n```method : public : CreateTime(gmt:Bool) ~ Date```"]
			},
			"Delete": {
				"descriptions": ["**Deletes a file**\n\n\n\nn - System.String\n\nreturn: Bool\n\n```function : public : Delete(n:System.String) ~ Bool```", "**Deletes a file**\n\n\n\nreturn: Bool\n\n```method : public : Delete() ~ Bool```"]
			},
			"Exists": {
				"descriptions": ["**Check to see if a file exists**\n\n\n\nn - System.String\n\nreturn: Bool\n\n```function : public : Exists(n:System.String) ~ Bool```", "**Check to see if a file exists**\n\n\n\nreturn: Bool\n\n```method : public : Exists() ~ Bool```"]
			},
			"GetFullName": {
				"descriptions": ["**Gets the full path name for file**\n\n\n\nn - System.String\n\nreturn: System.String\n\n```function : public : GetFullName(n:System.String) ~ System.String```", "**Gets the full path name for file**\n\n\n\nreturn: System.String\n\n```method : public : GetFullName() ~ System.String```"]
			},
			"GetName": {
				"descriptions": ["**Gets the file name**\n\n\n\nreturn: String\n\n```method : public : GetName() ~ String```"]
			},
			"GetTempName": {
				"descriptions": ["**Gets a temporary file name**\n\n\n\nreturn: System.String\n\n```function : public : GetTempName() ~ System.String```"]
			},
			"Group": {
				"descriptions": ["**Gets the file group name**\n\n\n\nn - System.String\n\nreturn: System.String\n\n```function : public : Group(n:System.String) ~ System.String```", "**Gets the file group name**\n\n\n\nreturn: System.String\n\n```method : public : Group() ~ System.String```"]
			},
			"IsEOF": {
				"descriptions": ["**Check if seek pointer is at the end-of-file**\n\n\n\nreturn: Bool\n\n```method : public : IsEOF() ~ Bool```"]
			},
			"IsOpen": {
				"descriptions": ["**Checks of the file is open**\n\n\n\nreturn: Bool\n\n```method : public : IsOpen() ~ Bool```"]
			},
			"IsReadOnly": {
				"descriptions": ["**Check to see if a file can be read**\n\n\n\nn - System.String\n\nreturn: Bool\n\n```function : public : IsReadOnly(n:System.String) ~ Bool```", "**Check to see if a file can be read**\n\n\n\nreturn: Bool\n\n```method : public : IsReadOnly() ~ Bool```"]
			},
			"IsReadWrite": {
				"descriptions": ["**Check to see if a file can be read-only**\n\n\n\nn - System.String\n\nreturn: Bool\n\n```function : public : IsReadWrite(n:System.String) ~ Bool```", "**Check to see if a file can be read-only**\n\n\n\nreturn: Bool\n\n```method : public : IsReadWrite() ~ Bool```"]
			},
			"IsWriteOnly": {
				"descriptions": ["**Check to see if a file can be written**\n\n\n\nn - System.String\n\nreturn: Bool\n\n```function : public : IsWriteOnly(n:System.String) ~ Bool```", "**Check to see if a file can be written**\n\n\n\nreturn: Bool\n\n```method : public : IsWriteOnly() ~ Bool```"]
			},
			"ModifiedTime": {
				"descriptions": ["**Returns the time in which the file was modified**\n\n\n\nn - System.String\n\nreturn: Date\n\n```function : public : ModifiedTime(n:System.String) ~ Date```", "**Returns the time in which the file was modified**\n\n\n\nn - System.String\n\ngmt - Bool\n\nreturn: Date\n\n```function : public : ModifiedTime(n:System.String, gmt:Bool) ~ Date```"]
			},
			"New": {
				"descriptions": ["**Default constructor**\n\n\n\nname - System.String\n\n```New(name:System.String)```"]
			},
			"Owner": {
				"descriptions": ["**Gets the file owner name**\n\n\n\nn - System.String\n\nreturn: System.String\n\n```function : public : Owner(n:System.String) ~ System.String```", "**Gets the file owner name**\n\n\n\nreturn: System.String\n\n```method : public : Owner() ~ System.String```"]
			},
			"Rename": {
				"descriptions": ["**Renames a file**\n\n\n\no - System.String\n\nn - System.String\n\nreturn: Bool\n\n```function : public : Rename(o:System.String, n:System.String) ~ Bool```"]
			},
			"Rewind": {
				"descriptions": ["**Rewinds the seek pointer**\n\n\n\nreturn: Nil\n\n```method : public : Rewind() ~ Nil```"]
			},
			"Seek": {
				"descriptions": ["**Seeks to a point in the file**\n\n\n\np - Int\n\nreturn: Bool\n\n```method : public : Seek(p:Int) ~ Bool```"]
			},
			"Size": {
				"descriptions": ["**Returns the size of the file**\n\n\n\nn - System.String\n\nreturn: Int\n\n```function : public : Size(n:System.String) ~ Int```", "**Returns the size of the file**\n\n\n\nreturn: Int\n\n```method : public : Size() ~ Int```"]
			}
		}
	},
	"System.IO.File.FileReader": {
		"description": "Supports file read operations",
		"functions": {
			"Close": {
				"descriptions": ["**Closes the file**\n\n\n\nreturn: Nil\n\n```method : public : Close() ~ Nil```"]
			},
			"New": {
				"descriptions": ["**Default constructor.**\n\n\n\nname - System.String\n\n```New(name:System.String)```"]
			},
			"ReadBinaryFile": {
				"descriptions": ["**Reads a file's contents into byte array**\n\n\n\nname - String\n\nreturn: Byte[]\n\n```function : public : ReadBinaryFile(name:String) ~ Byte[]```"]
			},
			"ReadBuffer": {
				"descriptions": ["**Reads bytes into a byte buffer**\n\n\n\noffset - Int\n\nnum - Int\n\nbuffer - Char[]\n\nreturn: Int\n\n```method : public : ReadBuffer(offset:Int, num:Int, buffer:Char[]) ~ Int```", "**Reads bytes into a character buffer**\n\n\n\noffset - Int\n\nnum - Int\n\nbuffer - Byte[]\n\nreturn: Int\n\n```method : public : ReadBuffer(offset:Int, num:Int, buffer:Byte[]) ~ Int```"]
			},
			"ReadByte": {
				"descriptions": ["**Reads a byte**\n\n\n\nreturn: Byte\n\n```method : public : ReadByte() ~ Byte```"]
			},
			"ReadFile": {
				"descriptions": ["**Reads a file's contents into a string**\n\n\n\nname - String\n\nreturn: String\n\n```function : public : ReadFile(name:String) ~ String```"]
			},
			"ReadLine": {
				"descriptions": ["**Reads a string until a newline or character return is detected**\n\n\n\nreturn: System.String\n\n```method : public : ReadLine() ~ System.String```"]
			}
		}
	},
	"System.IO.File.FileWriter": {
		"description": "Supports file write operations",
		"functions": {
			"Close": {
				"descriptions": ["**Closes a file**\n\n\n\nreturn: Nil\n\n```method : public : Close() ~ Nil```"]
			},
			"Flush": {
				"descriptions": ["**Flushes the file buffer**\n\n\n\nreturn: Nil\n\n```method : public : Flush() ~ Nil```"]
			},
			"New": {
				"descriptions": ["**Opens a new file.**\n\n\n\nname - System.String\n\n```New(name:System.String)```", "**Opens a new file or appends to an existing one.**\n\n\n\nname - System.String\n\nappend - Bool\n\n```New(name:System.String, append:Bool)```"]
			},
			"Temp": {
				"descriptions": ["**Creates a temporary file**\n\n\n\nreturn: FileWriter\n\n```function : public : Temp() ~ FileWriter```"]
			},
			"WriteBuffer": {
				"descriptions": ["**Writes bytes from a buffer**\n\n\n\noffset - Int\n\nnum - Int\n\nbuffer - Byte[]\n\nreturn: Int\n\n```method : public : WriteBuffer(offset:Int, num:Int, buffer:Byte[]) ~ Int```", "**Writes characters from a buffer**\n\n\n\noffset - Int\n\nnum - Int\n\nbuffer - Char[]\n\nreturn: Int\n\n```method : public : WriteBuffer(offset:Int, num:Int, buffer:Char[]) ~ Int```", "**Writes bytes from a buffer**\n\n\n\nbuffer - Byte[]\n\nreturn: Int\n\n```method : public : WriteBuffer(buffer:Byte[]) ~ Int```", "**Writes characters from a buffer**\n\n\n\nbuffer - Char[]\n\nreturn: Int\n\n```method : public : WriteBuffer(buffer:Char[]) ~ Int```"]
			},
			"WriteByte": {
				"descriptions": ["**Writes a byte**\n\n\n\nb - Int\n\nreturn: Bool\n\n```method : public : WriteByte(b:Int) ~ Bool```"]
			},
			"WriteFile": {
				"descriptions": ["**Write a file's contents into a string**\n\n\n\nname - String\n\ncontent - String\n\nreturn: Bool\n\n```function : public : WriteFile(name:String, content:String) ~ Bool```"]
			},
			"WriteString": {
				"descriptions": ["**Writes a character string**\n\n\n\nstr - System.String\n\nreturn: Nil\n\n```method : public : WriteString(str:System.String) ~ Nil```"]
			}
		}
	},
	"System.IO.File.Logger": {
		"description": "Logs messages to temporary files",
		"functions": {
			"ClearError": {
				"descriptions": ["**Clears the error log file**\n\n\n\nreturn: Nil\n\n```method : public : ClearError() ~ Nil```"]
			},
			"ClearInfo": {
				"descriptions": ["**Clears the info log file**\n\n\n\nreturn: Nil\n\n```method : public : ClearInfo() ~ Nil```"]
			},
			"ClearWarn": {
				"descriptions": ["**Clears the warning log file**\n\n\n\nreturn: Nil\n\n```method : public : ClearWarn() ~ Nil```"]
			},
			"Error": {
				"descriptions": ["**Logs an error message**\n\n\n\nmessage - String\n\nreturn: Bool\n\n```method : public : Error(message:String) ~ Bool```"]
			},
			"GetDirectory": {
				"descriptions": ["**Gets the logging directory**\n\n\n\nreturn: String\n\n```method : public : GetDirectory() ~ String```"]
			},
			"GetErrorFile": {
				"descriptions": ["**Gets path to error file**\n\n\n\nreturn: String\n\n```method : public : GetErrorFile() ~ String```"]
			},
			"GetInfoFile": {
				"descriptions": ["**Gets path to information file**\n\n\n\nreturn: String\n\n```method : public : GetInfoFile() ~ String```"]
			},
			"GetWarnFile": {
				"descriptions": ["**Gets path to warning file**\n\n\n\nreturn: String\n\n```method : public : GetWarnFile() ~ String```"]
			},
			"Info": {
				"descriptions": ["**Logs an informational message**\n\n\n\nmessage - String\n\nreturn: Bool\n\n```method : public : Info(message:String) ~ Bool```"]
			},
			"Instance": {
				"descriptions": ["**Gets an instance of the logger**\n\n\n\nreturn: Logger\n\n```function : public : Instance() ~ Logger```"]
			},
			"Warn": {
				"descriptions": ["**Logs a warning message**\n\n\n\nmessage - String\n\nreturn: Bool\n\n```method : public : Warn(message:String) ~ Bool```"]
			}
		}
	},
	"System.IO.Net.TCPSecureSocket": {
		"description": "Secure SSL TCP/IP socket",
		"functions": {
			"Close": {
				"descriptions": ["**Closes the socket**\n\n\n\nreturn: Nil\n\n```method : public : Close() ~ Nil```"]
			},
			"Flush": {
				"descriptions": ["**Flushes the output buffer. This is a no-opt given this socket is not backed by an output buffer.**\n\n\n\nreturn: Nil\n\n```method : public : Flush() ~ Nil```"]
			},
			"GetAddress": {
				"descriptions": ["**Returns the connected network address**\n\n\n\nreturn: String\n\n```method : public : GetAddress() ~ String```"]
			},
			"GetCert": {
				"descriptions": ["**Gets the X.509 certificate's subject name**\n\n\n\nreturn: String\n\n```method : public : GetCert() ~ String```"]
			},
			"GetPort": {
				"descriptions": ["**Returns the connected network port**\n\n\n\nreturn: Int\n\n```method : public : GetPort() ~ Int```"]
			},
			"IsOpen": {
				"descriptions": ["**Returns rather the socket is open**\n\n\n\nreturn: Bool\n\n```method : public : IsOpen() ~ Bool```"]
			},
			"New": {
				"descriptions": ["**Default constructor**\n\n\n\naddress - System.String\n\nport - Int\n\n```New(address:System.String, port:Int)```"]
			},
			"ReadBuffer": {
				"descriptions": ["**Reads bytes into a byte buffer**\n\n\n\noffset - Int\n\nnum - Int\n\nbuffer - Byte[]\n\nreturn: Int\n\n```method : public : ReadBuffer(offset:Int, num:Int, buffer:Byte[]) ~ Int```", "**Reads bytes into a character buffer**\n\n\n\noffset - Int\n\nnum - Int\n\nbuffer - Char[]\n\nreturn: Int\n\n```method : public : ReadBuffer(offset:Int, num:Int, buffer:Char[]) ~ Int```"]
			},
			"ReadByte": {
				"descriptions": ["**Reads a byte**\n\n\n\nreturn: Byte\n\n```method : public : ReadByte() ~ Byte```"]
			},
			"ReadLine": {
				"descriptions": ["**Reads a string until a newline or character return is detected**\n\n\n\nreturn: System.String\n\n```method : public : native : ReadLine() ~ System.String```"]
			},
			"WriteBuffer": {
				"descriptions": ["**Writes bytes from a byte buffer**\n\n\n\noffset - Int\n\nnum - Int\n\nbuffer - Byte[]\n\nreturn: Int\n\n```method : public : WriteBuffer(offset:Int, num:Int, buffer:Byte[]) ~ Int```", "**Writes characters from a character buffer**\n\n\n\noffset - Int\n\nnum - Int\n\nbuffer - Char[]\n\nreturn: Int\n\n```method : public : WriteBuffer(offset:Int, num:Int, buffer:Char[]) ~ Int```"]
			},
			"WriteByte": {
				"descriptions": ["**Writes a byte**\n\n\n\nb - Int\n\nreturn: Bool\n\n```method : public : WriteByte(b:Int) ~ Bool```"]
			},
			"WriteString": {
				"descriptions": ["**Writes a character string**\n\n\n\nstr - System.String\n\nreturn: Nil\n\n```method : public : WriteString(str:System.String) ~ Nil```"]
			}
		}
	},
	"System.IO.Net.TCPSocket": {
		"description": "TCP/IP socket",
		"functions": {
			"Close": {
				"descriptions": ["**Closes the socket**\n\n\n\nreturn: Nil\n\n```method : public : Close() ~ Nil```"]
			},
			"Flush": {
				"descriptions": ["**Flushes the output buffer. This is a no-opt given this socket is not backed by an output buffer.**\n\n\n\nreturn: Nil\n\n```method : public : Flush() ~ Nil```"]
			},
			"GetAddress": {
				"descriptions": ["**Returns the connected network address**\n\n\n\nreturn: String\n\n```method : public : GetAddress() ~ String```"]
			},
			"GetPort": {
				"descriptions": ["**Returns the connected network port**\n\n\n\nreturn: Int\n\n```method : public : GetPort() ~ Int```"]
			},
			"HostName": {
				"descriptions": ["**Reads the host name**\n\n\n\nreturn: System.String\n\n```function : public : HostName() ~ System.String```"]
			},
			"IsOpen": {
				"descriptions": ["**Returns rather the socket is open**\n\n\n\nreturn: Bool\n\n```method : public : IsOpen() ~ Bool```"]
			},
			"New": {
				"descriptions": ["**Default constructor**\n\n\n\naddress - System.String\n\nport - Int\n\n```New(address:System.String, port:Int)```"]
			},
			"ReadBuffer": {
				"descriptions": ["**Reads bytes into a byte buffer**\n\n\n\noffset - Int\n\nnum - Int\n\nbuffer - Byte[]\n\nreturn: Int\n\n```method : public : ReadBuffer(offset:Int, num:Int, buffer:Byte[]) ~ Int```", "**Reads bytes into a character buffer**\n\n\n\noffset - Int\n\nnum - Int\n\nbuffer - Char[]\n\nreturn: Int\n\n```method : public : ReadBuffer(offset:Int, num:Int, buffer:Char[]) ~ Int```"]
			},
			"ReadByte": {
				"descriptions": ["**Reads a byte**\n\n\n\nreturn: Byte\n\n```method : public : ReadByte() ~ Byte```"]
			},
			"ReadLine": {
				"descriptions": ["**Reads a string until a newline or character return is detected**\n\n\n\nreturn: System.String\n\n```method : public : ReadLine() ~ System.String```"]
			},
			"Resolve": {
				"descriptions": ["**List of resolved IP addresses**\n\n\n\nn - System.String\n\nreturn: System.String[]\n\n```function : public : Resolve(n:System.String) ~ System.String[]```"]
			},
			"WriteBuffer": {
				"descriptions": ["**Writes bytes from a byte buffer**\n\n\n\noffset - Int\n\nnum - Int\n\nbuffer - Byte[]\n\nreturn: Int\n\n```method : public : WriteBuffer(offset:Int, num:Int, buffer:Byte[]) ~ Int```", "**Writes characters from a character buffer**\n\n\n\noffset - Int\n\nnum - Int\n\nbuffer - Char[]\n\nreturn: Int\n\n```method : public : WriteBuffer(offset:Int, num:Int, buffer:Char[]) ~ Int```"]
			},
			"WriteByte": {
				"descriptions": ["**Writes a byte**\n\n\n\nb - Int\n\nreturn: Bool\n\n```method : public : WriteByte(b:Int) ~ Bool```"]
			},
			"WriteString": {
				"descriptions": ["**Writes a character string**\n\n\n\nstr - System.String\n\nreturn: Nil\n\n```method : public : WriteString(str:System.String) ~ Nil```"]
			}
		}
	},
	"System.IO.Net.TCPSocketServer": {
		"description": "TCP/IP Server socket",
		"functions": {
			"Accept": {
				"descriptions": ["**Accepts a client connection**\n\n\n\nreturn: TCPSocket\n\n```method : public : Accept() ~ TCPSocket```"]
			},
			"Close": {
				"descriptions": ["**Closes the server socket**\n\n\n\nreturn: Nil\n\n```method : public : Close() ~ Nil```"]
			},
			"Listen": {
				"descriptions": ["**Listens for incoming client connections**\n\n\n\nbacklog - Int\n\nreturn: Bool\n\n```method : public : Listen(backlog:Int) ~ Bool```"]
			},
			"New": {
				"descriptions": ["**Default constructor**\n\n\n\nport - Int\n\n```New(port:Int)```"]
			}
		}
	},
	"System.Introspection.Class": {
		"description": "Represents a runtime class",
		"functions": {
			"GetMethodNumber": {
				"descriptions": ["**Returns the number of methods associated with the class**\n\n\n\nreturn: Int\n\n```method : public : GetMethodNumber() ~ Int```"]
			},
			"GetMethods": {
				"descriptions": ["**Returns an array of associated methods**\n\n\n\nreturn: Method[]\n\n```method : public : GetMethods() ~ Method[]```"]
			},
			"GetName": {
				"descriptions": ["**Returns the type name of the class**\n\n\n\nreturn: String\n\n```method : public : GetName() ~ String```"]
			},
			"Instance": {
				"descriptions": ["**Creates an instance of the given class. The class must have a zero-parameter constructor to support this operation.**\n\n\n\nname - System.String\n\nreturn: System.Base\n\n```function : public : Instance(name:System.String) ~ System.Base```"]
			},
			"IsLoaded": {
				"descriptions": ["**Checks rather the class has been loaded**\n\n\n\nreturn: Bool\n\n```method : public : IsLoaded() ~ Bool```"]
			}
		}
	},
	"System.Introspection.DataType": {
		"description": "Represents a runtime data type",
		"functions": {
			"GetClassName": {
				"descriptions": ["**Returns array the class type name**\n\n\n\nreturn: String\n\n```method : public : GetClassName() ~ String```"]
			},
			"GetDimension": {
				"descriptions": ["**Returns array dimension size of the data type. Will return 0 if type is a scalar**\n\n\n\nreturn: Int\n\n```method : public : GetDimension() ~ Int```"]
			},
			"GetType": {
				"descriptions": ["**Returns the data type's type**\n\n\n\nreturn: TypeId\n\n```method : public : GetType() ~ TypeId```"]
			}
		}
	},
	"System.Introspection.Method": {
		"description": "Represents a runtime method or function",
		"functions": {
			"GetClass": {
				"descriptions": ["**Returns the class associated with this method**\n\n\n\nreturn: Class\n\n```method : public : GetClass() ~ Class```"]
			},
			"GetName": {
				"descriptions": ["**Returns the name of the method**\n\n\n\nreturn: String\n\n```method : public : GetName() ~ String```"]
			},
			"GetParameters": {
				"descriptions": ["**Returns an array of method parameters**\n\n\n\nreturn: DataType[]\n\n```method : public : GetParameters() ~ DataType[]```"]
			},
			"GetReturn": {
				"descriptions": ["**Returns the method's return type**\n\n\n\nreturn: DataType\n\n```method : public : GetReturn() ~ DataType```"]
			}
		}
	},
	"System.Matrix.Matrix2D": {
		"description": "Encapsulates 2D matrix operations",
		"functions": {
			"Add": {
				"descriptions": ["**Adds a constant to a matrix**\n\n\n\nx - Float\n\nb - Float[,]\n\nreturn: Float[,]\n\n```function : public : native : Add(x:Float, b:Float[,]) ~ Float[,]```", "**Adds a constant to a matrix**\n\n\n\nb - Float[,]\n\nx - Float\n\nreturn: Float[,]\n\n```function : public : native : Add(b:Float[,], x:Float) ~ Float[,]```", "**Adds two matrices**\n\n\n\na - Float[,]\n\nb - Float[,]\n\nreturn: Float[,]\n\n```function : public : native : Add(a:Float[,], b:Float[,]) ~ Float[,]```"]
			},
			"Concatenate": {
				"descriptions": ["**Concatenates two matrix**\n\n\n\na - Float[,]\n\nb - Float[,]\n\nis_row - Bool\n\nreturn: Float[,]\n\n```function : public : Concatenate(a:Float[,], b:Float[,], is_row:Bool) ~ Float[,]```"]
			},
			"Divide": {
				"descriptions": ["**Divides a constant by a matrix**\n\n\n\nb - Float[,]\n\nx - Float\n\nreturn: Float[,]\n\n```function : public : native : Divide(b:Float[,], x:Float) ~ Float[,]```", "**Divides a constant by a matrix**\n\n\n\nx - Float\n\nb - Float[,]\n\nreturn: Float[,]\n\n```function : public : native : Divide(x:Float, b:Float[,]) ~ Float[,]```", "**Divides two matrices**\n\n\n\na - Float[,]\n\nb - Float[,]\n\nreturn: Float[,]\n\n```function : public : native : Divide(a:Float[,], b:Float[,]) ~ Float[,]```"]
			},
			"Dot": {
				"descriptions": ["**Calculates the dot product.**\n\n\n\na - Float[,]\n\nb - Float[,]\n\nreturn: Float[,]\n\n```function : public : native : Dot(a:Float[,], b:Float[,]) ~ Float[,]```"]
			},
			"DotSigmoid": {
				"descriptions": ["**Calculates the Dot Product applying while applying the Sigmoid function to all elements**\n\n\n\na - Float[,]\n\nb - Float[,]\n\nreturn: Float[,]\n\n```function : public : native : DotSigmoid(a:Float[,], b:Float[,]) ~ Float[,]```"]
			},
			"Multiple": {
				"descriptions": ["**Multiplies a constant by a matrix**\n\n\n\nx - Float\n\nb - Float[,]\n\nreturn: Float[,]\n\n```function : public : native : Multiple(x:Float, b:Float[,]) ~ Float[,]```", "**Multiplies a constant by a matrix**\n\n\n\nb - Float[,]\n\nx - Float\n\nreturn: Float[,]\n\n```function : public : native : Multiple(b:Float[,], x:Float) ~ Float[,]```", "**Multiplies two matrices using the Hadamard rule**\n\n\n\na - Float[,]\n\nb - Float[,]\n\nreturn: Float[,]\n\n```function : public : native : Multiple(a:Float[,], b:Float[,]) ~ Float[,]```"]
			},
			"Random": {
				"descriptions": ["**Generates a random 2D array of values from 0.0 to 1.0**\n\n\n\nrows - Int\n\ncols - Int\n\nreturn: Float[,]\n\n```function : public : Random(rows:Int, cols:Int) ~ Float[,]```"]
			},
			"RandomNormal": {
				"descriptions": ["**Generates a random normal distribution of values**\n\n\n\nmean - Float\n\nvariance - Float\n\nrows - Int\n\ncols - Int\n\nreturn: Float[,]\n\n```function : public : RandomNormal(mean:Float, variance:Float, rows:Int, cols:Int) ~ Float[,]```", "**Generates a random normal value**\n\n\n\nmean - Float\n\nvariance - Float\n\nreturn: Float\n\n```function : public : RandomNormal(mean:Float, variance:Float) ~ Float```"]
			},
			"Sigmoid": {
				"descriptions": ["**Sigmoid 'S' function**\n\n\n\nx - Float\n\nreturn: Float\n\n```function : public : native : Sigmoid(x:Float) ~ Float```", "**Applies the Sigmoid function to all elements**\n\n\n\nb - Float[,]\n\nreturn: Float[,]\n\n```function : public : native : Sigmoid(b:Float[,]) ~ Float[,]```"]
			},
			"Split": {
				"descriptions": ["**Splits a matrix**\n\n\n\nb - Float[,]\n\noffset - Int\n\ncount - Int\n\nis_row - Bool\n\nreturn: Float[,]\n\n```function : public : Split(b:Float[,], offset:Int, count:Int, is_row:Bool) ~ Float[,]```"]
			},
			"Subtract": {
				"descriptions": ["**Subtracts a constant from a matrix**\n\n\n\nx - Float\n\nb - Float[,]\n\nreturn: Float[,]\n\n```function : public : native : Subtract(x:Float, b:Float[,]) ~ Float[,]```", "**Adds a constant to a matrix**\n\n\n\nb - Float[,]\n\nx - Float\n\nreturn: Float[,]\n\n```function : public : native : Subtract(b:Float[,], x:Float) ~ Float[,]```", "**Subtracts two matrices**\n\n\n\na - Float[,]\n\nb - Float[,]\n\nreturn: Float[,]\n\n```function : public : native : Subtract(a:Float[,], b:Float[,]) ~ Float[,]```"]
			},
			"Transpose": {
				"descriptions": ["**Transpose a matrix swapping rows and columns.**\n\n\n\na - Float[,]\n\nreturn: Float[,]\n\n```function : public : native : Transpose(a:Float[,]) ~ Float[,]```"]
			}
		}
	},
	"System.Time.Date": {
		"description": "Provides date and time functionality",
		"functions": {
			"AddDays": {
				"descriptions": ["**Add days to the date**\n\n\n\nvalue - Int\n\nreturn: Nil\n\n```method : public : AddDays(value:Int) ~ Nil```"]
			},
			"AddHours": {
				"descriptions": ["**Add hours to the date**\n\n\n\nvalue - Int\n\nreturn: Nil\n\n```method : public : AddHours(value:Int) ~ Nil```"]
			},
			"AddMinutes": {
				"descriptions": ["**Add minutes to the date**\n\n\n\nvalue - Int\n\nreturn: Nil\n\n```method : public : AddMinutes(value:Int) ~ Nil```"]
			},
			"AddSeconds": {
				"descriptions": ["**Add seconds to the date**\n\n\n\nvalue - Int\n\nreturn: Nil\n\n```method : public : AddSeconds(value:Int) ~ Nil```"]
			},
			"Clone": {
				"descriptions": ["**Clones the object instance**\n\n\n\nreturn: System.Compare\n\n```method : public : Clone() ~ System.Compare```"]
			},
			"Compare": {
				"descriptions": ["**Compares two dates**\n\n\n\nrhs - System.Compare\n\nreturn: Int\n\n```method : public : Compare(rhs:System.Compare) ~ Int```"]
			},
			"GetDay": {
				"descriptions": ["**Returns the day**\n\n\n\nreturn: Int\n\n```method : public : GetDay() ~ Int```"]
			},
			"GetDayName": {
				"descriptions": ["**Returns name of the day**\n\n\n\nreturn: String\n\n```method : public : GetDayName() ~ String```"]
			},
			"GetHours": {
				"descriptions": ["**Returns the hours**\n\n\n\nreturn: Int\n\n```method : public : GetHours() ~ Int```"]
			},
			"GetMinutes": {
				"descriptions": ["**Returns the minutes**\n\n\n\nreturn: Int\n\n```method : public : GetMinutes() ~ Int```"]
			},
			"GetMonth": {
				"descriptions": ["**Returns the month**\n\n\n\nreturn: Int\n\n```method : public : GetMonth() ~ Int```"]
			},
			"GetMonthName": {
				"descriptions": ["**Returns name of the month**\n\n\n\nreturn: String\n\n```method : public : GetMonthName() ~ String```"]
			},
			"GetSeconds": {
				"descriptions": ["**Returns the seconds**\n\n\n\nreturn: Int\n\n```method : public : GetSeconds() ~ Int```"]
			},
			"GetYear": {
				"descriptions": ["**Returns the year**\n\n\n\nreturn: Int\n\n```method : public : GetYear() ~ Int```"]
			},
			"HashID": {
				"descriptions": ["**Returns a hash ID for the given class**\n\n\n\nreturn: Int\n\n```method : public : HashID() ~ Int```"]
			},
			"New": {
				"descriptions": ["**Default constructor**\n\n\n\n```New()```", "**Constructor**\n\n\n\ngmt - Bool\n\n```New(gmt:Bool)```", "**Constructor, sets time to midnight of the given day**\n\n\n\nday - Int\n\nmonth - Int\n\nyear - Int\n\ngmt - Bool\n\n```New(day:Int, month:Int, year:Int, gmt:Bool)```", "**Constructor**\n\n\n\nday - Int\n\nmonth - Int\n\nyear - Int\n\nhours - Int\n\nmins - Int\n\nsecs - Int\n\ngmt - Bool\n\n```New(day:Int, month:Int, year:Int, hours:Int, mins:Int, secs:Int, gmt:Bool)```"]
			},
			"ToShortString": {
				"descriptions": ["**Creates a shortened string representation of the date**\n\n\n\nreturn: String\n\n```method : public : ToShortString() ~ String```"]
			},
			"ToString": {
				"descriptions": ["**Creates a string representation of the date**\n\n\n\nreturn: String\n\n```method : public : ToString() ~ String```"]
			}
		}
	},
	"System.Time.DateUtility": {
		"description": "Utilities for handling dates.",
		"functions": {
			"Parse": {
				"descriptions": ["**Parses a date from a String. Format <i>MM: </i>month, <i>dd: </i>day, <i>yy(yy): </i>year, <i>hh: </i>hour, <i>mm: </i>minutes and <i>ss: </i>seconds.**\n\n\n\ndate_str - String\n\nformat - String\n\ngmt - Bool\n\nreturn: Date\n\n```function : public : Parse(date_str:String, format:String, gmt:Bool) ~ Date```"]
			}
		}
	},
	"System.Time.Timer": {
		"description": "Provides elapsed time",
		"functions": {
			"End": {
				"descriptions": ["**Ends the timer**\n\n\n\nreturn: Nil\n\n```method : public : End() ~ Nil```"]
			},
			"GetElapsedTime": {
				"descriptions": ["**Gets the elapsed time in seconds**\n\n\n\nreturn: Float\n\n```method : public : GetElapsedTime() ~ Float```"]
			},
			"Start": {
				"descriptions": ["**Starts the timer**\n\n\n\nreturn: Nil\n\n```method : public : Start() ~ Nil```"]
			}
		}
	},
	"System.Utility.Parser": {
		"description": "Utilities for parsing",
		"functions": {
			"Tokenize": {
				"descriptions": ["**Simple tokenizer**\n\n\n\ninput - String\n\nreturn: Vector&lt;String&gt;\n\n```function : public : Tokenize(input:String) ~ Vector&lt;String&gt;```"]
			}
		}
	},
	"Web.FastCgi.Handler": {
		"description": "Interface required to implementing handling classes",
		"functions": {
			"Forward": {
				"descriptions": ["**Accepts a forwarding request from another handler instance**\n\n\n\nreq - Request\n\nres - Response\n\nreturn: Nil\n\n```function : public : virutal : Forward(req:Request, res:Response) ~ Nil```"]
			},
			"Request": {
				"descriptions": ["**Handles a direct request**\n\n\n\nres - Request\n\nreq - Response\n\nreturn: Nil\n\n```function : public : virutal : Request(res:Request, req:Response) ~ Nil```"]
			}
		}
	},
	"Web.FastCgi.Request": {
		"description": "FastCGI request",
		"functions": {
			"GetClientAddress": {
				"descriptions": ["**Gets the client's address IP address**\n\n\n\nreturn: String\n\n```method : public : GetClientAddress() ~ String```"]
			},
			"GetCookie": {
				"descriptions": ["**Gets a cookie**\n\n\n\nname - String\n\nreturn: String\n\n```method : public : GetCookie(name:String) ~ String```"]
			},
			"GetData": {
				"descriptions": ["**Gets response data**\n\n\n\nreturn: String\n\n```method : public : GetData() ~ String```"]
			},
			"GetDataValue": {
				"descriptions": ["**Gets a response data parameter value**\n\n\n\nname - String\n\nreturn: String\n\n```method : public : GetDataValue(name:String) ~ String```"]
			},
			"GetProtocol": {
				"descriptions": ["**Gets the request protocol**\n\n\n\nreturn: String\n\n```method : public : GetProtocol() ~ String```"]
			},
			"GetQuery": {
				"descriptions": ["**Gets the request query**\n\n\n\nreturn: String\n\n```method : public : GetQuery() ~ String```"]
			},
			"GetQueryValue": {
				"descriptions": ["**Gets a value for a query parameter**\n\n\n\nname - String\n\nreturn: String\n\n```method : public : GetQueryValue(name:String) ~ String```"]
			},
			"GetRequestMethod": {
				"descriptions": ["**Gets the request method**\n\n\n\nreturn: String\n\n```method : public : GetRequestMethod() ~ String```"]
			},
			"GetRequestUri": {
				"descriptions": ["**Gets the request URI**\n\n\n\nreturn: String\n\n```method : public : GetRequestUri() ~ String```"]
			}
		}
	},
	"Web.FastCgi.Response": {
		"description": "FastCgi Response",
		"functions": {
			"AddBody": {
				"descriptions": ["**Adds text to response body**\n\n\n\ns - String\n\nreturn: Nil\n\n```method : public : AddBody(s:String) ~ Nil```"]
			},
			"AddCookie": {
				"descriptions": ["**Adds a cookie**\n\n\n\nname - String\n\nvalue - String\n\nreturn: Nil\n\n```method : public : AddCookie(name:String, value:String) ~ Nil```", "**Adds a cookie**\n\n\n\nname - String\n\nvalue - String\n\nexpires - Time.Date\n\nreturn: Nil\n\n```method : public : AddCookie(name:String, value:String, expires:Time.Date) ~ Nil```"]
			},
			"CreateUUID": {
				"descriptions": ["**Generates a UUID**\n\n\n\nreturn: String\n\n```method : public : CreateUUID() ~ String```"]
			},
			"Submit": {
				"descriptions": ["**Submits a response**\n\n\n\nreturn: Nil\n\n```method : public : Submit() ~ Nil```"]
			}
		}
	},
	"Web.HTTP.HttpClient": {
		"description": "HTTP client",
		"functions": {
			"AddHeader": {
				"descriptions": ["**Adds a HTTP request header**\n\n\n\nname - String\n\nvalue - String\n\nreturn: Nil\n\n```method : public : AddHeader(name:String, value:String) ~ Nil```"]
			},
			"CookiesEnabled": {
				"descriptions": ["**Sets cookie support**\n\n\n\ncookies_enabled - Bool\n\nreturn: Nil\n\n```method : public : CookiesEnabled(cookies_enabled:Bool) ~ Nil```"]
			},
			"Get": {
				"descriptions": ["**Performs a HTTP GET**\n\n\n\nurl - String\n\nreturn: Vector&lt;String&gt;\n\n```method : public : Get(url:String) ~ Vector&lt;String&gt;```", "**Performs a HTTP GET**\n\n\n\nurl - String\n\ncontent_type - String\n\nreturn: Vector&lt;String&gt;\n\n```method : public : Get(url:String, content_type:String) ~ Vector&lt;String&gt;```"]
			},
			"GetAll": {
				"descriptions": ["**Performs a HTTP GET and returns results as a String**\n\n\n\nurl - String\n\nreturn: String\n\n```function : public : GetAll(url:String) ~ String```"]
			},
			"GetCookies": {
				"descriptions": ["**Gets the cookies**\n\n\n\nreturn: Vector&lt;String&gt;\n\n```method : public : GetCookies() ~ Vector&lt;String&gt;```"]
			},
			"GetHeaders": {
				"descriptions": ["**Gets the HTTP headers**\n\n\n\nreturn: Hash&lt;String,String&gt;\n\n```method : public : GetHeaders() ~ Hash&lt;String,String&gt;```"]
			},
			"New": {
				"descriptions": ["**Default constructor**\n\n\n\n```New()```"]
			},
			"Post": {
				"descriptions": ["**Performs a HTTP POST**\n\n\n\nurl - String\n\ndata - String\n\nreturn: Vector&lt;String&gt;\n\n```method : public : Post(url:String, data:String) ~ Vector&lt;String&gt;```", "**Performs a HTTP POST**\n\n\n\nurl - String\n\ndata - String\n\ncontent_type - String\n\nreturn: Vector&lt;String&gt;\n\n```method : public : Post(url:String, data:String, content_type:String) ~ Vector&lt;String&gt;```"]
			},
			"PostAll": {
				"descriptions": ["**Performs a HTTP POST**\n\n\n\nurl - String\n\ndata - String\n\nreturn: String\n\n```function : public : PostAll(url:String, data:String) ~ String```", "**Performs a HTTP POST**\n\n\n\nurl - String\n\ndata - String\n\ncontent_type - String\n\nreturn: String\n\n```function : public : PostAll(url:String, data:String, content_type:String) ~ String```"]
			},
			"SetCookie": {
				"descriptions": ["**Sets a cookie**\n\n\n\ncookie - String\n\nreturn: Nil\n\n```method : public : SetCookie(cookie:String) ~ Nil```"]
			}
		}
	},
	"Web.HTTP.HttpsClient": {
		"description": "HTTPS client that uses a SSL secure socket",
		"functions": {
			"AddHeader": {
				"descriptions": ["**Adds a HTTP request header**\n\n\n\nname - String\n\nvalue - String\n\nreturn: Nil\n\n```method : public : AddHeader(name:String, value:String) ~ Nil```"]
			},
			"CookiesEnabled": {
				"descriptions": ["**Sets cookie support**\n\n\n\ncookies_enabled - Bool\n\nreturn: Nil\n\n```method : public : CookiesEnabled(cookies_enabled:Bool) ~ Nil```"]
			},
			"Get": {
				"descriptions": ["**Performs a HTTP GET**\n\n\n\nurl - String\n\nreturn: Vector&lt;String&gt;\n\n```method : public : Get(url:String) ~ Vector&lt;String&gt;```", "**Performs a HTTP GET**\n\n\n\nurl - String\n\ncontent_type - String\n\nreturn: Vector&lt;String&gt;\n\n```method : public : Get(url:String, content_type:String) ~ Vector&lt;String&gt;```"]
			},
			"GetAll": {
				"descriptions": ["**Performs a HTTP GET and returns results as a String**\n\n\n\nurl - String\n\nreturn: String\n\n```function : public : GetAll(url:String) ~ String```"]
			},
			"GetCert": {
				"descriptions": ["**Gets the socket's X.509 certificate subject name**\n\n\n\nreturn: String\n\n```method : public : GetCert() ~ String```"]
			},
			"GetCookies": {
				"descriptions": ["**Gets the cookies**\n\n\n\nreturn: Vector&lt;String&gt;\n\n```method : public : GetCookies() ~ Vector&lt;String&gt;```"]
			},
			"GetHeaders": {
				"descriptions": ["**Gets the HTTP headers**\n\n\n\nreturn: Hash&lt;String,String&gt;\n\n```method : public : GetHeaders() ~ Hash&lt;String,String&gt;```"]
			},
			"New": {
				"descriptions": ["**Default constructor**\n\n\n\n```New()```"]
			},
			"Post": {
				"descriptions": ["**Performs a HTTP POST**\n\n\n\nurl - String\n\ndata - String\n\nreturn: Vector&lt;String&gt;\n\n```method : public : Post(url:String, data:String) ~ Vector&lt;String&gt;```", "**Performs a HTTP POST**\n\n\n\nurl - String\n\ndata - String\n\ncontent_type - String\n\nreturn: Vector&lt;String&gt;\n\n```method : public : Post(url:String, data:String, content_type:String) ~ Vector&lt;String&gt;```"]
			},
			"PostAll": {
				"descriptions": ["**Performs a HTTP POST**\n\n\n\nurl - String\n\ndata - String\n\nreturn: String\n\n```function : public : PostAll(url:String, data:String) ~ String```", "**Performs a HTTP POST**\n\n\n\nurl - String\n\ndata - String\n\ncontent_type - String\n\nreturn: String\n\n```function : public : PostAll(url:String, data:String, content_type:String) ~ String```"]
			},
			"SetCookie": {
				"descriptions": ["**Sets a cookie**\n\n\n\ncookie - String\n\nreturn: Nil\n\n```method : public : SetCookie(cookie:String) ~ Nil```"]
			}
		}
	},
	"Web.HTTP.Url": {
		"description": "URL parser, encoder and decoder",
		"functions": {
			"Decode": {
				"descriptions": ["**General decoding for HTML or XML strings**\n\n\n\nstr - String\n\nreturn: String\n\n```function : public : native : Decode(str:String) ~ String```"]
			},
			"Encode": {
				"descriptions": ["**General encoding for HTML or XML strings**\n\n\n\nstr - String\n\nreturn: String\n\n```function : public : native : Encode(str:String) ~ String```"]
			},
			"GetFragment": {
				"descriptions": ["**Gets fragment**\n\n\n\nreturn: String\n\n```method : public : GetFragment() ~ String```"]
			},
			"GetHost": {
				"descriptions": ["**Gets host**\n\n\n\nreturn: String\n\n```method : public : GetHost() ~ String```"]
			},
			"GetPath": {
				"descriptions": ["**Gets path**\n\n\n\nreturn: String\n\n```method : public : GetPath() ~ String```"]
			},
			"GetPort": {
				"descriptions": ["**Gets port**\n\n\n\nreturn: Int\n\n```method : public : GetPort() ~ Int```"]
			},
			"GetQuery": {
				"descriptions": ["**Gets scheme**\n\n\n\nreturn: String\n\n```method : public : GetQuery() ~ String```"]
			},
			"GetScheme": {
				"descriptions": ["**Gets scheme**\n\n\n\nreturn: String\n\n```method : public : GetScheme() ~ String```"]
			},
			"GetUrl": {
				"descriptions": ["**Gets original URL**\n\n\n\nreturn: String\n\n```method : public : GetUrl() ~ String```"]
			},
			"New": {
				"descriptions": ["**Parsed URL into components**\n\n\n\nurl - String\n\n```New(url:String)```"]
			},
			"Parsed": {
				"descriptions": ["**Determines if given URL has been parsed correctly**\n\n\n\nreturn: Bool\n\n```method : public : Parsed() ~ Bool```"]
			},
			"ToString": {
				"descriptions": ["**String representation of URL**\n\n\n\nreturn: String\n\n```method : public : ToString() ~ String```"]
			}
		}
	},
	"Web.RSS.RSSChannel": {
		"description": "RSS channel meta data",
		"functions": {
			"GetDescription": {
				"descriptions": ["**Gets the description**\n\n\n\nreturn: String\n\n```method : public : GetDescription() ~ String```"]
			},
			"GetLink": {
				"descriptions": ["**Gets the link**\n\n\n\nreturn: String\n\n```method : public : GetLink() ~ String```"]
			},
			"GetTitle": {
				"descriptions": ["**Gets the title**\n\n\n\nreturn: String\n\n```method : public : GetTitle() ~ String```"]
			}
		}
	},
	"Web.RSS.RSSPost": {
		"description": "RSS post",
		"functions": {
			"GetDate": {
				"descriptions": ["**Gets the date string**\n\n\n\nreturn: String\n\n```method : public : GetDate() ~ String```"]
			},
			"GetDescription": {
				"descriptions": ["**Gets the description**\n\n\n\nreturn: String\n\n```method : public : GetDescription() ~ String```"]
			},
			"GetLink": {
				"descriptions": ["**Gets the link**\n\n\n\nreturn: String\n\n```method : public : GetLink() ~ String```"]
			},
			"GetTitle": {
				"descriptions": ["**Gets the title**\n\n\n\nreturn: String\n\n```method : public : GetTitle() ~ String```"]
			}
		}
	},
	"Web.RSS.RSSReader": {
		"description": "Reader for RSS feeds",
		"functions": {
			"GetChannel": {
				"descriptions": ["**Get RSS channel meta data**\n\n\n\nreturn: RSSChannel\n\n```method : public : GetChannel() ~ RSSChannel```"]
			},
			"GetPosts": {
				"descriptions": ["**Get RSS posts**\n\n\n\nreturn: Vector&lt;RSSPost&gt;\n\n```method : public : GetPosts() ~ Vector&lt;RSSPost&gt;```"]
			},
			"IsOk": {
				"descriptions": ["**Checks to see if RSS XML was successfully retrieved and parsed**\n\n\n\nreturn: Bool\n\n```method : public : IsOk() ~ Bool```"]
			},
			"New": {
				"descriptions": ["**Default constructor**\n\n\n\nurl - String\n\n```New(url:String)```"]
			}
		}
	}}